
ulom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005144  08005144  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800514c  0800514c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800514c  0800514c  0000614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005154  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  080051b0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080051b0  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b65d  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199c  00000000  00000000  000126e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00014080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000862  00000000  00000000  00014b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c7b  00000000  00000000  000153aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c59d  00000000  00000000  0002a025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008311e  00000000  00000000  000365c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b96e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  000b9724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000bc48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005040 	.word	0x08005040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005040 	.word	0x08005040

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f852 	bl	800030c <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__aeabi_d2uiz>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2200      	movs	r2, #0
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <__aeabi_d2uiz+0x38>)
 80002d6:	0004      	movs	r4, r0
 80002d8:	000d      	movs	r5, r1
 80002da:	f001 faf5 	bl	80018c8 <__aeabi_dcmpge>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d104      	bne.n	80002ec <__aeabi_d2uiz+0x1c>
 80002e2:	0020      	movs	r0, r4
 80002e4:	0029      	movs	r1, r5
 80002e6:	f001 fa5b 	bl	80017a0 <__aeabi_d2iz>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <__aeabi_d2uiz+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	0020      	movs	r0, r4
 80002f2:	0029      	movs	r1, r5
 80002f4:	f000 feb8 	bl	8001068 <__aeabi_dsub>
 80002f8:	f001 fa52 	bl	80017a0 <__aeabi_d2iz>
 80002fc:	2380      	movs	r3, #128	@ 0x80
 80002fe:	061b      	lsls	r3, r3, #24
 8000300:	469c      	mov	ip, r3
 8000302:	4460      	add	r0, ip
 8000304:	e7f1      	b.n	80002ea <__aeabi_d2uiz+0x1a>
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	41e00000 	.word	0x41e00000

0800030c <__udivmoddi4>:
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	4657      	mov	r7, sl
 8000310:	464e      	mov	r6, r9
 8000312:	4645      	mov	r5, r8
 8000314:	46de      	mov	lr, fp
 8000316:	b5e0      	push	{r5, r6, r7, lr}
 8000318:	0004      	movs	r4, r0
 800031a:	000d      	movs	r5, r1
 800031c:	4692      	mov	sl, r2
 800031e:	4699      	mov	r9, r3
 8000320:	b083      	sub	sp, #12
 8000322:	428b      	cmp	r3, r1
 8000324:	d830      	bhi.n	8000388 <__udivmoddi4+0x7c>
 8000326:	d02d      	beq.n	8000384 <__udivmoddi4+0x78>
 8000328:	4649      	mov	r1, r9
 800032a:	4650      	mov	r0, sl
 800032c:	f001 faf4 	bl	8001918 <__clzdi2>
 8000330:	0029      	movs	r1, r5
 8000332:	0006      	movs	r6, r0
 8000334:	0020      	movs	r0, r4
 8000336:	f001 faef 	bl	8001918 <__clzdi2>
 800033a:	1a33      	subs	r3, r6, r0
 800033c:	4698      	mov	r8, r3
 800033e:	3b20      	subs	r3, #32
 8000340:	d434      	bmi.n	80003ac <__udivmoddi4+0xa0>
 8000342:	469b      	mov	fp, r3
 8000344:	4653      	mov	r3, sl
 8000346:	465a      	mov	r2, fp
 8000348:	4093      	lsls	r3, r2
 800034a:	4642      	mov	r2, r8
 800034c:	001f      	movs	r7, r3
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	001e      	movs	r6, r3
 8000354:	42af      	cmp	r7, r5
 8000356:	d83b      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000358:	42af      	cmp	r7, r5
 800035a:	d100      	bne.n	800035e <__udivmoddi4+0x52>
 800035c:	e079      	b.n	8000452 <__udivmoddi4+0x146>
 800035e:	465b      	mov	r3, fp
 8000360:	1ba4      	subs	r4, r4, r6
 8000362:	41bd      	sbcs	r5, r7
 8000364:	2b00      	cmp	r3, #0
 8000366:	da00      	bge.n	800036a <__udivmoddi4+0x5e>
 8000368:	e076      	b.n	8000458 <__udivmoddi4+0x14c>
 800036a:	2200      	movs	r2, #0
 800036c:	2300      	movs	r3, #0
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	465a      	mov	r2, fp
 8000376:	4093      	lsls	r3, r2
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	4642      	mov	r2, r8
 800037e:	4093      	lsls	r3, r2
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	e029      	b.n	80003d8 <__udivmoddi4+0xcc>
 8000384:	4282      	cmp	r2, r0
 8000386:	d9cf      	bls.n	8000328 <__udivmoddi4+0x1c>
 8000388:	2200      	movs	r2, #0
 800038a:	2300      	movs	r3, #0
 800038c:	9200      	str	r2, [sp, #0]
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <__udivmoddi4+0x8e>
 8000396:	601c      	str	r4, [r3, #0]
 8000398:	605d      	str	r5, [r3, #4]
 800039a:	9800      	ldr	r0, [sp, #0]
 800039c:	9901      	ldr	r1, [sp, #4]
 800039e:	b003      	add	sp, #12
 80003a0:	bcf0      	pop	{r4, r5, r6, r7}
 80003a2:	46bb      	mov	fp, r7
 80003a4:	46b2      	mov	sl, r6
 80003a6:	46a9      	mov	r9, r5
 80003a8:	46a0      	mov	r8, r4
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ac:	4642      	mov	r2, r8
 80003ae:	469b      	mov	fp, r3
 80003b0:	2320      	movs	r3, #32
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	4652      	mov	r2, sl
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	4641      	mov	r1, r8
 80003ba:	0013      	movs	r3, r2
 80003bc:	464a      	mov	r2, r9
 80003be:	408a      	lsls	r2, r1
 80003c0:	0017      	movs	r7, r2
 80003c2:	4642      	mov	r2, r8
 80003c4:	431f      	orrs	r7, r3
 80003c6:	4653      	mov	r3, sl
 80003c8:	4093      	lsls	r3, r2
 80003ca:	001e      	movs	r6, r3
 80003cc:	42af      	cmp	r7, r5
 80003ce:	d9c3      	bls.n	8000358 <__udivmoddi4+0x4c>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	4643      	mov	r3, r8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0d8      	beq.n	8000390 <__udivmoddi4+0x84>
 80003de:	07fb      	lsls	r3, r7, #31
 80003e0:	0872      	lsrs	r2, r6, #1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	4646      	mov	r6, r8
 80003e6:	087b      	lsrs	r3, r7, #1
 80003e8:	e00e      	b.n	8000408 <__udivmoddi4+0xfc>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d101      	bne.n	80003f2 <__udivmoddi4+0xe6>
 80003ee:	42a2      	cmp	r2, r4
 80003f0:	d80c      	bhi.n	800040c <__udivmoddi4+0x100>
 80003f2:	1aa4      	subs	r4, r4, r2
 80003f4:	419d      	sbcs	r5, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2100      	movs	r1, #0
 80003fe:	3e01      	subs	r6, #1
 8000400:	1824      	adds	r4, r4, r0
 8000402:	414d      	adcs	r5, r1
 8000404:	2e00      	cmp	r6, #0
 8000406:	d006      	beq.n	8000416 <__udivmoddi4+0x10a>
 8000408:	42ab      	cmp	r3, r5
 800040a:	d9ee      	bls.n	80003ea <__udivmoddi4+0xde>
 800040c:	3e01      	subs	r6, #1
 800040e:	1924      	adds	r4, r4, r4
 8000410:	416d      	adcs	r5, r5
 8000412:	2e00      	cmp	r6, #0
 8000414:	d1f8      	bne.n	8000408 <__udivmoddi4+0xfc>
 8000416:	9800      	ldr	r0, [sp, #0]
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	465b      	mov	r3, fp
 800041c:	1900      	adds	r0, r0, r4
 800041e:	4169      	adcs	r1, r5
 8000420:	2b00      	cmp	r3, #0
 8000422:	db24      	blt.n	800046e <__udivmoddi4+0x162>
 8000424:	002b      	movs	r3, r5
 8000426:	465a      	mov	r2, fp
 8000428:	4644      	mov	r4, r8
 800042a:	40d3      	lsrs	r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	40e2      	lsrs	r2, r4
 8000430:	001c      	movs	r4, r3
 8000432:	465b      	mov	r3, fp
 8000434:	0015      	movs	r5, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	db2a      	blt.n	8000490 <__udivmoddi4+0x184>
 800043a:	0026      	movs	r6, r4
 800043c:	409e      	lsls	r6, r3
 800043e:	0033      	movs	r3, r6
 8000440:	0026      	movs	r6, r4
 8000442:	4647      	mov	r7, r8
 8000444:	40be      	lsls	r6, r7
 8000446:	0032      	movs	r2, r6
 8000448:	1a80      	subs	r0, r0, r2
 800044a:	4199      	sbcs	r1, r3
 800044c:	9000      	str	r0, [sp, #0]
 800044e:	9101      	str	r1, [sp, #4]
 8000450:	e79e      	b.n	8000390 <__udivmoddi4+0x84>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d8bc      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000456:	e782      	b.n	800035e <__udivmoddi4+0x52>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	2100      	movs	r1, #0
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	9100      	str	r1, [sp, #0]
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	2201      	movs	r2, #1
 8000468:	40da      	lsrs	r2, r3
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	e785      	b.n	800037a <__udivmoddi4+0x6e>
 800046e:	4642      	mov	r2, r8
 8000470:	2320      	movs	r3, #32
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	4646      	mov	r6, r8
 8000478:	409a      	lsls	r2, r3
 800047a:	0023      	movs	r3, r4
 800047c:	40f3      	lsrs	r3, r6
 800047e:	4644      	mov	r4, r8
 8000480:	4313      	orrs	r3, r2
 8000482:	002a      	movs	r2, r5
 8000484:	40e2      	lsrs	r2, r4
 8000486:	001c      	movs	r4, r3
 8000488:	465b      	mov	r3, fp
 800048a:	0015      	movs	r5, r2
 800048c:	2b00      	cmp	r3, #0
 800048e:	dad4      	bge.n	800043a <__udivmoddi4+0x12e>
 8000490:	4642      	mov	r2, r8
 8000492:	002f      	movs	r7, r5
 8000494:	2320      	movs	r3, #32
 8000496:	0026      	movs	r6, r4
 8000498:	4097      	lsls	r7, r2
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	40de      	lsrs	r6, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	4333      	orrs	r3, r6
 80004a2:	e7cd      	b.n	8000440 <__udivmoddi4+0x134>

080004a4 <__aeabi_ddiv>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	46de      	mov	lr, fp
 80004a8:	4645      	mov	r5, r8
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	b087      	sub	sp, #28
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	030b      	lsls	r3, r1, #12
 80004b8:	0b1b      	lsrs	r3, r3, #12
 80004ba:	469b      	mov	fp, r3
 80004bc:	0fca      	lsrs	r2, r1, #31
 80004be:	004b      	lsls	r3, r1, #1
 80004c0:	0004      	movs	r4, r0
 80004c2:	4680      	mov	r8, r0
 80004c4:	0d5b      	lsrs	r3, r3, #21
 80004c6:	9202      	str	r2, [sp, #8]
 80004c8:	d100      	bne.n	80004cc <__aeabi_ddiv+0x28>
 80004ca:	e16a      	b.n	80007a2 <__aeabi_ddiv+0x2fe>
 80004cc:	4ad4      	ldr	r2, [pc, #848]	@ (8000820 <__aeabi_ddiv+0x37c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d100      	bne.n	80004d4 <__aeabi_ddiv+0x30>
 80004d2:	e18c      	b.n	80007ee <__aeabi_ddiv+0x34a>
 80004d4:	4659      	mov	r1, fp
 80004d6:	0f42      	lsrs	r2, r0, #29
 80004d8:	00c9      	lsls	r1, r1, #3
 80004da:	430a      	orrs	r2, r1
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	0409      	lsls	r1, r1, #16
 80004e0:	4311      	orrs	r1, r2
 80004e2:	00c2      	lsls	r2, r0, #3
 80004e4:	4690      	mov	r8, r2
 80004e6:	4acf      	ldr	r2, [pc, #828]	@ (8000824 <__aeabi_ddiv+0x380>)
 80004e8:	4689      	mov	r9, r1
 80004ea:	4692      	mov	sl, r2
 80004ec:	449a      	add	sl, r3
 80004ee:	2300      	movs	r3, #0
 80004f0:	2400      	movs	r4, #0
 80004f2:	9303      	str	r3, [sp, #12]
 80004f4:	9e00      	ldr	r6, [sp, #0]
 80004f6:	9f01      	ldr	r7, [sp, #4]
 80004f8:	033b      	lsls	r3, r7, #12
 80004fa:	0b1b      	lsrs	r3, r3, #12
 80004fc:	469b      	mov	fp, r3
 80004fe:	007b      	lsls	r3, r7, #1
 8000500:	0030      	movs	r0, r6
 8000502:	0d5b      	lsrs	r3, r3, #21
 8000504:	0ffd      	lsrs	r5, r7, #31
 8000506:	2b00      	cmp	r3, #0
 8000508:	d100      	bne.n	800050c <__aeabi_ddiv+0x68>
 800050a:	e128      	b.n	800075e <__aeabi_ddiv+0x2ba>
 800050c:	4ac4      	ldr	r2, [pc, #784]	@ (8000820 <__aeabi_ddiv+0x37c>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d100      	bne.n	8000514 <__aeabi_ddiv+0x70>
 8000512:	e177      	b.n	8000804 <__aeabi_ddiv+0x360>
 8000514:	4659      	mov	r1, fp
 8000516:	0f72      	lsrs	r2, r6, #29
 8000518:	00c9      	lsls	r1, r1, #3
 800051a:	430a      	orrs	r2, r1
 800051c:	2180      	movs	r1, #128	@ 0x80
 800051e:	0409      	lsls	r1, r1, #16
 8000520:	4311      	orrs	r1, r2
 8000522:	468b      	mov	fp, r1
 8000524:	49bf      	ldr	r1, [pc, #764]	@ (8000824 <__aeabi_ddiv+0x380>)
 8000526:	00f2      	lsls	r2, r6, #3
 8000528:	468c      	mov	ip, r1
 800052a:	4651      	mov	r1, sl
 800052c:	4463      	add	r3, ip
 800052e:	1acb      	subs	r3, r1, r3
 8000530:	469a      	mov	sl, r3
 8000532:	2300      	movs	r3, #0
 8000534:	9e02      	ldr	r6, [sp, #8]
 8000536:	406e      	eors	r6, r5
 8000538:	2c0f      	cmp	r4, #15
 800053a:	d827      	bhi.n	800058c <__aeabi_ddiv+0xe8>
 800053c:	49ba      	ldr	r1, [pc, #744]	@ (8000828 <__aeabi_ddiv+0x384>)
 800053e:	00a4      	lsls	r4, r4, #2
 8000540:	5909      	ldr	r1, [r1, r4]
 8000542:	468f      	mov	pc, r1
 8000544:	46cb      	mov	fp, r9
 8000546:	4642      	mov	r2, r8
 8000548:	9e02      	ldr	r6, [sp, #8]
 800054a:	9b03      	ldr	r3, [sp, #12]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d016      	beq.n	800057e <__aeabi_ddiv+0xda>
 8000550:	2b03      	cmp	r3, #3
 8000552:	d100      	bne.n	8000556 <__aeabi_ddiv+0xb2>
 8000554:	e2a6      	b.n	8000aa4 <__aeabi_ddiv+0x600>
 8000556:	2b01      	cmp	r3, #1
 8000558:	d000      	beq.n	800055c <__aeabi_ddiv+0xb8>
 800055a:	e0df      	b.n	800071c <__aeabi_ddiv+0x278>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	2400      	movs	r4, #0
 8000562:	4690      	mov	r8, r2
 8000564:	051b      	lsls	r3, r3, #20
 8000566:	4323      	orrs	r3, r4
 8000568:	07f6      	lsls	r6, r6, #31
 800056a:	4333      	orrs	r3, r6
 800056c:	4640      	mov	r0, r8
 800056e:	0019      	movs	r1, r3
 8000570:	b007      	add	sp, #28
 8000572:	bcf0      	pop	{r4, r5, r6, r7}
 8000574:	46bb      	mov	fp, r7
 8000576:	46b2      	mov	sl, r6
 8000578:	46a9      	mov	r9, r5
 800057a:	46a0      	mov	r8, r4
 800057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057e:	2200      	movs	r2, #0
 8000580:	2400      	movs	r4, #0
 8000582:	4690      	mov	r8, r2
 8000584:	4ba6      	ldr	r3, [pc, #664]	@ (8000820 <__aeabi_ddiv+0x37c>)
 8000586:	e7ed      	b.n	8000564 <__aeabi_ddiv+0xc0>
 8000588:	002e      	movs	r6, r5
 800058a:	e7df      	b.n	800054c <__aeabi_ddiv+0xa8>
 800058c:	45cb      	cmp	fp, r9
 800058e:	d200      	bcs.n	8000592 <__aeabi_ddiv+0xee>
 8000590:	e1d4      	b.n	800093c <__aeabi_ddiv+0x498>
 8000592:	d100      	bne.n	8000596 <__aeabi_ddiv+0xf2>
 8000594:	e1cf      	b.n	8000936 <__aeabi_ddiv+0x492>
 8000596:	2301      	movs	r3, #1
 8000598:	425b      	negs	r3, r3
 800059a:	469c      	mov	ip, r3
 800059c:	4644      	mov	r4, r8
 800059e:	4648      	mov	r0, r9
 80005a0:	2700      	movs	r7, #0
 80005a2:	44e2      	add	sl, ip
 80005a4:	465b      	mov	r3, fp
 80005a6:	0e15      	lsrs	r5, r2, #24
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	431d      	orrs	r5, r3
 80005ac:	0c19      	lsrs	r1, r3, #16
 80005ae:	042b      	lsls	r3, r5, #16
 80005b0:	0212      	lsls	r2, r2, #8
 80005b2:	9500      	str	r5, [sp, #0]
 80005b4:	0c1d      	lsrs	r5, r3, #16
 80005b6:	4691      	mov	r9, r2
 80005b8:	9102      	str	r1, [sp, #8]
 80005ba:	9503      	str	r5, [sp, #12]
 80005bc:	f7ff fe34 	bl	8000228 <__aeabi_uidivmod>
 80005c0:	0002      	movs	r2, r0
 80005c2:	436a      	muls	r2, r5
 80005c4:	040b      	lsls	r3, r1, #16
 80005c6:	0c21      	lsrs	r1, r4, #16
 80005c8:	4680      	mov	r8, r0
 80005ca:	4319      	orrs	r1, r3
 80005cc:	428a      	cmp	r2, r1
 80005ce:	d909      	bls.n	80005e4 <__aeabi_ddiv+0x140>
 80005d0:	9d00      	ldr	r5, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	46ac      	mov	ip, r5
 80005d6:	425b      	negs	r3, r3
 80005d8:	4461      	add	r1, ip
 80005da:	469c      	mov	ip, r3
 80005dc:	44e0      	add	r8, ip
 80005de:	428d      	cmp	r5, r1
 80005e0:	d800      	bhi.n	80005e4 <__aeabi_ddiv+0x140>
 80005e2:	e1fb      	b.n	80009dc <__aeabi_ddiv+0x538>
 80005e4:	1a88      	subs	r0, r1, r2
 80005e6:	9902      	ldr	r1, [sp, #8]
 80005e8:	f7ff fe1e 	bl	8000228 <__aeabi_uidivmod>
 80005ec:	9a03      	ldr	r2, [sp, #12]
 80005ee:	0424      	lsls	r4, r4, #16
 80005f0:	4342      	muls	r2, r0
 80005f2:	0409      	lsls	r1, r1, #16
 80005f4:	0c24      	lsrs	r4, r4, #16
 80005f6:	0003      	movs	r3, r0
 80005f8:	430c      	orrs	r4, r1
 80005fa:	42a2      	cmp	r2, r4
 80005fc:	d906      	bls.n	800060c <__aeabi_ddiv+0x168>
 80005fe:	9900      	ldr	r1, [sp, #0]
 8000600:	3b01      	subs	r3, #1
 8000602:	468c      	mov	ip, r1
 8000604:	4464      	add	r4, ip
 8000606:	42a1      	cmp	r1, r4
 8000608:	d800      	bhi.n	800060c <__aeabi_ddiv+0x168>
 800060a:	e1e1      	b.n	80009d0 <__aeabi_ddiv+0x52c>
 800060c:	1aa0      	subs	r0, r4, r2
 800060e:	4642      	mov	r2, r8
 8000610:	0412      	lsls	r2, r2, #16
 8000612:	431a      	orrs	r2, r3
 8000614:	4693      	mov	fp, r2
 8000616:	464b      	mov	r3, r9
 8000618:	4659      	mov	r1, fp
 800061a:	0c1b      	lsrs	r3, r3, #16
 800061c:	001d      	movs	r5, r3
 800061e:	9304      	str	r3, [sp, #16]
 8000620:	040b      	lsls	r3, r1, #16
 8000622:	4649      	mov	r1, r9
 8000624:	0409      	lsls	r1, r1, #16
 8000626:	0c09      	lsrs	r1, r1, #16
 8000628:	000c      	movs	r4, r1
 800062a:	0c1b      	lsrs	r3, r3, #16
 800062c:	435c      	muls	r4, r3
 800062e:	0c12      	lsrs	r2, r2, #16
 8000630:	436b      	muls	r3, r5
 8000632:	4688      	mov	r8, r1
 8000634:	4351      	muls	r1, r2
 8000636:	436a      	muls	r2, r5
 8000638:	0c25      	lsrs	r5, r4, #16
 800063a:	46ac      	mov	ip, r5
 800063c:	185b      	adds	r3, r3, r1
 800063e:	4463      	add	r3, ip
 8000640:	4299      	cmp	r1, r3
 8000642:	d903      	bls.n	800064c <__aeabi_ddiv+0x1a8>
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0249      	lsls	r1, r1, #9
 8000648:	468c      	mov	ip, r1
 800064a:	4462      	add	r2, ip
 800064c:	0c19      	lsrs	r1, r3, #16
 800064e:	0424      	lsls	r4, r4, #16
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c24      	lsrs	r4, r4, #16
 8000654:	188a      	adds	r2, r1, r2
 8000656:	191c      	adds	r4, r3, r4
 8000658:	4290      	cmp	r0, r2
 800065a:	d302      	bcc.n	8000662 <__aeabi_ddiv+0x1be>
 800065c:	d116      	bne.n	800068c <__aeabi_ddiv+0x1e8>
 800065e:	42a7      	cmp	r7, r4
 8000660:	d214      	bcs.n	800068c <__aeabi_ddiv+0x1e8>
 8000662:	465b      	mov	r3, fp
 8000664:	9d00      	ldr	r5, [sp, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	444f      	add	r7, r9
 800066a:	9305      	str	r3, [sp, #20]
 800066c:	454f      	cmp	r7, r9
 800066e:	419b      	sbcs	r3, r3
 8000670:	46ac      	mov	ip, r5
 8000672:	425b      	negs	r3, r3
 8000674:	4463      	add	r3, ip
 8000676:	18c0      	adds	r0, r0, r3
 8000678:	4285      	cmp	r5, r0
 800067a:	d300      	bcc.n	800067e <__aeabi_ddiv+0x1da>
 800067c:	e1a1      	b.n	80009c2 <__aeabi_ddiv+0x51e>
 800067e:	4282      	cmp	r2, r0
 8000680:	d900      	bls.n	8000684 <__aeabi_ddiv+0x1e0>
 8000682:	e1f6      	b.n	8000a72 <__aeabi_ddiv+0x5ce>
 8000684:	d100      	bne.n	8000688 <__aeabi_ddiv+0x1e4>
 8000686:	e1f1      	b.n	8000a6c <__aeabi_ddiv+0x5c8>
 8000688:	9b05      	ldr	r3, [sp, #20]
 800068a:	469b      	mov	fp, r3
 800068c:	1b3c      	subs	r4, r7, r4
 800068e:	42a7      	cmp	r7, r4
 8000690:	41bf      	sbcs	r7, r7
 8000692:	9d00      	ldr	r5, [sp, #0]
 8000694:	1a80      	subs	r0, r0, r2
 8000696:	427f      	negs	r7, r7
 8000698:	1bc0      	subs	r0, r0, r7
 800069a:	4285      	cmp	r5, r0
 800069c:	d100      	bne.n	80006a0 <__aeabi_ddiv+0x1fc>
 800069e:	e1d0      	b.n	8000a42 <__aeabi_ddiv+0x59e>
 80006a0:	9902      	ldr	r1, [sp, #8]
 80006a2:	f7ff fdc1 	bl	8000228 <__aeabi_uidivmod>
 80006a6:	9a03      	ldr	r2, [sp, #12]
 80006a8:	040b      	lsls	r3, r1, #16
 80006aa:	4342      	muls	r2, r0
 80006ac:	0c21      	lsrs	r1, r4, #16
 80006ae:	0007      	movs	r7, r0
 80006b0:	4319      	orrs	r1, r3
 80006b2:	428a      	cmp	r2, r1
 80006b4:	d900      	bls.n	80006b8 <__aeabi_ddiv+0x214>
 80006b6:	e178      	b.n	80009aa <__aeabi_ddiv+0x506>
 80006b8:	1a88      	subs	r0, r1, r2
 80006ba:	9902      	ldr	r1, [sp, #8]
 80006bc:	f7ff fdb4 	bl	8000228 <__aeabi_uidivmod>
 80006c0:	9a03      	ldr	r2, [sp, #12]
 80006c2:	0424      	lsls	r4, r4, #16
 80006c4:	4342      	muls	r2, r0
 80006c6:	0409      	lsls	r1, r1, #16
 80006c8:	0c24      	lsrs	r4, r4, #16
 80006ca:	0003      	movs	r3, r0
 80006cc:	430c      	orrs	r4, r1
 80006ce:	42a2      	cmp	r2, r4
 80006d0:	d900      	bls.n	80006d4 <__aeabi_ddiv+0x230>
 80006d2:	e15d      	b.n	8000990 <__aeabi_ddiv+0x4ec>
 80006d4:	4641      	mov	r1, r8
 80006d6:	1aa4      	subs	r4, r4, r2
 80006d8:	043a      	lsls	r2, r7, #16
 80006da:	431a      	orrs	r2, r3
 80006dc:	9d04      	ldr	r5, [sp, #16]
 80006de:	0413      	lsls	r3, r2, #16
 80006e0:	0c1b      	lsrs	r3, r3, #16
 80006e2:	4359      	muls	r1, r3
 80006e4:	4647      	mov	r7, r8
 80006e6:	436b      	muls	r3, r5
 80006e8:	469c      	mov	ip, r3
 80006ea:	0c10      	lsrs	r0, r2, #16
 80006ec:	4347      	muls	r7, r0
 80006ee:	0c0b      	lsrs	r3, r1, #16
 80006f0:	44bc      	add	ip, r7
 80006f2:	4463      	add	r3, ip
 80006f4:	4368      	muls	r0, r5
 80006f6:	429f      	cmp	r7, r3
 80006f8:	d903      	bls.n	8000702 <__aeabi_ddiv+0x25e>
 80006fa:	2580      	movs	r5, #128	@ 0x80
 80006fc:	026d      	lsls	r5, r5, #9
 80006fe:	46ac      	mov	ip, r5
 8000700:	4460      	add	r0, ip
 8000702:	0c1f      	lsrs	r7, r3, #16
 8000704:	0409      	lsls	r1, r1, #16
 8000706:	041b      	lsls	r3, r3, #16
 8000708:	0c09      	lsrs	r1, r1, #16
 800070a:	183f      	adds	r7, r7, r0
 800070c:	185b      	adds	r3, r3, r1
 800070e:	42bc      	cmp	r4, r7
 8000710:	d200      	bcs.n	8000714 <__aeabi_ddiv+0x270>
 8000712:	e102      	b.n	800091a <__aeabi_ddiv+0x476>
 8000714:	d100      	bne.n	8000718 <__aeabi_ddiv+0x274>
 8000716:	e0fd      	b.n	8000914 <__aeabi_ddiv+0x470>
 8000718:	2301      	movs	r3, #1
 800071a:	431a      	orrs	r2, r3
 800071c:	4b43      	ldr	r3, [pc, #268]	@ (800082c <__aeabi_ddiv+0x388>)
 800071e:	4453      	add	r3, sl
 8000720:	2b00      	cmp	r3, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_ddiv+0x282>
 8000724:	e0ae      	b.n	8000884 <__aeabi_ddiv+0x3e0>
 8000726:	0751      	lsls	r1, r2, #29
 8000728:	d000      	beq.n	800072c <__aeabi_ddiv+0x288>
 800072a:	e198      	b.n	8000a5e <__aeabi_ddiv+0x5ba>
 800072c:	4659      	mov	r1, fp
 800072e:	01c9      	lsls	r1, r1, #7
 8000730:	d506      	bpl.n	8000740 <__aeabi_ddiv+0x29c>
 8000732:	4659      	mov	r1, fp
 8000734:	4b3e      	ldr	r3, [pc, #248]	@ (8000830 <__aeabi_ddiv+0x38c>)
 8000736:	4019      	ands	r1, r3
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	468b      	mov	fp, r1
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4453      	add	r3, sl
 8000740:	493c      	ldr	r1, [pc, #240]	@ (8000834 <__aeabi_ddiv+0x390>)
 8000742:	428b      	cmp	r3, r1
 8000744:	dd00      	ble.n	8000748 <__aeabi_ddiv+0x2a4>
 8000746:	e71a      	b.n	800057e <__aeabi_ddiv+0xda>
 8000748:	4659      	mov	r1, fp
 800074a:	08d2      	lsrs	r2, r2, #3
 800074c:	0749      	lsls	r1, r1, #29
 800074e:	4311      	orrs	r1, r2
 8000750:	465a      	mov	r2, fp
 8000752:	055b      	lsls	r3, r3, #21
 8000754:	0254      	lsls	r4, r2, #9
 8000756:	4688      	mov	r8, r1
 8000758:	0b24      	lsrs	r4, r4, #12
 800075a:	0d5b      	lsrs	r3, r3, #21
 800075c:	e702      	b.n	8000564 <__aeabi_ddiv+0xc0>
 800075e:	465a      	mov	r2, fp
 8000760:	9b00      	ldr	r3, [sp, #0]
 8000762:	431a      	orrs	r2, r3
 8000764:	d100      	bne.n	8000768 <__aeabi_ddiv+0x2c4>
 8000766:	e07e      	b.n	8000866 <__aeabi_ddiv+0x3c2>
 8000768:	465b      	mov	r3, fp
 800076a:	2b00      	cmp	r3, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_ddiv+0x2cc>
 800076e:	e100      	b.n	8000972 <__aeabi_ddiv+0x4ce>
 8000770:	4658      	mov	r0, fp
 8000772:	f001 f8b3 	bl	80018dc <__clzsi2>
 8000776:	0002      	movs	r2, r0
 8000778:	0003      	movs	r3, r0
 800077a:	3a0b      	subs	r2, #11
 800077c:	271d      	movs	r7, #29
 800077e:	9e00      	ldr	r6, [sp, #0]
 8000780:	1aba      	subs	r2, r7, r2
 8000782:	0019      	movs	r1, r3
 8000784:	4658      	mov	r0, fp
 8000786:	40d6      	lsrs	r6, r2
 8000788:	3908      	subs	r1, #8
 800078a:	4088      	lsls	r0, r1
 800078c:	0032      	movs	r2, r6
 800078e:	4302      	orrs	r2, r0
 8000790:	4693      	mov	fp, r2
 8000792:	9a00      	ldr	r2, [sp, #0]
 8000794:	408a      	lsls	r2, r1
 8000796:	4928      	ldr	r1, [pc, #160]	@ (8000838 <__aeabi_ddiv+0x394>)
 8000798:	4453      	add	r3, sl
 800079a:	468a      	mov	sl, r1
 800079c:	449a      	add	sl, r3
 800079e:	2300      	movs	r3, #0
 80007a0:	e6c8      	b.n	8000534 <__aeabi_ddiv+0x90>
 80007a2:	465b      	mov	r3, fp
 80007a4:	4303      	orrs	r3, r0
 80007a6:	4699      	mov	r9, r3
 80007a8:	d056      	beq.n	8000858 <__aeabi_ddiv+0x3b4>
 80007aa:	465b      	mov	r3, fp
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d100      	bne.n	80007b2 <__aeabi_ddiv+0x30e>
 80007b0:	e0cd      	b.n	800094e <__aeabi_ddiv+0x4aa>
 80007b2:	4658      	mov	r0, fp
 80007b4:	f001 f892 	bl	80018dc <__clzsi2>
 80007b8:	230b      	movs	r3, #11
 80007ba:	425b      	negs	r3, r3
 80007bc:	469c      	mov	ip, r3
 80007be:	0002      	movs	r2, r0
 80007c0:	4484      	add	ip, r0
 80007c2:	4666      	mov	r6, ip
 80007c4:	231d      	movs	r3, #29
 80007c6:	1b9b      	subs	r3, r3, r6
 80007c8:	0026      	movs	r6, r4
 80007ca:	0011      	movs	r1, r2
 80007cc:	4658      	mov	r0, fp
 80007ce:	40de      	lsrs	r6, r3
 80007d0:	3908      	subs	r1, #8
 80007d2:	4088      	lsls	r0, r1
 80007d4:	0033      	movs	r3, r6
 80007d6:	4303      	orrs	r3, r0
 80007d8:	4699      	mov	r9, r3
 80007da:	0023      	movs	r3, r4
 80007dc:	408b      	lsls	r3, r1
 80007de:	4698      	mov	r8, r3
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <__aeabi_ddiv+0x398>)
 80007e2:	2400      	movs	r4, #0
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	469a      	mov	sl, r3
 80007e8:	2300      	movs	r3, #0
 80007ea:	9303      	str	r3, [sp, #12]
 80007ec:	e682      	b.n	80004f4 <__aeabi_ddiv+0x50>
 80007ee:	465a      	mov	r2, fp
 80007f0:	4302      	orrs	r2, r0
 80007f2:	4691      	mov	r9, r2
 80007f4:	d12a      	bne.n	800084c <__aeabi_ddiv+0x3a8>
 80007f6:	2200      	movs	r2, #0
 80007f8:	469a      	mov	sl, r3
 80007fa:	2302      	movs	r3, #2
 80007fc:	4690      	mov	r8, r2
 80007fe:	2408      	movs	r4, #8
 8000800:	9303      	str	r3, [sp, #12]
 8000802:	e677      	b.n	80004f4 <__aeabi_ddiv+0x50>
 8000804:	465a      	mov	r2, fp
 8000806:	9b00      	ldr	r3, [sp, #0]
 8000808:	431a      	orrs	r2, r3
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <__aeabi_ddiv+0x39c>)
 800080c:	469c      	mov	ip, r3
 800080e:	44e2      	add	sl, ip
 8000810:	2a00      	cmp	r2, #0
 8000812:	d117      	bne.n	8000844 <__aeabi_ddiv+0x3a0>
 8000814:	2302      	movs	r3, #2
 8000816:	431c      	orrs	r4, r3
 8000818:	2300      	movs	r3, #0
 800081a:	469b      	mov	fp, r3
 800081c:	3302      	adds	r3, #2
 800081e:	e689      	b.n	8000534 <__aeabi_ddiv+0x90>
 8000820:	000007ff 	.word	0x000007ff
 8000824:	fffffc01 	.word	0xfffffc01
 8000828:	08005064 	.word	0x08005064
 800082c:	000003ff 	.word	0x000003ff
 8000830:	feffffff 	.word	0xfeffffff
 8000834:	000007fe 	.word	0x000007fe
 8000838:	000003f3 	.word	0x000003f3
 800083c:	fffffc0d 	.word	0xfffffc0d
 8000840:	fffff801 	.word	0xfffff801
 8000844:	2303      	movs	r3, #3
 8000846:	0032      	movs	r2, r6
 8000848:	431c      	orrs	r4, r3
 800084a:	e673      	b.n	8000534 <__aeabi_ddiv+0x90>
 800084c:	469a      	mov	sl, r3
 800084e:	2303      	movs	r3, #3
 8000850:	46d9      	mov	r9, fp
 8000852:	240c      	movs	r4, #12
 8000854:	9303      	str	r3, [sp, #12]
 8000856:	e64d      	b.n	80004f4 <__aeabi_ddiv+0x50>
 8000858:	2300      	movs	r3, #0
 800085a:	4698      	mov	r8, r3
 800085c:	469a      	mov	sl, r3
 800085e:	3301      	adds	r3, #1
 8000860:	2404      	movs	r4, #4
 8000862:	9303      	str	r3, [sp, #12]
 8000864:	e646      	b.n	80004f4 <__aeabi_ddiv+0x50>
 8000866:	2301      	movs	r3, #1
 8000868:	431c      	orrs	r4, r3
 800086a:	2300      	movs	r3, #0
 800086c:	469b      	mov	fp, r3
 800086e:	3301      	adds	r3, #1
 8000870:	e660      	b.n	8000534 <__aeabi_ddiv+0x90>
 8000872:	2300      	movs	r3, #0
 8000874:	2480      	movs	r4, #128	@ 0x80
 8000876:	4698      	mov	r8, r3
 8000878:	2600      	movs	r6, #0
 800087a:	4b92      	ldr	r3, [pc, #584]	@ (8000ac4 <__aeabi_ddiv+0x620>)
 800087c:	0324      	lsls	r4, r4, #12
 800087e:	e671      	b.n	8000564 <__aeabi_ddiv+0xc0>
 8000880:	2201      	movs	r2, #1
 8000882:	4252      	negs	r2, r2
 8000884:	2101      	movs	r1, #1
 8000886:	1ac9      	subs	r1, r1, r3
 8000888:	2938      	cmp	r1, #56	@ 0x38
 800088a:	dd00      	ble.n	800088e <__aeabi_ddiv+0x3ea>
 800088c:	e666      	b.n	800055c <__aeabi_ddiv+0xb8>
 800088e:	291f      	cmp	r1, #31
 8000890:	dc00      	bgt.n	8000894 <__aeabi_ddiv+0x3f0>
 8000892:	e0ab      	b.n	80009ec <__aeabi_ddiv+0x548>
 8000894:	201f      	movs	r0, #31
 8000896:	4240      	negs	r0, r0
 8000898:	1ac3      	subs	r3, r0, r3
 800089a:	4658      	mov	r0, fp
 800089c:	40d8      	lsrs	r0, r3
 800089e:	0003      	movs	r3, r0
 80008a0:	2920      	cmp	r1, #32
 80008a2:	d004      	beq.n	80008ae <__aeabi_ddiv+0x40a>
 80008a4:	4658      	mov	r0, fp
 80008a6:	4988      	ldr	r1, [pc, #544]	@ (8000ac8 <__aeabi_ddiv+0x624>)
 80008a8:	4451      	add	r1, sl
 80008aa:	4088      	lsls	r0, r1
 80008ac:	4302      	orrs	r2, r0
 80008ae:	1e51      	subs	r1, r2, #1
 80008b0:	418a      	sbcs	r2, r1
 80008b2:	431a      	orrs	r2, r3
 80008b4:	2307      	movs	r3, #7
 80008b6:	0019      	movs	r1, r3
 80008b8:	2400      	movs	r4, #0
 80008ba:	4011      	ands	r1, r2
 80008bc:	4213      	tst	r3, r2
 80008be:	d00c      	beq.n	80008da <__aeabi_ddiv+0x436>
 80008c0:	230f      	movs	r3, #15
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d100      	bne.n	80008ca <__aeabi_ddiv+0x426>
 80008c8:	e0f9      	b.n	8000abe <__aeabi_ddiv+0x61a>
 80008ca:	1d11      	adds	r1, r2, #4
 80008cc:	4291      	cmp	r1, r2
 80008ce:	419b      	sbcs	r3, r3
 80008d0:	000a      	movs	r2, r1
 80008d2:	425b      	negs	r3, r3
 80008d4:	0759      	lsls	r1, r3, #29
 80008d6:	025b      	lsls	r3, r3, #9
 80008d8:	0b1c      	lsrs	r4, r3, #12
 80008da:	08d2      	lsrs	r2, r2, #3
 80008dc:	430a      	orrs	r2, r1
 80008de:	4690      	mov	r8, r2
 80008e0:	2300      	movs	r3, #0
 80008e2:	e63f      	b.n	8000564 <__aeabi_ddiv+0xc0>
 80008e4:	2480      	movs	r4, #128	@ 0x80
 80008e6:	464b      	mov	r3, r9
 80008e8:	0324      	lsls	r4, r4, #12
 80008ea:	4223      	tst	r3, r4
 80008ec:	d009      	beq.n	8000902 <__aeabi_ddiv+0x45e>
 80008ee:	465b      	mov	r3, fp
 80008f0:	4223      	tst	r3, r4
 80008f2:	d106      	bne.n	8000902 <__aeabi_ddiv+0x45e>
 80008f4:	431c      	orrs	r4, r3
 80008f6:	0324      	lsls	r4, r4, #12
 80008f8:	002e      	movs	r6, r5
 80008fa:	4690      	mov	r8, r2
 80008fc:	4b71      	ldr	r3, [pc, #452]	@ (8000ac4 <__aeabi_ddiv+0x620>)
 80008fe:	0b24      	lsrs	r4, r4, #12
 8000900:	e630      	b.n	8000564 <__aeabi_ddiv+0xc0>
 8000902:	2480      	movs	r4, #128	@ 0x80
 8000904:	464b      	mov	r3, r9
 8000906:	0324      	lsls	r4, r4, #12
 8000908:	431c      	orrs	r4, r3
 800090a:	0324      	lsls	r4, r4, #12
 800090c:	9e02      	ldr	r6, [sp, #8]
 800090e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ac4 <__aeabi_ddiv+0x620>)
 8000910:	0b24      	lsrs	r4, r4, #12
 8000912:	e627      	b.n	8000564 <__aeabi_ddiv+0xc0>
 8000914:	2b00      	cmp	r3, #0
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x476>
 8000918:	e700      	b.n	800071c <__aeabi_ddiv+0x278>
 800091a:	9800      	ldr	r0, [sp, #0]
 800091c:	1e51      	subs	r1, r2, #1
 800091e:	4684      	mov	ip, r0
 8000920:	4464      	add	r4, ip
 8000922:	4284      	cmp	r4, r0
 8000924:	d200      	bcs.n	8000928 <__aeabi_ddiv+0x484>
 8000926:	e084      	b.n	8000a32 <__aeabi_ddiv+0x58e>
 8000928:	42bc      	cmp	r4, r7
 800092a:	d200      	bcs.n	800092e <__aeabi_ddiv+0x48a>
 800092c:	e0ae      	b.n	8000a8c <__aeabi_ddiv+0x5e8>
 800092e:	d100      	bne.n	8000932 <__aeabi_ddiv+0x48e>
 8000930:	e0c1      	b.n	8000ab6 <__aeabi_ddiv+0x612>
 8000932:	000a      	movs	r2, r1
 8000934:	e6f0      	b.n	8000718 <__aeabi_ddiv+0x274>
 8000936:	4542      	cmp	r2, r8
 8000938:	d900      	bls.n	800093c <__aeabi_ddiv+0x498>
 800093a:	e62c      	b.n	8000596 <__aeabi_ddiv+0xf2>
 800093c:	464b      	mov	r3, r9
 800093e:	07dc      	lsls	r4, r3, #31
 8000940:	0858      	lsrs	r0, r3, #1
 8000942:	4643      	mov	r3, r8
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	431c      	orrs	r4, r3
 8000948:	4643      	mov	r3, r8
 800094a:	07df      	lsls	r7, r3, #31
 800094c:	e62a      	b.n	80005a4 <__aeabi_ddiv+0x100>
 800094e:	f000 ffc5 	bl	80018dc <__clzsi2>
 8000952:	2315      	movs	r3, #21
 8000954:	469c      	mov	ip, r3
 8000956:	4484      	add	ip, r0
 8000958:	0002      	movs	r2, r0
 800095a:	4663      	mov	r3, ip
 800095c:	3220      	adds	r2, #32
 800095e:	2b1c      	cmp	r3, #28
 8000960:	dc00      	bgt.n	8000964 <__aeabi_ddiv+0x4c0>
 8000962:	e72e      	b.n	80007c2 <__aeabi_ddiv+0x31e>
 8000964:	0023      	movs	r3, r4
 8000966:	3808      	subs	r0, #8
 8000968:	4083      	lsls	r3, r0
 800096a:	4699      	mov	r9, r3
 800096c:	2300      	movs	r3, #0
 800096e:	4698      	mov	r8, r3
 8000970:	e736      	b.n	80007e0 <__aeabi_ddiv+0x33c>
 8000972:	f000 ffb3 	bl	80018dc <__clzsi2>
 8000976:	0002      	movs	r2, r0
 8000978:	0003      	movs	r3, r0
 800097a:	3215      	adds	r2, #21
 800097c:	3320      	adds	r3, #32
 800097e:	2a1c      	cmp	r2, #28
 8000980:	dc00      	bgt.n	8000984 <__aeabi_ddiv+0x4e0>
 8000982:	e6fb      	b.n	800077c <__aeabi_ddiv+0x2d8>
 8000984:	9900      	ldr	r1, [sp, #0]
 8000986:	3808      	subs	r0, #8
 8000988:	4081      	lsls	r1, r0
 800098a:	2200      	movs	r2, #0
 800098c:	468b      	mov	fp, r1
 800098e:	e702      	b.n	8000796 <__aeabi_ddiv+0x2f2>
 8000990:	9900      	ldr	r1, [sp, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	468c      	mov	ip, r1
 8000996:	4464      	add	r4, ip
 8000998:	42a1      	cmp	r1, r4
 800099a:	d900      	bls.n	800099e <__aeabi_ddiv+0x4fa>
 800099c:	e69a      	b.n	80006d4 <__aeabi_ddiv+0x230>
 800099e:	42a2      	cmp	r2, r4
 80009a0:	d800      	bhi.n	80009a4 <__aeabi_ddiv+0x500>
 80009a2:	e697      	b.n	80006d4 <__aeabi_ddiv+0x230>
 80009a4:	1e83      	subs	r3, r0, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	e694      	b.n	80006d4 <__aeabi_ddiv+0x230>
 80009aa:	46ac      	mov	ip, r5
 80009ac:	4461      	add	r1, ip
 80009ae:	3f01      	subs	r7, #1
 80009b0:	428d      	cmp	r5, r1
 80009b2:	d900      	bls.n	80009b6 <__aeabi_ddiv+0x512>
 80009b4:	e680      	b.n	80006b8 <__aeabi_ddiv+0x214>
 80009b6:	428a      	cmp	r2, r1
 80009b8:	d800      	bhi.n	80009bc <__aeabi_ddiv+0x518>
 80009ba:	e67d      	b.n	80006b8 <__aeabi_ddiv+0x214>
 80009bc:	1e87      	subs	r7, r0, #2
 80009be:	4461      	add	r1, ip
 80009c0:	e67a      	b.n	80006b8 <__aeabi_ddiv+0x214>
 80009c2:	4285      	cmp	r5, r0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_ddiv+0x524>
 80009c6:	e65f      	b.n	8000688 <__aeabi_ddiv+0x1e4>
 80009c8:	45b9      	cmp	r9, r7
 80009ca:	d900      	bls.n	80009ce <__aeabi_ddiv+0x52a>
 80009cc:	e65c      	b.n	8000688 <__aeabi_ddiv+0x1e4>
 80009ce:	e656      	b.n	800067e <__aeabi_ddiv+0x1da>
 80009d0:	42a2      	cmp	r2, r4
 80009d2:	d800      	bhi.n	80009d6 <__aeabi_ddiv+0x532>
 80009d4:	e61a      	b.n	800060c <__aeabi_ddiv+0x168>
 80009d6:	1e83      	subs	r3, r0, #2
 80009d8:	4464      	add	r4, ip
 80009da:	e617      	b.n	800060c <__aeabi_ddiv+0x168>
 80009dc:	428a      	cmp	r2, r1
 80009de:	d800      	bhi.n	80009e2 <__aeabi_ddiv+0x53e>
 80009e0:	e600      	b.n	80005e4 <__aeabi_ddiv+0x140>
 80009e2:	46ac      	mov	ip, r5
 80009e4:	1e83      	subs	r3, r0, #2
 80009e6:	4698      	mov	r8, r3
 80009e8:	4461      	add	r1, ip
 80009ea:	e5fb      	b.n	80005e4 <__aeabi_ddiv+0x140>
 80009ec:	4837      	ldr	r0, [pc, #220]	@ (8000acc <__aeabi_ddiv+0x628>)
 80009ee:	0014      	movs	r4, r2
 80009f0:	4450      	add	r0, sl
 80009f2:	4082      	lsls	r2, r0
 80009f4:	465b      	mov	r3, fp
 80009f6:	0017      	movs	r7, r2
 80009f8:	4083      	lsls	r3, r0
 80009fa:	40cc      	lsrs	r4, r1
 80009fc:	1e7a      	subs	r2, r7, #1
 80009fe:	4197      	sbcs	r7, r2
 8000a00:	4323      	orrs	r3, r4
 8000a02:	433b      	orrs	r3, r7
 8000a04:	001a      	movs	r2, r3
 8000a06:	465b      	mov	r3, fp
 8000a08:	40cb      	lsrs	r3, r1
 8000a0a:	0751      	lsls	r1, r2, #29
 8000a0c:	d009      	beq.n	8000a22 <__aeabi_ddiv+0x57e>
 8000a0e:	210f      	movs	r1, #15
 8000a10:	4011      	ands	r1, r2
 8000a12:	2904      	cmp	r1, #4
 8000a14:	d005      	beq.n	8000a22 <__aeabi_ddiv+0x57e>
 8000a16:	1d11      	adds	r1, r2, #4
 8000a18:	4291      	cmp	r1, r2
 8000a1a:	4192      	sbcs	r2, r2
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	189b      	adds	r3, r3, r2
 8000a20:	000a      	movs	r2, r1
 8000a22:	0219      	lsls	r1, r3, #8
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_ddiv+0x584>
 8000a26:	e755      	b.n	80008d4 <__aeabi_ddiv+0x430>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	4690      	mov	r8, r2
 8000a30:	e598      	b.n	8000564 <__aeabi_ddiv+0xc0>
 8000a32:	000a      	movs	r2, r1
 8000a34:	42bc      	cmp	r4, r7
 8000a36:	d000      	beq.n	8000a3a <__aeabi_ddiv+0x596>
 8000a38:	e66e      	b.n	8000718 <__aeabi_ddiv+0x274>
 8000a3a:	454b      	cmp	r3, r9
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_ddiv+0x59c>
 8000a3e:	e66b      	b.n	8000718 <__aeabi_ddiv+0x274>
 8000a40:	e66c      	b.n	800071c <__aeabi_ddiv+0x278>
 8000a42:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <__aeabi_ddiv+0x62c>)
 8000a44:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <__aeabi_ddiv+0x630>)
 8000a46:	4453      	add	r3, sl
 8000a48:	4592      	cmp	sl, r2
 8000a4a:	da00      	bge.n	8000a4e <__aeabi_ddiv+0x5aa>
 8000a4c:	e718      	b.n	8000880 <__aeabi_ddiv+0x3dc>
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4249      	negs	r1, r1
 8000a52:	1d0a      	adds	r2, r1, #4
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4189      	sbcs	r1, r1
 8000a58:	4249      	negs	r1, r1
 8000a5a:	448b      	add	fp, r1
 8000a5c:	e666      	b.n	800072c <__aeabi_ddiv+0x288>
 8000a5e:	210f      	movs	r1, #15
 8000a60:	4011      	ands	r1, r2
 8000a62:	2904      	cmp	r1, #4
 8000a64:	d100      	bne.n	8000a68 <__aeabi_ddiv+0x5c4>
 8000a66:	e661      	b.n	800072c <__aeabi_ddiv+0x288>
 8000a68:	0011      	movs	r1, r2
 8000a6a:	e7f2      	b.n	8000a52 <__aeabi_ddiv+0x5ae>
 8000a6c:	42bc      	cmp	r4, r7
 8000a6e:	d800      	bhi.n	8000a72 <__aeabi_ddiv+0x5ce>
 8000a70:	e60a      	b.n	8000688 <__aeabi_ddiv+0x1e4>
 8000a72:	2302      	movs	r3, #2
 8000a74:	425b      	negs	r3, r3
 8000a76:	469c      	mov	ip, r3
 8000a78:	9900      	ldr	r1, [sp, #0]
 8000a7a:	444f      	add	r7, r9
 8000a7c:	454f      	cmp	r7, r9
 8000a7e:	419b      	sbcs	r3, r3
 8000a80:	44e3      	add	fp, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	425b      	negs	r3, r3
 8000a86:	4463      	add	r3, ip
 8000a88:	18c0      	adds	r0, r0, r3
 8000a8a:	e5ff      	b.n	800068c <__aeabi_ddiv+0x1e8>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	9d00      	ldr	r5, [sp, #0]
 8000a90:	0048      	lsls	r0, r1, #1
 8000a92:	4548      	cmp	r0, r9
 8000a94:	4189      	sbcs	r1, r1
 8000a96:	46ac      	mov	ip, r5
 8000a98:	4249      	negs	r1, r1
 8000a9a:	4461      	add	r1, ip
 8000a9c:	4681      	mov	r9, r0
 8000a9e:	3a02      	subs	r2, #2
 8000aa0:	1864      	adds	r4, r4, r1
 8000aa2:	e7c7      	b.n	8000a34 <__aeabi_ddiv+0x590>
 8000aa4:	2480      	movs	r4, #128	@ 0x80
 8000aa6:	465b      	mov	r3, fp
 8000aa8:	0324      	lsls	r4, r4, #12
 8000aaa:	431c      	orrs	r4, r3
 8000aac:	0324      	lsls	r4, r4, #12
 8000aae:	4690      	mov	r8, r2
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__aeabi_ddiv+0x620>)
 8000ab2:	0b24      	lsrs	r4, r4, #12
 8000ab4:	e556      	b.n	8000564 <__aeabi_ddiv+0xc0>
 8000ab6:	4599      	cmp	r9, r3
 8000ab8:	d3e8      	bcc.n	8000a8c <__aeabi_ddiv+0x5e8>
 8000aba:	000a      	movs	r2, r1
 8000abc:	e7bd      	b.n	8000a3a <__aeabi_ddiv+0x596>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e708      	b.n	80008d4 <__aeabi_ddiv+0x430>
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	0000043e 	.word	0x0000043e
 8000acc:	0000041e 	.word	0x0000041e
 8000ad0:	000003ff 	.word	0x000003ff
 8000ad4:	fffffc02 	.word	0xfffffc02

08000ad8 <__aeabi_dmul>:
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	4657      	mov	r7, sl
 8000adc:	46de      	mov	lr, fp
 8000ade:	464e      	mov	r6, r9
 8000ae0:	4645      	mov	r5, r8
 8000ae2:	b5e0      	push	{r5, r6, r7, lr}
 8000ae4:	001f      	movs	r7, r3
 8000ae6:	030b      	lsls	r3, r1, #12
 8000ae8:	0b1b      	lsrs	r3, r3, #12
 8000aea:	0016      	movs	r6, r2
 8000aec:	469a      	mov	sl, r3
 8000aee:	0fca      	lsrs	r2, r1, #31
 8000af0:	004b      	lsls	r3, r1, #1
 8000af2:	0004      	movs	r4, r0
 8000af4:	4693      	mov	fp, r2
 8000af6:	b087      	sub	sp, #28
 8000af8:	0d5b      	lsrs	r3, r3, #21
 8000afa:	d100      	bne.n	8000afe <__aeabi_dmul+0x26>
 8000afc:	e0d5      	b.n	8000caa <__aeabi_dmul+0x1d2>
 8000afe:	4abb      	ldr	r2, [pc, #748]	@ (8000dec <__aeabi_dmul+0x314>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dmul+0x2e>
 8000b04:	e0f8      	b.n	8000cf8 <__aeabi_dmul+0x220>
 8000b06:	4651      	mov	r1, sl
 8000b08:	0f42      	lsrs	r2, r0, #29
 8000b0a:	00c9      	lsls	r1, r1, #3
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	2180      	movs	r1, #128	@ 0x80
 8000b10:	0409      	lsls	r1, r1, #16
 8000b12:	4311      	orrs	r1, r2
 8000b14:	00c2      	lsls	r2, r0, #3
 8000b16:	4691      	mov	r9, r2
 8000b18:	4ab5      	ldr	r2, [pc, #724]	@ (8000df0 <__aeabi_dmul+0x318>)
 8000b1a:	468a      	mov	sl, r1
 8000b1c:	189d      	adds	r5, r3, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	4698      	mov	r8, r3
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	033c      	lsls	r4, r7, #12
 8000b26:	007b      	lsls	r3, r7, #1
 8000b28:	0ffa      	lsrs	r2, r7, #31
 8000b2a:	0030      	movs	r0, r6
 8000b2c:	0b24      	lsrs	r4, r4, #12
 8000b2e:	0d5b      	lsrs	r3, r3, #21
 8000b30:	9200      	str	r2, [sp, #0]
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dmul+0x5e>
 8000b34:	e096      	b.n	8000c64 <__aeabi_dmul+0x18c>
 8000b36:	4aad      	ldr	r2, [pc, #692]	@ (8000dec <__aeabi_dmul+0x314>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d031      	beq.n	8000ba0 <__aeabi_dmul+0xc8>
 8000b3c:	0f72      	lsrs	r2, r6, #29
 8000b3e:	00e4      	lsls	r4, r4, #3
 8000b40:	4322      	orrs	r2, r4
 8000b42:	2480      	movs	r4, #128	@ 0x80
 8000b44:	0424      	lsls	r4, r4, #16
 8000b46:	4314      	orrs	r4, r2
 8000b48:	4aa9      	ldr	r2, [pc, #676]	@ (8000df0 <__aeabi_dmul+0x318>)
 8000b4a:	00f0      	lsls	r0, r6, #3
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	4463      	add	r3, ip
 8000b50:	195b      	adds	r3, r3, r5
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	4642      	mov	r2, r8
 8000b58:	2600      	movs	r6, #0
 8000b5a:	2a0a      	cmp	r2, #10
 8000b5c:	dc42      	bgt.n	8000be4 <__aeabi_dmul+0x10c>
 8000b5e:	465a      	mov	r2, fp
 8000b60:	9900      	ldr	r1, [sp, #0]
 8000b62:	404a      	eors	r2, r1
 8000b64:	4693      	mov	fp, r2
 8000b66:	4642      	mov	r2, r8
 8000b68:	2a02      	cmp	r2, #2
 8000b6a:	dc32      	bgt.n	8000bd2 <__aeabi_dmul+0xfa>
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	2a01      	cmp	r2, #1
 8000b70:	d900      	bls.n	8000b74 <__aeabi_dmul+0x9c>
 8000b72:	e149      	b.n	8000e08 <__aeabi_dmul+0x330>
 8000b74:	2e02      	cmp	r6, #2
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dmul+0xa2>
 8000b78:	e0ca      	b.n	8000d10 <__aeabi_dmul+0x238>
 8000b7a:	2e01      	cmp	r6, #1
 8000b7c:	d13d      	bne.n	8000bfa <__aeabi_dmul+0x122>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2400      	movs	r4, #0
 8000b82:	2200      	movs	r2, #0
 8000b84:	0010      	movs	r0, r2
 8000b86:	465a      	mov	r2, fp
 8000b88:	051b      	lsls	r3, r3, #20
 8000b8a:	4323      	orrs	r3, r4
 8000b8c:	07d2      	lsls	r2, r2, #31
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	0019      	movs	r1, r3
 8000b92:	b007      	add	sp, #28
 8000b94:	bcf0      	pop	{r4, r5, r6, r7}
 8000b96:	46bb      	mov	fp, r7
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	46a9      	mov	r9, r5
 8000b9c:	46a0      	mov	r8, r4
 8000b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba0:	4b92      	ldr	r3, [pc, #584]	@ (8000dec <__aeabi_dmul+0x314>)
 8000ba2:	4326      	orrs	r6, r4
 8000ba4:	18eb      	adds	r3, r5, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dmul+0xd4>
 8000baa:	e0bb      	b.n	8000d24 <__aeabi_dmul+0x24c>
 8000bac:	2203      	movs	r2, #3
 8000bae:	4641      	mov	r1, r8
 8000bb0:	4311      	orrs	r1, r2
 8000bb2:	465a      	mov	r2, fp
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	9900      	ldr	r1, [sp, #0]
 8000bb8:	404a      	eors	r2, r1
 8000bba:	2180      	movs	r1, #128	@ 0x80
 8000bbc:	0109      	lsls	r1, r1, #4
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	4461      	add	r1, ip
 8000bc4:	9101      	str	r1, [sp, #4]
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	290a      	cmp	r1, #10
 8000bca:	dd00      	ble.n	8000bce <__aeabi_dmul+0xf6>
 8000bcc:	e233      	b.n	8001036 <__aeabi_dmul+0x55e>
 8000bce:	4693      	mov	fp, r2
 8000bd0:	2603      	movs	r6, #3
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	2701      	movs	r7, #1
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	21a6      	movs	r1, #166	@ 0xa6
 8000bda:	003a      	movs	r2, r7
 8000bdc:	00c9      	lsls	r1, r1, #3
 8000bde:	400a      	ands	r2, r1
 8000be0:	420f      	tst	r7, r1
 8000be2:	d031      	beq.n	8000c48 <__aeabi_dmul+0x170>
 8000be4:	9e02      	ldr	r6, [sp, #8]
 8000be6:	2e02      	cmp	r6, #2
 8000be8:	d100      	bne.n	8000bec <__aeabi_dmul+0x114>
 8000bea:	e235      	b.n	8001058 <__aeabi_dmul+0x580>
 8000bec:	2e03      	cmp	r6, #3
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dmul+0x11a>
 8000bf0:	e1d2      	b.n	8000f98 <__aeabi_dmul+0x4c0>
 8000bf2:	4654      	mov	r4, sl
 8000bf4:	4648      	mov	r0, r9
 8000bf6:	2e01      	cmp	r6, #1
 8000bf8:	d0c1      	beq.n	8000b7e <__aeabi_dmul+0xa6>
 8000bfa:	9a01      	ldr	r2, [sp, #4]
 8000bfc:	4b7d      	ldr	r3, [pc, #500]	@ (8000df4 <__aeabi_dmul+0x31c>)
 8000bfe:	4694      	mov	ip, r2
 8000c00:	4463      	add	r3, ip
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dc00      	bgt.n	8000c08 <__aeabi_dmul+0x130>
 8000c06:	e0c0      	b.n	8000d8a <__aeabi_dmul+0x2b2>
 8000c08:	0742      	lsls	r2, r0, #29
 8000c0a:	d009      	beq.n	8000c20 <__aeabi_dmul+0x148>
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	4002      	ands	r2, r0
 8000c10:	2a04      	cmp	r2, #4
 8000c12:	d005      	beq.n	8000c20 <__aeabi_dmul+0x148>
 8000c14:	1d02      	adds	r2, r0, #4
 8000c16:	4282      	cmp	r2, r0
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	1824      	adds	r4, r4, r0
 8000c1e:	0010      	movs	r0, r2
 8000c20:	01e2      	lsls	r2, r4, #7
 8000c22:	d506      	bpl.n	8000c32 <__aeabi_dmul+0x15a>
 8000c24:	4b74      	ldr	r3, [pc, #464]	@ (8000df8 <__aeabi_dmul+0x320>)
 8000c26:	9a01      	ldr	r2, [sp, #4]
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4463      	add	r3, ip
 8000c32:	4a72      	ldr	r2, [pc, #456]	@ (8000dfc <__aeabi_dmul+0x324>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	dc6b      	bgt.n	8000d10 <__aeabi_dmul+0x238>
 8000c38:	0762      	lsls	r2, r4, #29
 8000c3a:	08c0      	lsrs	r0, r0, #3
 8000c3c:	0264      	lsls	r4, r4, #9
 8000c3e:	055b      	lsls	r3, r3, #21
 8000c40:	4302      	orrs	r2, r0
 8000c42:	0b24      	lsrs	r4, r4, #12
 8000c44:	0d5b      	lsrs	r3, r3, #21
 8000c46:	e79d      	b.n	8000b84 <__aeabi_dmul+0xac>
 8000c48:	2190      	movs	r1, #144	@ 0x90
 8000c4a:	0089      	lsls	r1, r1, #2
 8000c4c:	420f      	tst	r7, r1
 8000c4e:	d163      	bne.n	8000d18 <__aeabi_dmul+0x240>
 8000c50:	2288      	movs	r2, #136	@ 0x88
 8000c52:	423a      	tst	r2, r7
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dmul+0x180>
 8000c56:	e0d7      	b.n	8000e08 <__aeabi_dmul+0x330>
 8000c58:	9b00      	ldr	r3, [sp, #0]
 8000c5a:	46a2      	mov	sl, r4
 8000c5c:	469b      	mov	fp, r3
 8000c5e:	4681      	mov	r9, r0
 8000c60:	9602      	str	r6, [sp, #8]
 8000c62:	e7bf      	b.n	8000be4 <__aeabi_dmul+0x10c>
 8000c64:	0023      	movs	r3, r4
 8000c66:	4333      	orrs	r3, r6
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dmul+0x194>
 8000c6a:	e07f      	b.n	8000d6c <__aeabi_dmul+0x294>
 8000c6c:	2c00      	cmp	r4, #0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dmul+0x19a>
 8000c70:	e1ad      	b.n	8000fce <__aeabi_dmul+0x4f6>
 8000c72:	0020      	movs	r0, r4
 8000c74:	f000 fe32 	bl	80018dc <__clzsi2>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	3a0b      	subs	r2, #11
 8000c7e:	201d      	movs	r0, #29
 8000c80:	0019      	movs	r1, r3
 8000c82:	1a82      	subs	r2, r0, r2
 8000c84:	0030      	movs	r0, r6
 8000c86:	3908      	subs	r1, #8
 8000c88:	40d0      	lsrs	r0, r2
 8000c8a:	408c      	lsls	r4, r1
 8000c8c:	4304      	orrs	r4, r0
 8000c8e:	0030      	movs	r0, r6
 8000c90:	4088      	lsls	r0, r1
 8000c92:	4a5b      	ldr	r2, [pc, #364]	@ (8000e00 <__aeabi_dmul+0x328>)
 8000c94:	1aeb      	subs	r3, r5, r3
 8000c96:	4694      	mov	ip, r2
 8000c98:	4463      	add	r3, ip
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	9201      	str	r2, [sp, #4]
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	2a0a      	cmp	r2, #10
 8000ca4:	dc00      	bgt.n	8000ca8 <__aeabi_dmul+0x1d0>
 8000ca6:	e75a      	b.n	8000b5e <__aeabi_dmul+0x86>
 8000ca8:	e79c      	b.n	8000be4 <__aeabi_dmul+0x10c>
 8000caa:	4653      	mov	r3, sl
 8000cac:	4303      	orrs	r3, r0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	d054      	beq.n	8000d5c <__aeabi_dmul+0x284>
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dmul+0x1e2>
 8000cb8:	e177      	b.n	8000faa <__aeabi_dmul+0x4d2>
 8000cba:	4650      	mov	r0, sl
 8000cbc:	f000 fe0e 	bl	80018dc <__clzsi2>
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	469c      	mov	ip, r3
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	4484      	add	ip, r0
 8000cca:	0011      	movs	r1, r2
 8000ccc:	4650      	mov	r0, sl
 8000cce:	3908      	subs	r1, #8
 8000cd0:	4088      	lsls	r0, r1
 8000cd2:	231d      	movs	r3, #29
 8000cd4:	4680      	mov	r8, r0
 8000cd6:	4660      	mov	r0, ip
 8000cd8:	1a1b      	subs	r3, r3, r0
 8000cda:	0020      	movs	r0, r4
 8000cdc:	40d8      	lsrs	r0, r3
 8000cde:	0003      	movs	r3, r0
 8000ce0:	4640      	mov	r0, r8
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	0023      	movs	r3, r4
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	4699      	mov	r9, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	4d44      	ldr	r5, [pc, #272]	@ (8000e00 <__aeabi_dmul+0x328>)
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	1aad      	subs	r5, r5, r2
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	e715      	b.n	8000b24 <__aeabi_dmul+0x4c>
 8000cf8:	4652      	mov	r2, sl
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	4691      	mov	r9, r2
 8000cfe:	d126      	bne.n	8000d4e <__aeabi_dmul+0x276>
 8000d00:	2200      	movs	r2, #0
 8000d02:	001d      	movs	r5, r3
 8000d04:	2302      	movs	r3, #2
 8000d06:	4692      	mov	sl, r2
 8000d08:	3208      	adds	r2, #8
 8000d0a:	4690      	mov	r8, r2
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	e709      	b.n	8000b24 <__aeabi_dmul+0x4c>
 8000d10:	2400      	movs	r4, #0
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <__aeabi_dmul+0x314>)
 8000d16:	e735      	b.n	8000b84 <__aeabi_dmul+0xac>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2480      	movs	r4, #128	@ 0x80
 8000d1c:	469b      	mov	fp, r3
 8000d1e:	0324      	lsls	r4, r4, #12
 8000d20:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <__aeabi_dmul+0x314>)
 8000d22:	e72f      	b.n	8000b84 <__aeabi_dmul+0xac>
 8000d24:	2202      	movs	r2, #2
 8000d26:	4641      	mov	r1, r8
 8000d28:	4311      	orrs	r1, r2
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	4694      	mov	ip, r2
 8000d30:	002a      	movs	r2, r5
 8000d32:	4462      	add	r2, ip
 8000d34:	4688      	mov	r8, r1
 8000d36:	9201      	str	r2, [sp, #4]
 8000d38:	290a      	cmp	r1, #10
 8000d3a:	dd00      	ble.n	8000d3e <__aeabi_dmul+0x266>
 8000d3c:	e752      	b.n	8000be4 <__aeabi_dmul+0x10c>
 8000d3e:	465a      	mov	r2, fp
 8000d40:	2000      	movs	r0, #0
 8000d42:	9900      	ldr	r1, [sp, #0]
 8000d44:	0004      	movs	r4, r0
 8000d46:	404a      	eors	r2, r1
 8000d48:	4693      	mov	fp, r2
 8000d4a:	2602      	movs	r6, #2
 8000d4c:	e70b      	b.n	8000b66 <__aeabi_dmul+0x8e>
 8000d4e:	220c      	movs	r2, #12
 8000d50:	001d      	movs	r5, r3
 8000d52:	2303      	movs	r3, #3
 8000d54:	4681      	mov	r9, r0
 8000d56:	4690      	mov	r8, r2
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	e6e3      	b.n	8000b24 <__aeabi_dmul+0x4c>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	469a      	mov	sl, r3
 8000d60:	3304      	adds	r3, #4
 8000d62:	4698      	mov	r8, r3
 8000d64:	3b03      	subs	r3, #3
 8000d66:	2500      	movs	r5, #0
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	e6db      	b.n	8000b24 <__aeabi_dmul+0x4c>
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	3301      	adds	r3, #1
 8000d70:	431a      	orrs	r2, r3
 8000d72:	002b      	movs	r3, r5
 8000d74:	4690      	mov	r8, r2
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	9201      	str	r2, [sp, #4]
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	2400      	movs	r4, #0
 8000d7e:	2000      	movs	r0, #0
 8000d80:	2601      	movs	r6, #1
 8000d82:	2a0a      	cmp	r2, #10
 8000d84:	dc00      	bgt.n	8000d88 <__aeabi_dmul+0x2b0>
 8000d86:	e6ea      	b.n	8000b5e <__aeabi_dmul+0x86>
 8000d88:	e72c      	b.n	8000be4 <__aeabi_dmul+0x10c>
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	1ad2      	subs	r2, r2, r3
 8000d8e:	2a38      	cmp	r2, #56	@ 0x38
 8000d90:	dd00      	ble.n	8000d94 <__aeabi_dmul+0x2bc>
 8000d92:	e6f4      	b.n	8000b7e <__aeabi_dmul+0xa6>
 8000d94:	2a1f      	cmp	r2, #31
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_dmul+0x2c2>
 8000d98:	e12a      	b.n	8000ff0 <__aeabi_dmul+0x518>
 8000d9a:	211f      	movs	r1, #31
 8000d9c:	4249      	negs	r1, r1
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	0021      	movs	r1, r4
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	000b      	movs	r3, r1
 8000da6:	2a20      	cmp	r2, #32
 8000da8:	d005      	beq.n	8000db6 <__aeabi_dmul+0x2de>
 8000daa:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <__aeabi_dmul+0x32c>)
 8000dac:	9d01      	ldr	r5, [sp, #4]
 8000dae:	4694      	mov	ip, r2
 8000db0:	4465      	add	r5, ip
 8000db2:	40ac      	lsls	r4, r5
 8000db4:	4320      	orrs	r0, r4
 8000db6:	1e42      	subs	r2, r0, #1
 8000db8:	4190      	sbcs	r0, r2
 8000dba:	4318      	orrs	r0, r3
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	4001      	ands	r1, r0
 8000dc4:	4203      	tst	r3, r0
 8000dc6:	d00c      	beq.n	8000de2 <__aeabi_dmul+0x30a>
 8000dc8:	230f      	movs	r3, #15
 8000dca:	4003      	ands	r3, r0
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dmul+0x2fa>
 8000dd0:	e140      	b.n	8001054 <__aeabi_dmul+0x57c>
 8000dd2:	1d03      	adds	r3, r0, #4
 8000dd4:	4283      	cmp	r3, r0
 8000dd6:	41a4      	sbcs	r4, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	4264      	negs	r4, r4
 8000ddc:	0761      	lsls	r1, r4, #29
 8000dde:	0264      	lsls	r4, r4, #9
 8000de0:	0b24      	lsrs	r4, r4, #12
 8000de2:	08c2      	lsrs	r2, r0, #3
 8000de4:	2300      	movs	r3, #0
 8000de6:	430a      	orrs	r2, r1
 8000de8:	e6cc      	b.n	8000b84 <__aeabi_dmul+0xac>
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	000007ff 	.word	0x000007ff
 8000df0:	fffffc01 	.word	0xfffffc01
 8000df4:	000003ff 	.word	0x000003ff
 8000df8:	feffffff 	.word	0xfeffffff
 8000dfc:	000007fe 	.word	0x000007fe
 8000e00:	fffffc0d 	.word	0xfffffc0d
 8000e04:	0000043e 	.word	0x0000043e
 8000e08:	4649      	mov	r1, r9
 8000e0a:	464a      	mov	r2, r9
 8000e0c:	0409      	lsls	r1, r1, #16
 8000e0e:	0c09      	lsrs	r1, r1, #16
 8000e10:	000d      	movs	r5, r1
 8000e12:	0c16      	lsrs	r6, r2, #16
 8000e14:	0c02      	lsrs	r2, r0, #16
 8000e16:	0400      	lsls	r0, r0, #16
 8000e18:	0c00      	lsrs	r0, r0, #16
 8000e1a:	4345      	muls	r5, r0
 8000e1c:	46ac      	mov	ip, r5
 8000e1e:	0005      	movs	r5, r0
 8000e20:	4375      	muls	r5, r6
 8000e22:	46a8      	mov	r8, r5
 8000e24:	0015      	movs	r5, r2
 8000e26:	000f      	movs	r7, r1
 8000e28:	4375      	muls	r5, r6
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	9502      	str	r5, [sp, #8]
 8000e2e:	002a      	movs	r2, r5
 8000e30:	9d00      	ldr	r5, [sp, #0]
 8000e32:	436f      	muls	r7, r5
 8000e34:	4665      	mov	r5, ip
 8000e36:	0c2d      	lsrs	r5, r5, #16
 8000e38:	46a9      	mov	r9, r5
 8000e3a:	4447      	add	r7, r8
 8000e3c:	444f      	add	r7, r9
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d905      	bls.n	8000e4e <__aeabi_dmul+0x376>
 8000e42:	0015      	movs	r5, r2
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	0252      	lsls	r2, r2, #9
 8000e48:	4690      	mov	r8, r2
 8000e4a:	4445      	add	r5, r8
 8000e4c:	9502      	str	r5, [sp, #8]
 8000e4e:	0c3d      	lsrs	r5, r7, #16
 8000e50:	9503      	str	r5, [sp, #12]
 8000e52:	4665      	mov	r5, ip
 8000e54:	042d      	lsls	r5, r5, #16
 8000e56:	043f      	lsls	r7, r7, #16
 8000e58:	0c2d      	lsrs	r5, r5, #16
 8000e5a:	46ac      	mov	ip, r5
 8000e5c:	003d      	movs	r5, r7
 8000e5e:	4465      	add	r5, ip
 8000e60:	9504      	str	r5, [sp, #16]
 8000e62:	0c25      	lsrs	r5, r4, #16
 8000e64:	0424      	lsls	r4, r4, #16
 8000e66:	0c24      	lsrs	r4, r4, #16
 8000e68:	46ac      	mov	ip, r5
 8000e6a:	0025      	movs	r5, r4
 8000e6c:	4375      	muls	r5, r6
 8000e6e:	46a8      	mov	r8, r5
 8000e70:	4665      	mov	r5, ip
 8000e72:	000f      	movs	r7, r1
 8000e74:	4369      	muls	r1, r5
 8000e76:	4441      	add	r1, r8
 8000e78:	4689      	mov	r9, r1
 8000e7a:	4367      	muls	r7, r4
 8000e7c:	0c39      	lsrs	r1, r7, #16
 8000e7e:	4449      	add	r1, r9
 8000e80:	436e      	muls	r6, r5
 8000e82:	4588      	cmp	r8, r1
 8000e84:	d903      	bls.n	8000e8e <__aeabi_dmul+0x3b6>
 8000e86:	2280      	movs	r2, #128	@ 0x80
 8000e88:	0252      	lsls	r2, r2, #9
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	4446      	add	r6, r8
 8000e8e:	0c0d      	lsrs	r5, r1, #16
 8000e90:	46a8      	mov	r8, r5
 8000e92:	0035      	movs	r5, r6
 8000e94:	4445      	add	r5, r8
 8000e96:	9505      	str	r5, [sp, #20]
 8000e98:	9d03      	ldr	r5, [sp, #12]
 8000e9a:	043f      	lsls	r7, r7, #16
 8000e9c:	46a8      	mov	r8, r5
 8000e9e:	0c3f      	lsrs	r7, r7, #16
 8000ea0:	0409      	lsls	r1, r1, #16
 8000ea2:	19c9      	adds	r1, r1, r7
 8000ea4:	4488      	add	r8, r1
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	9503      	str	r5, [sp, #12]
 8000eaa:	4655      	mov	r5, sl
 8000eac:	042e      	lsls	r6, r5, #16
 8000eae:	0c36      	lsrs	r6, r6, #16
 8000eb0:	0c2f      	lsrs	r7, r5, #16
 8000eb2:	0035      	movs	r5, r6
 8000eb4:	4345      	muls	r5, r0
 8000eb6:	4378      	muls	r0, r7
 8000eb8:	4681      	mov	r9, r0
 8000eba:	0038      	movs	r0, r7
 8000ebc:	46a8      	mov	r8, r5
 8000ebe:	0c2d      	lsrs	r5, r5, #16
 8000ec0:	46aa      	mov	sl, r5
 8000ec2:	9a00      	ldr	r2, [sp, #0]
 8000ec4:	4350      	muls	r0, r2
 8000ec6:	4372      	muls	r2, r6
 8000ec8:	444a      	add	r2, r9
 8000eca:	4452      	add	r2, sl
 8000ecc:	4591      	cmp	r9, r2
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_dmul+0x400>
 8000ed0:	2580      	movs	r5, #128	@ 0x80
 8000ed2:	026d      	lsls	r5, r5, #9
 8000ed4:	46a9      	mov	r9, r5
 8000ed6:	4448      	add	r0, r9
 8000ed8:	0c15      	lsrs	r5, r2, #16
 8000eda:	46a9      	mov	r9, r5
 8000edc:	4645      	mov	r5, r8
 8000ede:	042d      	lsls	r5, r5, #16
 8000ee0:	0c2d      	lsrs	r5, r5, #16
 8000ee2:	46a8      	mov	r8, r5
 8000ee4:	4665      	mov	r5, ip
 8000ee6:	437d      	muls	r5, r7
 8000ee8:	0412      	lsls	r2, r2, #16
 8000eea:	4448      	add	r0, r9
 8000eec:	4490      	add	r8, r2
 8000eee:	46a9      	mov	r9, r5
 8000ef0:	0032      	movs	r2, r6
 8000ef2:	4665      	mov	r5, ip
 8000ef4:	4362      	muls	r2, r4
 8000ef6:	436e      	muls	r6, r5
 8000ef8:	437c      	muls	r4, r7
 8000efa:	0c17      	lsrs	r7, r2, #16
 8000efc:	1936      	adds	r6, r6, r4
 8000efe:	19bf      	adds	r7, r7, r6
 8000f00:	42bc      	cmp	r4, r7
 8000f02:	d903      	bls.n	8000f0c <__aeabi_dmul+0x434>
 8000f04:	2480      	movs	r4, #128	@ 0x80
 8000f06:	0264      	lsls	r4, r4, #9
 8000f08:	46a4      	mov	ip, r4
 8000f0a:	44e1      	add	r9, ip
 8000f0c:	9c02      	ldr	r4, [sp, #8]
 8000f0e:	9e03      	ldr	r6, [sp, #12]
 8000f10:	46a4      	mov	ip, r4
 8000f12:	9d05      	ldr	r5, [sp, #20]
 8000f14:	4466      	add	r6, ip
 8000f16:	428e      	cmp	r6, r1
 8000f18:	4189      	sbcs	r1, r1
 8000f1a:	46ac      	mov	ip, r5
 8000f1c:	0412      	lsls	r2, r2, #16
 8000f1e:	043c      	lsls	r4, r7, #16
 8000f20:	0c12      	lsrs	r2, r2, #16
 8000f22:	18a2      	adds	r2, r4, r2
 8000f24:	4462      	add	r2, ip
 8000f26:	4249      	negs	r1, r1
 8000f28:	1854      	adds	r4, r2, r1
 8000f2a:	4446      	add	r6, r8
 8000f2c:	46a4      	mov	ip, r4
 8000f2e:	4546      	cmp	r6, r8
 8000f30:	41a4      	sbcs	r4, r4
 8000f32:	4682      	mov	sl, r0
 8000f34:	4264      	negs	r4, r4
 8000f36:	46a0      	mov	r8, r4
 8000f38:	42aa      	cmp	r2, r5
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	458c      	cmp	ip, r1
 8000f3e:	4189      	sbcs	r1, r1
 8000f40:	44e2      	add	sl, ip
 8000f42:	44d0      	add	r8, sl
 8000f44:	4249      	negs	r1, r1
 8000f46:	4252      	negs	r2, r2
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	45a0      	cmp	r8, r4
 8000f4c:	41a4      	sbcs	r4, r4
 8000f4e:	4582      	cmp	sl, r0
 8000f50:	4189      	sbcs	r1, r1
 8000f52:	4264      	negs	r4, r4
 8000f54:	4249      	negs	r1, r1
 8000f56:	430c      	orrs	r4, r1
 8000f58:	4641      	mov	r1, r8
 8000f5a:	0c3f      	lsrs	r7, r7, #16
 8000f5c:	19d2      	adds	r2, r2, r7
 8000f5e:	1912      	adds	r2, r2, r4
 8000f60:	0dcc      	lsrs	r4, r1, #23
 8000f62:	9904      	ldr	r1, [sp, #16]
 8000f64:	0270      	lsls	r0, r6, #9
 8000f66:	4308      	orrs	r0, r1
 8000f68:	1e41      	subs	r1, r0, #1
 8000f6a:	4188      	sbcs	r0, r1
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	444a      	add	r2, r9
 8000f70:	0df6      	lsrs	r6, r6, #23
 8000f72:	0252      	lsls	r2, r2, #9
 8000f74:	4330      	orrs	r0, r6
 8000f76:	0249      	lsls	r1, r1, #9
 8000f78:	4314      	orrs	r4, r2
 8000f7a:	4308      	orrs	r0, r1
 8000f7c:	01d2      	lsls	r2, r2, #7
 8000f7e:	d535      	bpl.n	8000fec <__aeabi_dmul+0x514>
 8000f80:	2201      	movs	r2, #1
 8000f82:	0843      	lsrs	r3, r0, #1
 8000f84:	4002      	ands	r2, r0
 8000f86:	4313      	orrs	r3, r2
 8000f88:	07e0      	lsls	r0, r4, #31
 8000f8a:	4318      	orrs	r0, r3
 8000f8c:	0864      	lsrs	r4, r4, #1
 8000f8e:	e634      	b.n	8000bfa <__aeabi_dmul+0x122>
 8000f90:	9b00      	ldr	r3, [sp, #0]
 8000f92:	46a2      	mov	sl, r4
 8000f94:	469b      	mov	fp, r3
 8000f96:	4681      	mov	r9, r0
 8000f98:	2480      	movs	r4, #128	@ 0x80
 8000f9a:	4653      	mov	r3, sl
 8000f9c:	0324      	lsls	r4, r4, #12
 8000f9e:	431c      	orrs	r4, r3
 8000fa0:	0324      	lsls	r4, r4, #12
 8000fa2:	464a      	mov	r2, r9
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <__aeabi_dmul+0x588>)
 8000fa6:	0b24      	lsrs	r4, r4, #12
 8000fa8:	e5ec      	b.n	8000b84 <__aeabi_dmul+0xac>
 8000faa:	f000 fc97 	bl	80018dc <__clzsi2>
 8000fae:	2315      	movs	r3, #21
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	4484      	add	ip, r0
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	4663      	mov	r3, ip
 8000fb8:	3220      	adds	r2, #32
 8000fba:	2b1c      	cmp	r3, #28
 8000fbc:	dc00      	bgt.n	8000fc0 <__aeabi_dmul+0x4e8>
 8000fbe:	e684      	b.n	8000cca <__aeabi_dmul+0x1f2>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4699      	mov	r9, r3
 8000fc4:	0023      	movs	r3, r4
 8000fc6:	3808      	subs	r0, #8
 8000fc8:	4083      	lsls	r3, r0
 8000fca:	469a      	mov	sl, r3
 8000fcc:	e68e      	b.n	8000cec <__aeabi_dmul+0x214>
 8000fce:	f000 fc85 	bl	80018dc <__clzsi2>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	3215      	adds	r2, #21
 8000fd8:	3320      	adds	r3, #32
 8000fda:	2a1c      	cmp	r2, #28
 8000fdc:	dc00      	bgt.n	8000fe0 <__aeabi_dmul+0x508>
 8000fde:	e64e      	b.n	8000c7e <__aeabi_dmul+0x1a6>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	0034      	movs	r4, r6
 8000fe4:	3a08      	subs	r2, #8
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	e652      	b.n	8000c92 <__aeabi_dmul+0x1ba>
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	e604      	b.n	8000bfa <__aeabi_dmul+0x122>
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <__aeabi_dmul+0x58c>)
 8000ff2:	0021      	movs	r1, r4
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	9d01      	ldr	r5, [sp, #4]
 8000ffa:	40d3      	lsrs	r3, r2
 8000ffc:	4465      	add	r5, ip
 8000ffe:	40a9      	lsls	r1, r5
 8001000:	4319      	orrs	r1, r3
 8001002:	0003      	movs	r3, r0
 8001004:	40ab      	lsls	r3, r5
 8001006:	1e58      	subs	r0, r3, #1
 8001008:	4183      	sbcs	r3, r0
 800100a:	4319      	orrs	r1, r3
 800100c:	0008      	movs	r0, r1
 800100e:	40d4      	lsrs	r4, r2
 8001010:	074b      	lsls	r3, r1, #29
 8001012:	d009      	beq.n	8001028 <__aeabi_dmul+0x550>
 8001014:	230f      	movs	r3, #15
 8001016:	400b      	ands	r3, r1
 8001018:	2b04      	cmp	r3, #4
 800101a:	d005      	beq.n	8001028 <__aeabi_dmul+0x550>
 800101c:	1d0b      	adds	r3, r1, #4
 800101e:	428b      	cmp	r3, r1
 8001020:	4180      	sbcs	r0, r0
 8001022:	4240      	negs	r0, r0
 8001024:	1824      	adds	r4, r4, r0
 8001026:	0018      	movs	r0, r3
 8001028:	0223      	lsls	r3, r4, #8
 800102a:	d400      	bmi.n	800102e <__aeabi_dmul+0x556>
 800102c:	e6d6      	b.n	8000ddc <__aeabi_dmul+0x304>
 800102e:	2301      	movs	r3, #1
 8001030:	2400      	movs	r4, #0
 8001032:	2200      	movs	r2, #0
 8001034:	e5a6      	b.n	8000b84 <__aeabi_dmul+0xac>
 8001036:	290f      	cmp	r1, #15
 8001038:	d1aa      	bne.n	8000f90 <__aeabi_dmul+0x4b8>
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	4652      	mov	r2, sl
 800103e:	031b      	lsls	r3, r3, #12
 8001040:	421a      	tst	r2, r3
 8001042:	d0a9      	beq.n	8000f98 <__aeabi_dmul+0x4c0>
 8001044:	421c      	tst	r4, r3
 8001046:	d1a7      	bne.n	8000f98 <__aeabi_dmul+0x4c0>
 8001048:	431c      	orrs	r4, r3
 800104a:	9b00      	ldr	r3, [sp, #0]
 800104c:	0002      	movs	r2, r0
 800104e:	469b      	mov	fp, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <__aeabi_dmul+0x588>)
 8001052:	e597      	b.n	8000b84 <__aeabi_dmul+0xac>
 8001054:	2400      	movs	r4, #0
 8001056:	e6c1      	b.n	8000ddc <__aeabi_dmul+0x304>
 8001058:	2400      	movs	r4, #0
 800105a:	4b01      	ldr	r3, [pc, #4]	@ (8001060 <__aeabi_dmul+0x588>)
 800105c:	0022      	movs	r2, r4
 800105e:	e591      	b.n	8000b84 <__aeabi_dmul+0xac>
 8001060:	000007ff 	.word	0x000007ff
 8001064:	0000041e 	.word	0x0000041e

08001068 <__aeabi_dsub>:
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	464e      	mov	r6, r9
 800106c:	4645      	mov	r5, r8
 800106e:	46de      	mov	lr, fp
 8001070:	4657      	mov	r7, sl
 8001072:	b5e0      	push	{r5, r6, r7, lr}
 8001074:	b085      	sub	sp, #20
 8001076:	9000      	str	r0, [sp, #0]
 8001078:	9101      	str	r1, [sp, #4]
 800107a:	030c      	lsls	r4, r1, #12
 800107c:	004f      	lsls	r7, r1, #1
 800107e:	0fce      	lsrs	r6, r1, #31
 8001080:	0a61      	lsrs	r1, r4, #9
 8001082:	9c00      	ldr	r4, [sp, #0]
 8001084:	46b0      	mov	r8, r6
 8001086:	0f64      	lsrs	r4, r4, #29
 8001088:	430c      	orrs	r4, r1
 800108a:	9900      	ldr	r1, [sp, #0]
 800108c:	0d7f      	lsrs	r7, r7, #21
 800108e:	00c8      	lsls	r0, r1, #3
 8001090:	0011      	movs	r1, r2
 8001092:	001a      	movs	r2, r3
 8001094:	031b      	lsls	r3, r3, #12
 8001096:	469c      	mov	ip, r3
 8001098:	9100      	str	r1, [sp, #0]
 800109a:	9201      	str	r2, [sp, #4]
 800109c:	0051      	lsls	r1, r2, #1
 800109e:	0d4b      	lsrs	r3, r1, #21
 80010a0:	4699      	mov	r9, r3
 80010a2:	9b01      	ldr	r3, [sp, #4]
 80010a4:	9d00      	ldr	r5, [sp, #0]
 80010a6:	0fd9      	lsrs	r1, r3, #31
 80010a8:	4663      	mov	r3, ip
 80010aa:	0f6a      	lsrs	r2, r5, #29
 80010ac:	0a5b      	lsrs	r3, r3, #9
 80010ae:	4313      	orrs	r3, r2
 80010b0:	00ea      	lsls	r2, r5, #3
 80010b2:	4694      	mov	ip, r2
 80010b4:	4693      	mov	fp, r2
 80010b6:	4ac1      	ldr	r2, [pc, #772]	@ (80013bc <__aeabi_dsub+0x354>)
 80010b8:	9003      	str	r0, [sp, #12]
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	4591      	cmp	r9, r2
 80010be:	d100      	bne.n	80010c2 <__aeabi_dsub+0x5a>
 80010c0:	e0cd      	b.n	800125e <__aeabi_dsub+0x1f6>
 80010c2:	2501      	movs	r5, #1
 80010c4:	4069      	eors	r1, r5
 80010c6:	464d      	mov	r5, r9
 80010c8:	1b7d      	subs	r5, r7, r5
 80010ca:	46aa      	mov	sl, r5
 80010cc:	428e      	cmp	r6, r1
 80010ce:	d100      	bne.n	80010d2 <__aeabi_dsub+0x6a>
 80010d0:	e080      	b.n	80011d4 <__aeabi_dsub+0x16c>
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	dc00      	bgt.n	80010d8 <__aeabi_dsub+0x70>
 80010d6:	e335      	b.n	8001744 <__aeabi_dsub+0x6dc>
 80010d8:	4649      	mov	r1, r9
 80010da:	2900      	cmp	r1, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dsub+0x78>
 80010de:	e0df      	b.n	80012a0 <__aeabi_dsub+0x238>
 80010e0:	4297      	cmp	r7, r2
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dsub+0x7e>
 80010e4:	e194      	b.n	8001410 <__aeabi_dsub+0x3a8>
 80010e6:	4652      	mov	r2, sl
 80010e8:	2501      	movs	r5, #1
 80010ea:	2a38      	cmp	r2, #56	@ 0x38
 80010ec:	dc19      	bgt.n	8001122 <__aeabi_dsub+0xba>
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	9b02      	ldr	r3, [sp, #8]
 80010f2:	0412      	lsls	r2, r2, #16
 80010f4:	4313      	orrs	r3, r2
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	4652      	mov	r2, sl
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dd00      	ble.n	8001100 <__aeabi_dsub+0x98>
 80010fe:	e1e3      	b.n	80014c8 <__aeabi_dsub+0x460>
 8001100:	4653      	mov	r3, sl
 8001102:	2220      	movs	r2, #32
 8001104:	4661      	mov	r1, ip
 8001106:	9d02      	ldr	r5, [sp, #8]
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	4095      	lsls	r5, r2
 800110c:	40d9      	lsrs	r1, r3
 800110e:	430d      	orrs	r5, r1
 8001110:	4661      	mov	r1, ip
 8001112:	4091      	lsls	r1, r2
 8001114:	000a      	movs	r2, r1
 8001116:	1e51      	subs	r1, r2, #1
 8001118:	418a      	sbcs	r2, r1
 800111a:	4315      	orrs	r5, r2
 800111c:	9a02      	ldr	r2, [sp, #8]
 800111e:	40da      	lsrs	r2, r3
 8001120:	1aa4      	subs	r4, r4, r2
 8001122:	1b45      	subs	r5, r0, r5
 8001124:	42a8      	cmp	r0, r5
 8001126:	4180      	sbcs	r0, r0
 8001128:	4240      	negs	r0, r0
 800112a:	1a24      	subs	r4, r4, r0
 800112c:	0223      	lsls	r3, r4, #8
 800112e:	d400      	bmi.n	8001132 <__aeabi_dsub+0xca>
 8001130:	e13d      	b.n	80013ae <__aeabi_dsub+0x346>
 8001132:	0264      	lsls	r4, r4, #9
 8001134:	0a64      	lsrs	r4, r4, #9
 8001136:	2c00      	cmp	r4, #0
 8001138:	d100      	bne.n	800113c <__aeabi_dsub+0xd4>
 800113a:	e147      	b.n	80013cc <__aeabi_dsub+0x364>
 800113c:	0020      	movs	r0, r4
 800113e:	f000 fbcd 	bl	80018dc <__clzsi2>
 8001142:	0003      	movs	r3, r0
 8001144:	3b08      	subs	r3, #8
 8001146:	2120      	movs	r1, #32
 8001148:	0028      	movs	r0, r5
 800114a:	1aca      	subs	r2, r1, r3
 800114c:	40d0      	lsrs	r0, r2
 800114e:	409c      	lsls	r4, r3
 8001150:	0002      	movs	r2, r0
 8001152:	409d      	lsls	r5, r3
 8001154:	4322      	orrs	r2, r4
 8001156:	429f      	cmp	r7, r3
 8001158:	dd00      	ble.n	800115c <__aeabi_dsub+0xf4>
 800115a:	e177      	b.n	800144c <__aeabi_dsub+0x3e4>
 800115c:	1bd8      	subs	r0, r3, r7
 800115e:	3001      	adds	r0, #1
 8001160:	1a09      	subs	r1, r1, r0
 8001162:	002c      	movs	r4, r5
 8001164:	408d      	lsls	r5, r1
 8001166:	40c4      	lsrs	r4, r0
 8001168:	1e6b      	subs	r3, r5, #1
 800116a:	419d      	sbcs	r5, r3
 800116c:	0013      	movs	r3, r2
 800116e:	40c2      	lsrs	r2, r0
 8001170:	408b      	lsls	r3, r1
 8001172:	4325      	orrs	r5, r4
 8001174:	2700      	movs	r7, #0
 8001176:	0014      	movs	r4, r2
 8001178:	431d      	orrs	r5, r3
 800117a:	076b      	lsls	r3, r5, #29
 800117c:	d009      	beq.n	8001192 <__aeabi_dsub+0x12a>
 800117e:	230f      	movs	r3, #15
 8001180:	402b      	ands	r3, r5
 8001182:	2b04      	cmp	r3, #4
 8001184:	d005      	beq.n	8001192 <__aeabi_dsub+0x12a>
 8001186:	1d2b      	adds	r3, r5, #4
 8001188:	42ab      	cmp	r3, r5
 800118a:	41ad      	sbcs	r5, r5
 800118c:	426d      	negs	r5, r5
 800118e:	1964      	adds	r4, r4, r5
 8001190:	001d      	movs	r5, r3
 8001192:	0223      	lsls	r3, r4, #8
 8001194:	d400      	bmi.n	8001198 <__aeabi_dsub+0x130>
 8001196:	e140      	b.n	800141a <__aeabi_dsub+0x3b2>
 8001198:	4a88      	ldr	r2, [pc, #544]	@ (80013bc <__aeabi_dsub+0x354>)
 800119a:	3701      	adds	r7, #1
 800119c:	4297      	cmp	r7, r2
 800119e:	d100      	bne.n	80011a2 <__aeabi_dsub+0x13a>
 80011a0:	e101      	b.n	80013a6 <__aeabi_dsub+0x33e>
 80011a2:	2601      	movs	r6, #1
 80011a4:	4643      	mov	r3, r8
 80011a6:	4986      	ldr	r1, [pc, #536]	@ (80013c0 <__aeabi_dsub+0x358>)
 80011a8:	08ed      	lsrs	r5, r5, #3
 80011aa:	4021      	ands	r1, r4
 80011ac:	074a      	lsls	r2, r1, #29
 80011ae:	432a      	orrs	r2, r5
 80011b0:	057c      	lsls	r4, r7, #21
 80011b2:	024d      	lsls	r5, r1, #9
 80011b4:	0b2d      	lsrs	r5, r5, #12
 80011b6:	0d64      	lsrs	r4, r4, #21
 80011b8:	401e      	ands	r6, r3
 80011ba:	0524      	lsls	r4, r4, #20
 80011bc:	432c      	orrs	r4, r5
 80011be:	07f6      	lsls	r6, r6, #31
 80011c0:	4334      	orrs	r4, r6
 80011c2:	0010      	movs	r0, r2
 80011c4:	0021      	movs	r1, r4
 80011c6:	b005      	add	sp, #20
 80011c8:	bcf0      	pop	{r4, r5, r6, r7}
 80011ca:	46bb      	mov	fp, r7
 80011cc:	46b2      	mov	sl, r6
 80011ce:	46a9      	mov	r9, r5
 80011d0:	46a0      	mov	r8, r4
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	2d00      	cmp	r5, #0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dsub+0x172>
 80011d8:	e2d0      	b.n	800177c <__aeabi_dsub+0x714>
 80011da:	4649      	mov	r1, r9
 80011dc:	2900      	cmp	r1, #0
 80011de:	d000      	beq.n	80011e2 <__aeabi_dsub+0x17a>
 80011e0:	e0d4      	b.n	800138c <__aeabi_dsub+0x324>
 80011e2:	4661      	mov	r1, ip
 80011e4:	9b02      	ldr	r3, [sp, #8]
 80011e6:	4319      	orrs	r1, r3
 80011e8:	d100      	bne.n	80011ec <__aeabi_dsub+0x184>
 80011ea:	e12b      	b.n	8001444 <__aeabi_dsub+0x3dc>
 80011ec:	1e69      	subs	r1, r5, #1
 80011ee:	2d01      	cmp	r5, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dsub+0x18c>
 80011f2:	e1d9      	b.n	80015a8 <__aeabi_dsub+0x540>
 80011f4:	4295      	cmp	r5, r2
 80011f6:	d100      	bne.n	80011fa <__aeabi_dsub+0x192>
 80011f8:	e10a      	b.n	8001410 <__aeabi_dsub+0x3a8>
 80011fa:	2501      	movs	r5, #1
 80011fc:	2938      	cmp	r1, #56	@ 0x38
 80011fe:	dc17      	bgt.n	8001230 <__aeabi_dsub+0x1c8>
 8001200:	468a      	mov	sl, r1
 8001202:	4653      	mov	r3, sl
 8001204:	2b1f      	cmp	r3, #31
 8001206:	dd00      	ble.n	800120a <__aeabi_dsub+0x1a2>
 8001208:	e1e7      	b.n	80015da <__aeabi_dsub+0x572>
 800120a:	2220      	movs	r2, #32
 800120c:	1ad2      	subs	r2, r2, r3
 800120e:	9b02      	ldr	r3, [sp, #8]
 8001210:	4661      	mov	r1, ip
 8001212:	4093      	lsls	r3, r2
 8001214:	001d      	movs	r5, r3
 8001216:	4653      	mov	r3, sl
 8001218:	40d9      	lsrs	r1, r3
 800121a:	4663      	mov	r3, ip
 800121c:	4093      	lsls	r3, r2
 800121e:	001a      	movs	r2, r3
 8001220:	430d      	orrs	r5, r1
 8001222:	1e51      	subs	r1, r2, #1
 8001224:	418a      	sbcs	r2, r1
 8001226:	4653      	mov	r3, sl
 8001228:	4315      	orrs	r5, r2
 800122a:	9a02      	ldr	r2, [sp, #8]
 800122c:	40da      	lsrs	r2, r3
 800122e:	18a4      	adds	r4, r4, r2
 8001230:	182d      	adds	r5, r5, r0
 8001232:	4285      	cmp	r5, r0
 8001234:	4180      	sbcs	r0, r0
 8001236:	4240      	negs	r0, r0
 8001238:	1824      	adds	r4, r4, r0
 800123a:	0223      	lsls	r3, r4, #8
 800123c:	d400      	bmi.n	8001240 <__aeabi_dsub+0x1d8>
 800123e:	e0b6      	b.n	80013ae <__aeabi_dsub+0x346>
 8001240:	4b5e      	ldr	r3, [pc, #376]	@ (80013bc <__aeabi_dsub+0x354>)
 8001242:	3701      	adds	r7, #1
 8001244:	429f      	cmp	r7, r3
 8001246:	d100      	bne.n	800124a <__aeabi_dsub+0x1e2>
 8001248:	e0ad      	b.n	80013a6 <__aeabi_dsub+0x33e>
 800124a:	2101      	movs	r1, #1
 800124c:	4b5c      	ldr	r3, [pc, #368]	@ (80013c0 <__aeabi_dsub+0x358>)
 800124e:	086a      	lsrs	r2, r5, #1
 8001250:	401c      	ands	r4, r3
 8001252:	4029      	ands	r1, r5
 8001254:	430a      	orrs	r2, r1
 8001256:	07e5      	lsls	r5, r4, #31
 8001258:	4315      	orrs	r5, r2
 800125a:	0864      	lsrs	r4, r4, #1
 800125c:	e78d      	b.n	800117a <__aeabi_dsub+0x112>
 800125e:	4a59      	ldr	r2, [pc, #356]	@ (80013c4 <__aeabi_dsub+0x35c>)
 8001260:	9b02      	ldr	r3, [sp, #8]
 8001262:	4692      	mov	sl, r2
 8001264:	4662      	mov	r2, ip
 8001266:	44ba      	add	sl, r7
 8001268:	431a      	orrs	r2, r3
 800126a:	d02c      	beq.n	80012c6 <__aeabi_dsub+0x25e>
 800126c:	428e      	cmp	r6, r1
 800126e:	d02e      	beq.n	80012ce <__aeabi_dsub+0x266>
 8001270:	4652      	mov	r2, sl
 8001272:	2a00      	cmp	r2, #0
 8001274:	d060      	beq.n	8001338 <__aeabi_dsub+0x2d0>
 8001276:	2f00      	cmp	r7, #0
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x214>
 800127a:	e0db      	b.n	8001434 <__aeabi_dsub+0x3cc>
 800127c:	4663      	mov	r3, ip
 800127e:	000e      	movs	r6, r1
 8001280:	9c02      	ldr	r4, [sp, #8]
 8001282:	08d8      	lsrs	r0, r3, #3
 8001284:	0762      	lsls	r2, r4, #29
 8001286:	4302      	orrs	r2, r0
 8001288:	08e4      	lsrs	r4, r4, #3
 800128a:	0013      	movs	r3, r2
 800128c:	4323      	orrs	r3, r4
 800128e:	d100      	bne.n	8001292 <__aeabi_dsub+0x22a>
 8001290:	e254      	b.n	800173c <__aeabi_dsub+0x6d4>
 8001292:	2580      	movs	r5, #128	@ 0x80
 8001294:	032d      	lsls	r5, r5, #12
 8001296:	4325      	orrs	r5, r4
 8001298:	032d      	lsls	r5, r5, #12
 800129a:	4c48      	ldr	r4, [pc, #288]	@ (80013bc <__aeabi_dsub+0x354>)
 800129c:	0b2d      	lsrs	r5, r5, #12
 800129e:	e78c      	b.n	80011ba <__aeabi_dsub+0x152>
 80012a0:	4661      	mov	r1, ip
 80012a2:	9b02      	ldr	r3, [sp, #8]
 80012a4:	4319      	orrs	r1, r3
 80012a6:	d100      	bne.n	80012aa <__aeabi_dsub+0x242>
 80012a8:	e0cc      	b.n	8001444 <__aeabi_dsub+0x3dc>
 80012aa:	0029      	movs	r1, r5
 80012ac:	3901      	subs	r1, #1
 80012ae:	2d01      	cmp	r5, #1
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dsub+0x24c>
 80012b2:	e188      	b.n	80015c6 <__aeabi_dsub+0x55e>
 80012b4:	4295      	cmp	r5, r2
 80012b6:	d100      	bne.n	80012ba <__aeabi_dsub+0x252>
 80012b8:	e0aa      	b.n	8001410 <__aeabi_dsub+0x3a8>
 80012ba:	2501      	movs	r5, #1
 80012bc:	2938      	cmp	r1, #56	@ 0x38
 80012be:	dd00      	ble.n	80012c2 <__aeabi_dsub+0x25a>
 80012c0:	e72f      	b.n	8001122 <__aeabi_dsub+0xba>
 80012c2:	468a      	mov	sl, r1
 80012c4:	e718      	b.n	80010f8 <__aeabi_dsub+0x90>
 80012c6:	2201      	movs	r2, #1
 80012c8:	4051      	eors	r1, r2
 80012ca:	428e      	cmp	r6, r1
 80012cc:	d1d0      	bne.n	8001270 <__aeabi_dsub+0x208>
 80012ce:	4653      	mov	r3, sl
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dsub+0x26e>
 80012d4:	e0be      	b.n	8001454 <__aeabi_dsub+0x3ec>
 80012d6:	2f00      	cmp	r7, #0
 80012d8:	d000      	beq.n	80012dc <__aeabi_dsub+0x274>
 80012da:	e138      	b.n	800154e <__aeabi_dsub+0x4e6>
 80012dc:	46ca      	mov	sl, r9
 80012de:	0022      	movs	r2, r4
 80012e0:	4302      	orrs	r2, r0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dsub+0x27e>
 80012e4:	e1e2      	b.n	80016ac <__aeabi_dsub+0x644>
 80012e6:	4653      	mov	r3, sl
 80012e8:	1e59      	subs	r1, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d100      	bne.n	80012f0 <__aeabi_dsub+0x288>
 80012ee:	e20d      	b.n	800170c <__aeabi_dsub+0x6a4>
 80012f0:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <__aeabi_dsub+0x354>)
 80012f2:	4592      	cmp	sl, r2
 80012f4:	d100      	bne.n	80012f8 <__aeabi_dsub+0x290>
 80012f6:	e1d2      	b.n	800169e <__aeabi_dsub+0x636>
 80012f8:	2701      	movs	r7, #1
 80012fa:	2938      	cmp	r1, #56	@ 0x38
 80012fc:	dc13      	bgt.n	8001326 <__aeabi_dsub+0x2be>
 80012fe:	291f      	cmp	r1, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dsub+0x29c>
 8001302:	e1ee      	b.n	80016e2 <__aeabi_dsub+0x67a>
 8001304:	2220      	movs	r2, #32
 8001306:	9b02      	ldr	r3, [sp, #8]
 8001308:	1a52      	subs	r2, r2, r1
 800130a:	0025      	movs	r5, r4
 800130c:	0007      	movs	r7, r0
 800130e:	469a      	mov	sl, r3
 8001310:	40cc      	lsrs	r4, r1
 8001312:	4090      	lsls	r0, r2
 8001314:	4095      	lsls	r5, r2
 8001316:	40cf      	lsrs	r7, r1
 8001318:	44a2      	add	sl, r4
 800131a:	1e42      	subs	r2, r0, #1
 800131c:	4190      	sbcs	r0, r2
 800131e:	4653      	mov	r3, sl
 8001320:	432f      	orrs	r7, r5
 8001322:	4307      	orrs	r7, r0
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	003d      	movs	r5, r7
 8001328:	4465      	add	r5, ip
 800132a:	4565      	cmp	r5, ip
 800132c:	4192      	sbcs	r2, r2
 800132e:	9b02      	ldr	r3, [sp, #8]
 8001330:	4252      	negs	r2, r2
 8001332:	464f      	mov	r7, r9
 8001334:	18d4      	adds	r4, r2, r3
 8001336:	e780      	b.n	800123a <__aeabi_dsub+0x1d2>
 8001338:	4a23      	ldr	r2, [pc, #140]	@ (80013c8 <__aeabi_dsub+0x360>)
 800133a:	1c7d      	adds	r5, r7, #1
 800133c:	4215      	tst	r5, r2
 800133e:	d000      	beq.n	8001342 <__aeabi_dsub+0x2da>
 8001340:	e0aa      	b.n	8001498 <__aeabi_dsub+0x430>
 8001342:	4662      	mov	r2, ip
 8001344:	0025      	movs	r5, r4
 8001346:	9b02      	ldr	r3, [sp, #8]
 8001348:	4305      	orrs	r5, r0
 800134a:	431a      	orrs	r2, r3
 800134c:	2f00      	cmp	r7, #0
 800134e:	d000      	beq.n	8001352 <__aeabi_dsub+0x2ea>
 8001350:	e0f5      	b.n	800153e <__aeabi_dsub+0x4d6>
 8001352:	2d00      	cmp	r5, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_dsub+0x2f0>
 8001356:	e16b      	b.n	8001630 <__aeabi_dsub+0x5c8>
 8001358:	2a00      	cmp	r2, #0
 800135a:	d100      	bne.n	800135e <__aeabi_dsub+0x2f6>
 800135c:	e152      	b.n	8001604 <__aeabi_dsub+0x59c>
 800135e:	4663      	mov	r3, ip
 8001360:	1ac5      	subs	r5, r0, r3
 8001362:	9b02      	ldr	r3, [sp, #8]
 8001364:	1ae2      	subs	r2, r4, r3
 8001366:	42a8      	cmp	r0, r5
 8001368:	419b      	sbcs	r3, r3
 800136a:	425b      	negs	r3, r3
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	021a      	lsls	r2, r3, #8
 8001370:	d400      	bmi.n	8001374 <__aeabi_dsub+0x30c>
 8001372:	e1d5      	b.n	8001720 <__aeabi_dsub+0x6b8>
 8001374:	4663      	mov	r3, ip
 8001376:	1a1d      	subs	r5, r3, r0
 8001378:	45ac      	cmp	ip, r5
 800137a:	4192      	sbcs	r2, r2
 800137c:	2601      	movs	r6, #1
 800137e:	9b02      	ldr	r3, [sp, #8]
 8001380:	4252      	negs	r2, r2
 8001382:	1b1c      	subs	r4, r3, r4
 8001384:	4688      	mov	r8, r1
 8001386:	1aa4      	subs	r4, r4, r2
 8001388:	400e      	ands	r6, r1
 800138a:	e6f6      	b.n	800117a <__aeabi_dsub+0x112>
 800138c:	4297      	cmp	r7, r2
 800138e:	d03f      	beq.n	8001410 <__aeabi_dsub+0x3a8>
 8001390:	4652      	mov	r2, sl
 8001392:	2501      	movs	r5, #1
 8001394:	2a38      	cmp	r2, #56	@ 0x38
 8001396:	dd00      	ble.n	800139a <__aeabi_dsub+0x332>
 8001398:	e74a      	b.n	8001230 <__aeabi_dsub+0x1c8>
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	9b02      	ldr	r3, [sp, #8]
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4313      	orrs	r3, r2
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	e72d      	b.n	8001202 <__aeabi_dsub+0x19a>
 80013a6:	003c      	movs	r4, r7
 80013a8:	2500      	movs	r5, #0
 80013aa:	2200      	movs	r2, #0
 80013ac:	e705      	b.n	80011ba <__aeabi_dsub+0x152>
 80013ae:	2307      	movs	r3, #7
 80013b0:	402b      	ands	r3, r5
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d000      	beq.n	80013b8 <__aeabi_dsub+0x350>
 80013b6:	e6e2      	b.n	800117e <__aeabi_dsub+0x116>
 80013b8:	e06b      	b.n	8001492 <__aeabi_dsub+0x42a>
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	000007ff 	.word	0x000007ff
 80013c0:	ff7fffff 	.word	0xff7fffff
 80013c4:	fffff801 	.word	0xfffff801
 80013c8:	000007fe 	.word	0x000007fe
 80013cc:	0028      	movs	r0, r5
 80013ce:	f000 fa85 	bl	80018dc <__clzsi2>
 80013d2:	0003      	movs	r3, r0
 80013d4:	3318      	adds	r3, #24
 80013d6:	2b1f      	cmp	r3, #31
 80013d8:	dc00      	bgt.n	80013dc <__aeabi_dsub+0x374>
 80013da:	e6b4      	b.n	8001146 <__aeabi_dsub+0xde>
 80013dc:	002a      	movs	r2, r5
 80013de:	3808      	subs	r0, #8
 80013e0:	4082      	lsls	r2, r0
 80013e2:	429f      	cmp	r7, r3
 80013e4:	dd00      	ble.n	80013e8 <__aeabi_dsub+0x380>
 80013e6:	e0b9      	b.n	800155c <__aeabi_dsub+0x4f4>
 80013e8:	1bdb      	subs	r3, r3, r7
 80013ea:	1c58      	adds	r0, r3, #1
 80013ec:	281f      	cmp	r0, #31
 80013ee:	dc00      	bgt.n	80013f2 <__aeabi_dsub+0x38a>
 80013f0:	e1a0      	b.n	8001734 <__aeabi_dsub+0x6cc>
 80013f2:	0015      	movs	r5, r2
 80013f4:	3b1f      	subs	r3, #31
 80013f6:	40dd      	lsrs	r5, r3
 80013f8:	2820      	cmp	r0, #32
 80013fa:	d005      	beq.n	8001408 <__aeabi_dsub+0x3a0>
 80013fc:	2340      	movs	r3, #64	@ 0x40
 80013fe:	1a1b      	subs	r3, r3, r0
 8001400:	409a      	lsls	r2, r3
 8001402:	1e53      	subs	r3, r2, #1
 8001404:	419a      	sbcs	r2, r3
 8001406:	4315      	orrs	r5, r2
 8001408:	2307      	movs	r3, #7
 800140a:	2700      	movs	r7, #0
 800140c:	402b      	ands	r3, r5
 800140e:	e7d0      	b.n	80013b2 <__aeabi_dsub+0x34a>
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	0762      	lsls	r2, r4, #29
 8001414:	4302      	orrs	r2, r0
 8001416:	08e4      	lsrs	r4, r4, #3
 8001418:	e737      	b.n	800128a <__aeabi_dsub+0x222>
 800141a:	08ea      	lsrs	r2, r5, #3
 800141c:	0763      	lsls	r3, r4, #29
 800141e:	431a      	orrs	r2, r3
 8001420:	4bd3      	ldr	r3, [pc, #844]	@ (8001770 <__aeabi_dsub+0x708>)
 8001422:	08e4      	lsrs	r4, r4, #3
 8001424:	429f      	cmp	r7, r3
 8001426:	d100      	bne.n	800142a <__aeabi_dsub+0x3c2>
 8001428:	e72f      	b.n	800128a <__aeabi_dsub+0x222>
 800142a:	0324      	lsls	r4, r4, #12
 800142c:	0b25      	lsrs	r5, r4, #12
 800142e:	057c      	lsls	r4, r7, #21
 8001430:	0d64      	lsrs	r4, r4, #21
 8001432:	e6c2      	b.n	80011ba <__aeabi_dsub+0x152>
 8001434:	46ca      	mov	sl, r9
 8001436:	0022      	movs	r2, r4
 8001438:	4302      	orrs	r2, r0
 800143a:	d158      	bne.n	80014ee <__aeabi_dsub+0x486>
 800143c:	4663      	mov	r3, ip
 800143e:	000e      	movs	r6, r1
 8001440:	9c02      	ldr	r4, [sp, #8]
 8001442:	9303      	str	r3, [sp, #12]
 8001444:	9b03      	ldr	r3, [sp, #12]
 8001446:	4657      	mov	r7, sl
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	e7e7      	b.n	800141c <__aeabi_dsub+0x3b4>
 800144c:	4cc9      	ldr	r4, [pc, #804]	@ (8001774 <__aeabi_dsub+0x70c>)
 800144e:	1aff      	subs	r7, r7, r3
 8001450:	4014      	ands	r4, r2
 8001452:	e692      	b.n	800117a <__aeabi_dsub+0x112>
 8001454:	4dc8      	ldr	r5, [pc, #800]	@ (8001778 <__aeabi_dsub+0x710>)
 8001456:	1c7a      	adds	r2, r7, #1
 8001458:	422a      	tst	r2, r5
 800145a:	d000      	beq.n	800145e <__aeabi_dsub+0x3f6>
 800145c:	e084      	b.n	8001568 <__aeabi_dsub+0x500>
 800145e:	0022      	movs	r2, r4
 8001460:	4302      	orrs	r2, r0
 8001462:	2f00      	cmp	r7, #0
 8001464:	d000      	beq.n	8001468 <__aeabi_dsub+0x400>
 8001466:	e0ef      	b.n	8001648 <__aeabi_dsub+0x5e0>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_dsub+0x406>
 800146c:	e0e5      	b.n	800163a <__aeabi_dsub+0x5d2>
 800146e:	4662      	mov	r2, ip
 8001470:	9902      	ldr	r1, [sp, #8]
 8001472:	430a      	orrs	r2, r1
 8001474:	d100      	bne.n	8001478 <__aeabi_dsub+0x410>
 8001476:	e0c5      	b.n	8001604 <__aeabi_dsub+0x59c>
 8001478:	4663      	mov	r3, ip
 800147a:	18c5      	adds	r5, r0, r3
 800147c:	468c      	mov	ip, r1
 800147e:	4285      	cmp	r5, r0
 8001480:	4180      	sbcs	r0, r0
 8001482:	4464      	add	r4, ip
 8001484:	4240      	negs	r0, r0
 8001486:	1824      	adds	r4, r4, r0
 8001488:	0223      	lsls	r3, r4, #8
 800148a:	d502      	bpl.n	8001492 <__aeabi_dsub+0x42a>
 800148c:	4bb9      	ldr	r3, [pc, #740]	@ (8001774 <__aeabi_dsub+0x70c>)
 800148e:	3701      	adds	r7, #1
 8001490:	401c      	ands	r4, r3
 8001492:	46ba      	mov	sl, r7
 8001494:	9503      	str	r5, [sp, #12]
 8001496:	e7d5      	b.n	8001444 <__aeabi_dsub+0x3dc>
 8001498:	4662      	mov	r2, ip
 800149a:	1a85      	subs	r5, r0, r2
 800149c:	42a8      	cmp	r0, r5
 800149e:	4192      	sbcs	r2, r2
 80014a0:	4252      	negs	r2, r2
 80014a2:	4691      	mov	r9, r2
 80014a4:	9b02      	ldr	r3, [sp, #8]
 80014a6:	1ae3      	subs	r3, r4, r3
 80014a8:	001a      	movs	r2, r3
 80014aa:	464b      	mov	r3, r9
 80014ac:	1ad2      	subs	r2, r2, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	4691      	mov	r9, r2
 80014b2:	021a      	lsls	r2, r3, #8
 80014b4:	d46c      	bmi.n	8001590 <__aeabi_dsub+0x528>
 80014b6:	464a      	mov	r2, r9
 80014b8:	464c      	mov	r4, r9
 80014ba:	432a      	orrs	r2, r5
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dsub+0x458>
 80014be:	e63a      	b.n	8001136 <__aeabi_dsub+0xce>
 80014c0:	2600      	movs	r6, #0
 80014c2:	2400      	movs	r4, #0
 80014c4:	2500      	movs	r5, #0
 80014c6:	e678      	b.n	80011ba <__aeabi_dsub+0x152>
 80014c8:	9902      	ldr	r1, [sp, #8]
 80014ca:	4653      	mov	r3, sl
 80014cc:	000d      	movs	r5, r1
 80014ce:	3a20      	subs	r2, #32
 80014d0:	40d5      	lsrs	r5, r2
 80014d2:	2b20      	cmp	r3, #32
 80014d4:	d006      	beq.n	80014e4 <__aeabi_dsub+0x47c>
 80014d6:	2240      	movs	r2, #64	@ 0x40
 80014d8:	1ad2      	subs	r2, r2, r3
 80014da:	000b      	movs	r3, r1
 80014dc:	4093      	lsls	r3, r2
 80014de:	4662      	mov	r2, ip
 80014e0:	431a      	orrs	r2, r3
 80014e2:	4693      	mov	fp, r2
 80014e4:	465b      	mov	r3, fp
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	4193      	sbcs	r3, r2
 80014ea:	431d      	orrs	r5, r3
 80014ec:	e619      	b.n	8001122 <__aeabi_dsub+0xba>
 80014ee:	4653      	mov	r3, sl
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dsub+0x490>
 80014f6:	e0c6      	b.n	8001686 <__aeabi_dsub+0x61e>
 80014f8:	4e9d      	ldr	r6, [pc, #628]	@ (8001770 <__aeabi_dsub+0x708>)
 80014fa:	45b2      	cmp	sl, r6
 80014fc:	d100      	bne.n	8001500 <__aeabi_dsub+0x498>
 80014fe:	e6bd      	b.n	800127c <__aeabi_dsub+0x214>
 8001500:	4688      	mov	r8, r1
 8001502:	000e      	movs	r6, r1
 8001504:	2501      	movs	r5, #1
 8001506:	2a38      	cmp	r2, #56	@ 0x38
 8001508:	dc10      	bgt.n	800152c <__aeabi_dsub+0x4c4>
 800150a:	2a1f      	cmp	r2, #31
 800150c:	dc7f      	bgt.n	800160e <__aeabi_dsub+0x5a6>
 800150e:	2120      	movs	r1, #32
 8001510:	0025      	movs	r5, r4
 8001512:	1a89      	subs	r1, r1, r2
 8001514:	0007      	movs	r7, r0
 8001516:	4088      	lsls	r0, r1
 8001518:	408d      	lsls	r5, r1
 800151a:	40d7      	lsrs	r7, r2
 800151c:	40d4      	lsrs	r4, r2
 800151e:	1e41      	subs	r1, r0, #1
 8001520:	4188      	sbcs	r0, r1
 8001522:	9b02      	ldr	r3, [sp, #8]
 8001524:	433d      	orrs	r5, r7
 8001526:	1b1b      	subs	r3, r3, r4
 8001528:	4305      	orrs	r5, r0
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	4662      	mov	r2, ip
 800152e:	1b55      	subs	r5, r2, r5
 8001530:	45ac      	cmp	ip, r5
 8001532:	4192      	sbcs	r2, r2
 8001534:	9b02      	ldr	r3, [sp, #8]
 8001536:	4252      	negs	r2, r2
 8001538:	464f      	mov	r7, r9
 800153a:	1a9c      	subs	r4, r3, r2
 800153c:	e5f6      	b.n	800112c <__aeabi_dsub+0xc4>
 800153e:	2d00      	cmp	r5, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dsub+0x4dc>
 8001542:	e0b7      	b.n	80016b4 <__aeabi_dsub+0x64c>
 8001544:	2a00      	cmp	r2, #0
 8001546:	d100      	bne.n	800154a <__aeabi_dsub+0x4e2>
 8001548:	e0f0      	b.n	800172c <__aeabi_dsub+0x6c4>
 800154a:	2601      	movs	r6, #1
 800154c:	400e      	ands	r6, r1
 800154e:	4663      	mov	r3, ip
 8001550:	9802      	ldr	r0, [sp, #8]
 8001552:	08d9      	lsrs	r1, r3, #3
 8001554:	0742      	lsls	r2, r0, #29
 8001556:	430a      	orrs	r2, r1
 8001558:	08c4      	lsrs	r4, r0, #3
 800155a:	e696      	b.n	800128a <__aeabi_dsub+0x222>
 800155c:	4c85      	ldr	r4, [pc, #532]	@ (8001774 <__aeabi_dsub+0x70c>)
 800155e:	1aff      	subs	r7, r7, r3
 8001560:	4014      	ands	r4, r2
 8001562:	0762      	lsls	r2, r4, #29
 8001564:	08e4      	lsrs	r4, r4, #3
 8001566:	e760      	b.n	800142a <__aeabi_dsub+0x3c2>
 8001568:	4981      	ldr	r1, [pc, #516]	@ (8001770 <__aeabi_dsub+0x708>)
 800156a:	428a      	cmp	r2, r1
 800156c:	d100      	bne.n	8001570 <__aeabi_dsub+0x508>
 800156e:	e0c9      	b.n	8001704 <__aeabi_dsub+0x69c>
 8001570:	4663      	mov	r3, ip
 8001572:	18c1      	adds	r1, r0, r3
 8001574:	4281      	cmp	r1, r0
 8001576:	4180      	sbcs	r0, r0
 8001578:	9b02      	ldr	r3, [sp, #8]
 800157a:	4240      	negs	r0, r0
 800157c:	18e3      	adds	r3, r4, r3
 800157e:	181b      	adds	r3, r3, r0
 8001580:	07dd      	lsls	r5, r3, #31
 8001582:	085c      	lsrs	r4, r3, #1
 8001584:	2307      	movs	r3, #7
 8001586:	0849      	lsrs	r1, r1, #1
 8001588:	430d      	orrs	r5, r1
 800158a:	0017      	movs	r7, r2
 800158c:	402b      	ands	r3, r5
 800158e:	e710      	b.n	80013b2 <__aeabi_dsub+0x34a>
 8001590:	4663      	mov	r3, ip
 8001592:	1a1d      	subs	r5, r3, r0
 8001594:	45ac      	cmp	ip, r5
 8001596:	4192      	sbcs	r2, r2
 8001598:	2601      	movs	r6, #1
 800159a:	9b02      	ldr	r3, [sp, #8]
 800159c:	4252      	negs	r2, r2
 800159e:	1b1c      	subs	r4, r3, r4
 80015a0:	4688      	mov	r8, r1
 80015a2:	1aa4      	subs	r4, r4, r2
 80015a4:	400e      	ands	r6, r1
 80015a6:	e5c6      	b.n	8001136 <__aeabi_dsub+0xce>
 80015a8:	4663      	mov	r3, ip
 80015aa:	18c5      	adds	r5, r0, r3
 80015ac:	9b02      	ldr	r3, [sp, #8]
 80015ae:	4285      	cmp	r5, r0
 80015b0:	4180      	sbcs	r0, r0
 80015b2:	469c      	mov	ip, r3
 80015b4:	4240      	negs	r0, r0
 80015b6:	4464      	add	r4, ip
 80015b8:	1824      	adds	r4, r4, r0
 80015ba:	2701      	movs	r7, #1
 80015bc:	0223      	lsls	r3, r4, #8
 80015be:	d400      	bmi.n	80015c2 <__aeabi_dsub+0x55a>
 80015c0:	e6f5      	b.n	80013ae <__aeabi_dsub+0x346>
 80015c2:	2702      	movs	r7, #2
 80015c4:	e641      	b.n	800124a <__aeabi_dsub+0x1e2>
 80015c6:	4663      	mov	r3, ip
 80015c8:	1ac5      	subs	r5, r0, r3
 80015ca:	42a8      	cmp	r0, r5
 80015cc:	4180      	sbcs	r0, r0
 80015ce:	9b02      	ldr	r3, [sp, #8]
 80015d0:	4240      	negs	r0, r0
 80015d2:	1ae4      	subs	r4, r4, r3
 80015d4:	2701      	movs	r7, #1
 80015d6:	1a24      	subs	r4, r4, r0
 80015d8:	e5a8      	b.n	800112c <__aeabi_dsub+0xc4>
 80015da:	9d02      	ldr	r5, [sp, #8]
 80015dc:	4652      	mov	r2, sl
 80015de:	002b      	movs	r3, r5
 80015e0:	3a20      	subs	r2, #32
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	4653      	mov	r3, sl
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d006      	beq.n	80015fa <__aeabi_dsub+0x592>
 80015ec:	2240      	movs	r2, #64	@ 0x40
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	002b      	movs	r3, r5
 80015f2:	4093      	lsls	r3, r2
 80015f4:	4662      	mov	r2, ip
 80015f6:	431a      	orrs	r2, r3
 80015f8:	4693      	mov	fp, r2
 80015fa:	465d      	mov	r5, fp
 80015fc:	1e6b      	subs	r3, r5, #1
 80015fe:	419d      	sbcs	r5, r3
 8001600:	430d      	orrs	r5, r1
 8001602:	e615      	b.n	8001230 <__aeabi_dsub+0x1c8>
 8001604:	0762      	lsls	r2, r4, #29
 8001606:	08c0      	lsrs	r0, r0, #3
 8001608:	4302      	orrs	r2, r0
 800160a:	08e4      	lsrs	r4, r4, #3
 800160c:	e70d      	b.n	800142a <__aeabi_dsub+0x3c2>
 800160e:	0011      	movs	r1, r2
 8001610:	0027      	movs	r7, r4
 8001612:	3920      	subs	r1, #32
 8001614:	40cf      	lsrs	r7, r1
 8001616:	2a20      	cmp	r2, #32
 8001618:	d005      	beq.n	8001626 <__aeabi_dsub+0x5be>
 800161a:	2140      	movs	r1, #64	@ 0x40
 800161c:	1a8a      	subs	r2, r1, r2
 800161e:	4094      	lsls	r4, r2
 8001620:	0025      	movs	r5, r4
 8001622:	4305      	orrs	r5, r0
 8001624:	9503      	str	r5, [sp, #12]
 8001626:	9d03      	ldr	r5, [sp, #12]
 8001628:	1e6a      	subs	r2, r5, #1
 800162a:	4195      	sbcs	r5, r2
 800162c:	433d      	orrs	r5, r7
 800162e:	e77d      	b.n	800152c <__aeabi_dsub+0x4c4>
 8001630:	2a00      	cmp	r2, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_dsub+0x5ce>
 8001634:	e744      	b.n	80014c0 <__aeabi_dsub+0x458>
 8001636:	2601      	movs	r6, #1
 8001638:	400e      	ands	r6, r1
 800163a:	4663      	mov	r3, ip
 800163c:	08d9      	lsrs	r1, r3, #3
 800163e:	9b02      	ldr	r3, [sp, #8]
 8001640:	075a      	lsls	r2, r3, #29
 8001642:	430a      	orrs	r2, r1
 8001644:	08dc      	lsrs	r4, r3, #3
 8001646:	e6f0      	b.n	800142a <__aeabi_dsub+0x3c2>
 8001648:	2a00      	cmp	r2, #0
 800164a:	d028      	beq.n	800169e <__aeabi_dsub+0x636>
 800164c:	4662      	mov	r2, ip
 800164e:	9f02      	ldr	r7, [sp, #8]
 8001650:	08c0      	lsrs	r0, r0, #3
 8001652:	433a      	orrs	r2, r7
 8001654:	d100      	bne.n	8001658 <__aeabi_dsub+0x5f0>
 8001656:	e6dc      	b.n	8001412 <__aeabi_dsub+0x3aa>
 8001658:	0762      	lsls	r2, r4, #29
 800165a:	4310      	orrs	r0, r2
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	08e4      	lsrs	r4, r4, #3
 8001660:	0312      	lsls	r2, r2, #12
 8001662:	4214      	tst	r4, r2
 8001664:	d009      	beq.n	800167a <__aeabi_dsub+0x612>
 8001666:	08fd      	lsrs	r5, r7, #3
 8001668:	4215      	tst	r5, r2
 800166a:	d106      	bne.n	800167a <__aeabi_dsub+0x612>
 800166c:	4663      	mov	r3, ip
 800166e:	2601      	movs	r6, #1
 8001670:	002c      	movs	r4, r5
 8001672:	08d8      	lsrs	r0, r3, #3
 8001674:	077b      	lsls	r3, r7, #29
 8001676:	4318      	orrs	r0, r3
 8001678:	400e      	ands	r6, r1
 800167a:	0f42      	lsrs	r2, r0, #29
 800167c:	00c0      	lsls	r0, r0, #3
 800167e:	08c0      	lsrs	r0, r0, #3
 8001680:	0752      	lsls	r2, r2, #29
 8001682:	4302      	orrs	r2, r0
 8001684:	e601      	b.n	800128a <__aeabi_dsub+0x222>
 8001686:	4663      	mov	r3, ip
 8001688:	1a1d      	subs	r5, r3, r0
 800168a:	45ac      	cmp	ip, r5
 800168c:	4192      	sbcs	r2, r2
 800168e:	9b02      	ldr	r3, [sp, #8]
 8001690:	4252      	negs	r2, r2
 8001692:	1b1c      	subs	r4, r3, r4
 8001694:	000e      	movs	r6, r1
 8001696:	4688      	mov	r8, r1
 8001698:	2701      	movs	r7, #1
 800169a:	1aa4      	subs	r4, r4, r2
 800169c:	e546      	b.n	800112c <__aeabi_dsub+0xc4>
 800169e:	4663      	mov	r3, ip
 80016a0:	08d9      	lsrs	r1, r3, #3
 80016a2:	9b02      	ldr	r3, [sp, #8]
 80016a4:	075a      	lsls	r2, r3, #29
 80016a6:	430a      	orrs	r2, r1
 80016a8:	08dc      	lsrs	r4, r3, #3
 80016aa:	e5ee      	b.n	800128a <__aeabi_dsub+0x222>
 80016ac:	4663      	mov	r3, ip
 80016ae:	9c02      	ldr	r4, [sp, #8]
 80016b0:	9303      	str	r3, [sp, #12]
 80016b2:	e6c7      	b.n	8001444 <__aeabi_dsub+0x3dc>
 80016b4:	08c0      	lsrs	r0, r0, #3
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	d100      	bne.n	80016bc <__aeabi_dsub+0x654>
 80016ba:	e6aa      	b.n	8001412 <__aeabi_dsub+0x3aa>
 80016bc:	0762      	lsls	r2, r4, #29
 80016be:	4310      	orrs	r0, r2
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	08e4      	lsrs	r4, r4, #3
 80016c4:	0312      	lsls	r2, r2, #12
 80016c6:	4214      	tst	r4, r2
 80016c8:	d0d7      	beq.n	800167a <__aeabi_dsub+0x612>
 80016ca:	9f02      	ldr	r7, [sp, #8]
 80016cc:	08fd      	lsrs	r5, r7, #3
 80016ce:	4215      	tst	r5, r2
 80016d0:	d1d3      	bne.n	800167a <__aeabi_dsub+0x612>
 80016d2:	4663      	mov	r3, ip
 80016d4:	2601      	movs	r6, #1
 80016d6:	08d8      	lsrs	r0, r3, #3
 80016d8:	077b      	lsls	r3, r7, #29
 80016da:	002c      	movs	r4, r5
 80016dc:	4318      	orrs	r0, r3
 80016de:	400e      	ands	r6, r1
 80016e0:	e7cb      	b.n	800167a <__aeabi_dsub+0x612>
 80016e2:	000a      	movs	r2, r1
 80016e4:	0027      	movs	r7, r4
 80016e6:	3a20      	subs	r2, #32
 80016e8:	40d7      	lsrs	r7, r2
 80016ea:	2920      	cmp	r1, #32
 80016ec:	d005      	beq.n	80016fa <__aeabi_dsub+0x692>
 80016ee:	2240      	movs	r2, #64	@ 0x40
 80016f0:	1a52      	subs	r2, r2, r1
 80016f2:	4094      	lsls	r4, r2
 80016f4:	0025      	movs	r5, r4
 80016f6:	4305      	orrs	r5, r0
 80016f8:	9503      	str	r5, [sp, #12]
 80016fa:	9d03      	ldr	r5, [sp, #12]
 80016fc:	1e6a      	subs	r2, r5, #1
 80016fe:	4195      	sbcs	r5, r2
 8001700:	432f      	orrs	r7, r5
 8001702:	e610      	b.n	8001326 <__aeabi_dsub+0x2be>
 8001704:	0014      	movs	r4, r2
 8001706:	2500      	movs	r5, #0
 8001708:	2200      	movs	r2, #0
 800170a:	e556      	b.n	80011ba <__aeabi_dsub+0x152>
 800170c:	9b02      	ldr	r3, [sp, #8]
 800170e:	4460      	add	r0, ip
 8001710:	4699      	mov	r9, r3
 8001712:	4560      	cmp	r0, ip
 8001714:	4192      	sbcs	r2, r2
 8001716:	444c      	add	r4, r9
 8001718:	4252      	negs	r2, r2
 800171a:	0005      	movs	r5, r0
 800171c:	18a4      	adds	r4, r4, r2
 800171e:	e74c      	b.n	80015ba <__aeabi_dsub+0x552>
 8001720:	001a      	movs	r2, r3
 8001722:	001c      	movs	r4, r3
 8001724:	432a      	orrs	r2, r5
 8001726:	d000      	beq.n	800172a <__aeabi_dsub+0x6c2>
 8001728:	e6b3      	b.n	8001492 <__aeabi_dsub+0x42a>
 800172a:	e6c9      	b.n	80014c0 <__aeabi_dsub+0x458>
 800172c:	2480      	movs	r4, #128	@ 0x80
 800172e:	2600      	movs	r6, #0
 8001730:	0324      	lsls	r4, r4, #12
 8001732:	e5ae      	b.n	8001292 <__aeabi_dsub+0x22a>
 8001734:	2120      	movs	r1, #32
 8001736:	2500      	movs	r5, #0
 8001738:	1a09      	subs	r1, r1, r0
 800173a:	e517      	b.n	800116c <__aeabi_dsub+0x104>
 800173c:	2200      	movs	r2, #0
 800173e:	2500      	movs	r5, #0
 8001740:	4c0b      	ldr	r4, [pc, #44]	@ (8001770 <__aeabi_dsub+0x708>)
 8001742:	e53a      	b.n	80011ba <__aeabi_dsub+0x152>
 8001744:	2d00      	cmp	r5, #0
 8001746:	d100      	bne.n	800174a <__aeabi_dsub+0x6e2>
 8001748:	e5f6      	b.n	8001338 <__aeabi_dsub+0x2d0>
 800174a:	464b      	mov	r3, r9
 800174c:	1bda      	subs	r2, r3, r7
 800174e:	4692      	mov	sl, r2
 8001750:	2f00      	cmp	r7, #0
 8001752:	d100      	bne.n	8001756 <__aeabi_dsub+0x6ee>
 8001754:	e66f      	b.n	8001436 <__aeabi_dsub+0x3ce>
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc05      	bgt.n	8001766 <__aeabi_dsub+0x6fe>
 800175a:	2680      	movs	r6, #128	@ 0x80
 800175c:	0436      	lsls	r6, r6, #16
 800175e:	4334      	orrs	r4, r6
 8001760:	4688      	mov	r8, r1
 8001762:	000e      	movs	r6, r1
 8001764:	e6d1      	b.n	800150a <__aeabi_dsub+0x4a2>
 8001766:	4688      	mov	r8, r1
 8001768:	000e      	movs	r6, r1
 800176a:	2501      	movs	r5, #1
 800176c:	e6de      	b.n	800152c <__aeabi_dsub+0x4c4>
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	000007ff 	.word	0x000007ff
 8001774:	ff7fffff 	.word	0xff7fffff
 8001778:	000007fe 	.word	0x000007fe
 800177c:	2d00      	cmp	r5, #0
 800177e:	d100      	bne.n	8001782 <__aeabi_dsub+0x71a>
 8001780:	e668      	b.n	8001454 <__aeabi_dsub+0x3ec>
 8001782:	464b      	mov	r3, r9
 8001784:	1bd9      	subs	r1, r3, r7
 8001786:	2f00      	cmp	r7, #0
 8001788:	d101      	bne.n	800178e <__aeabi_dsub+0x726>
 800178a:	468a      	mov	sl, r1
 800178c:	e5a7      	b.n	80012de <__aeabi_dsub+0x276>
 800178e:	2701      	movs	r7, #1
 8001790:	2938      	cmp	r1, #56	@ 0x38
 8001792:	dd00      	ble.n	8001796 <__aeabi_dsub+0x72e>
 8001794:	e5c7      	b.n	8001326 <__aeabi_dsub+0x2be>
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	0412      	lsls	r2, r2, #16
 800179a:	4314      	orrs	r4, r2
 800179c:	e5af      	b.n	80012fe <__aeabi_dsub+0x296>
 800179e:	46c0      	nop			@ (mov r8, r8)

080017a0 <__aeabi_d2iz>:
 80017a0:	000b      	movs	r3, r1
 80017a2:	0002      	movs	r2, r0
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	4d16      	ldr	r5, [pc, #88]	@ (8001800 <__aeabi_d2iz+0x60>)
 80017a8:	030c      	lsls	r4, r1, #12
 80017aa:	b082      	sub	sp, #8
 80017ac:	0049      	lsls	r1, r1, #1
 80017ae:	2000      	movs	r0, #0
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	0d49      	lsrs	r1, r1, #21
 80017b8:	0fde      	lsrs	r6, r3, #31
 80017ba:	42a9      	cmp	r1, r5
 80017bc:	dd04      	ble.n	80017c8 <__aeabi_d2iz+0x28>
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <__aeabi_d2iz+0x64>)
 80017c0:	4281      	cmp	r1, r0
 80017c2:	dd03      	ble.n	80017cc <__aeabi_d2iz+0x2c>
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <__aeabi_d2iz+0x68>)
 80017c6:	18f0      	adds	r0, r6, r3
 80017c8:	b002      	add	sp, #8
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	2080      	movs	r0, #128	@ 0x80
 80017ce:	0340      	lsls	r0, r0, #13
 80017d0:	4320      	orrs	r0, r4
 80017d2:	4c0e      	ldr	r4, [pc, #56]	@ (800180c <__aeabi_d2iz+0x6c>)
 80017d4:	1a64      	subs	r4, r4, r1
 80017d6:	2c1f      	cmp	r4, #31
 80017d8:	dd08      	ble.n	80017ec <__aeabi_d2iz+0x4c>
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <__aeabi_d2iz+0x70>)
 80017dc:	1a5b      	subs	r3, r3, r1
 80017de:	40d8      	lsrs	r0, r3
 80017e0:	0003      	movs	r3, r0
 80017e2:	4258      	negs	r0, r3
 80017e4:	2e00      	cmp	r6, #0
 80017e6:	d1ef      	bne.n	80017c8 <__aeabi_d2iz+0x28>
 80017e8:	0018      	movs	r0, r3
 80017ea:	e7ed      	b.n	80017c8 <__aeabi_d2iz+0x28>
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <__aeabi_d2iz+0x74>)
 80017ee:	9a00      	ldr	r2, [sp, #0]
 80017f0:	469c      	mov	ip, r3
 80017f2:	0003      	movs	r3, r0
 80017f4:	4461      	add	r1, ip
 80017f6:	408b      	lsls	r3, r1
 80017f8:	40e2      	lsrs	r2, r4
 80017fa:	4313      	orrs	r3, r2
 80017fc:	e7f1      	b.n	80017e2 <__aeabi_d2iz+0x42>
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	000003fe 	.word	0x000003fe
 8001804:	0000041d 	.word	0x0000041d
 8001808:	7fffffff 	.word	0x7fffffff
 800180c:	00000433 	.word	0x00000433
 8001810:	00000413 	.word	0x00000413
 8001814:	fffffbed 	.word	0xfffffbed

08001818 <__aeabi_ui2d>:
 8001818:	b510      	push	{r4, lr}
 800181a:	1e04      	subs	r4, r0, #0
 800181c:	d010      	beq.n	8001840 <__aeabi_ui2d+0x28>
 800181e:	f000 f85d 	bl	80018dc <__clzsi2>
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <__aeabi_ui2d+0x44>)
 8001824:	1a1b      	subs	r3, r3, r0
 8001826:	055b      	lsls	r3, r3, #21
 8001828:	0d5b      	lsrs	r3, r3, #21
 800182a:	280a      	cmp	r0, #10
 800182c:	dc0f      	bgt.n	800184e <__aeabi_ui2d+0x36>
 800182e:	220b      	movs	r2, #11
 8001830:	0021      	movs	r1, r4
 8001832:	1a12      	subs	r2, r2, r0
 8001834:	40d1      	lsrs	r1, r2
 8001836:	3015      	adds	r0, #21
 8001838:	030a      	lsls	r2, r1, #12
 800183a:	4084      	lsls	r4, r0
 800183c:	0b12      	lsrs	r2, r2, #12
 800183e:	e001      	b.n	8001844 <__aeabi_ui2d+0x2c>
 8001840:	2300      	movs	r3, #0
 8001842:	2200      	movs	r2, #0
 8001844:	051b      	lsls	r3, r3, #20
 8001846:	4313      	orrs	r3, r2
 8001848:	0020      	movs	r0, r4
 800184a:	0019      	movs	r1, r3
 800184c:	bd10      	pop	{r4, pc}
 800184e:	0022      	movs	r2, r4
 8001850:	380b      	subs	r0, #11
 8001852:	4082      	lsls	r2, r0
 8001854:	0312      	lsls	r2, r2, #12
 8001856:	2400      	movs	r4, #0
 8001858:	0b12      	lsrs	r2, r2, #12
 800185a:	e7f3      	b.n	8001844 <__aeabi_ui2d+0x2c>
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_cdrcmple>:
 8001860:	4684      	mov	ip, r0
 8001862:	0010      	movs	r0, r2
 8001864:	4662      	mov	r2, ip
 8001866:	468c      	mov	ip, r1
 8001868:	0019      	movs	r1, r3
 800186a:	4663      	mov	r3, ip
 800186c:	e000      	b.n	8001870 <__aeabi_cdcmpeq>
 800186e:	46c0      	nop			@ (mov r8, r8)

08001870 <__aeabi_cdcmpeq>:
 8001870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001872:	f000 f915 	bl	8001aa0 <__ledf2>
 8001876:	2800      	cmp	r0, #0
 8001878:	d401      	bmi.n	800187e <__aeabi_cdcmpeq+0xe>
 800187a:	2100      	movs	r1, #0
 800187c:	42c8      	cmn	r0, r1
 800187e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001880 <__aeabi_dcmpeq>:
 8001880:	b510      	push	{r4, lr}
 8001882:	f000 f855 	bl	8001930 <__eqdf2>
 8001886:	4240      	negs	r0, r0
 8001888:	3001      	adds	r0, #1
 800188a:	bd10      	pop	{r4, pc}

0800188c <__aeabi_dcmplt>:
 800188c:	b510      	push	{r4, lr}
 800188e:	f000 f907 	bl	8001aa0 <__ledf2>
 8001892:	2800      	cmp	r0, #0
 8001894:	db01      	blt.n	800189a <__aeabi_dcmplt+0xe>
 8001896:	2000      	movs	r0, #0
 8001898:	bd10      	pop	{r4, pc}
 800189a:	2001      	movs	r0, #1
 800189c:	bd10      	pop	{r4, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)

080018a0 <__aeabi_dcmple>:
 80018a0:	b510      	push	{r4, lr}
 80018a2:	f000 f8fd 	bl	8001aa0 <__ledf2>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	dd01      	ble.n	80018ae <__aeabi_dcmple+0xe>
 80018aa:	2000      	movs	r0, #0
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	2001      	movs	r0, #1
 80018b0:	bd10      	pop	{r4, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)

080018b4 <__aeabi_dcmpgt>:
 80018b4:	b510      	push	{r4, lr}
 80018b6:	f000 f87f 	bl	80019b8 <__gedf2>
 80018ba:	2800      	cmp	r0, #0
 80018bc:	dc01      	bgt.n	80018c2 <__aeabi_dcmpgt+0xe>
 80018be:	2000      	movs	r0, #0
 80018c0:	bd10      	pop	{r4, pc}
 80018c2:	2001      	movs	r0, #1
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)

080018c8 <__aeabi_dcmpge>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	f000 f875 	bl	80019b8 <__gedf2>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	da01      	bge.n	80018d6 <__aeabi_dcmpge+0xe>
 80018d2:	2000      	movs	r0, #0
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	2001      	movs	r0, #1
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)

080018dc <__clzsi2>:
 80018dc:	211c      	movs	r1, #28
 80018de:	2301      	movs	r3, #1
 80018e0:	041b      	lsls	r3, r3, #16
 80018e2:	4298      	cmp	r0, r3
 80018e4:	d301      	bcc.n	80018ea <__clzsi2+0xe>
 80018e6:	0c00      	lsrs	r0, r0, #16
 80018e8:	3910      	subs	r1, #16
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	4298      	cmp	r0, r3
 80018ee:	d301      	bcc.n	80018f4 <__clzsi2+0x18>
 80018f0:	0a00      	lsrs	r0, r0, #8
 80018f2:	3908      	subs	r1, #8
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	4298      	cmp	r0, r3
 80018f8:	d301      	bcc.n	80018fe <__clzsi2+0x22>
 80018fa:	0900      	lsrs	r0, r0, #4
 80018fc:	3904      	subs	r1, #4
 80018fe:	a202      	add	r2, pc, #8	@ (adr r2, 8001908 <__clzsi2+0x2c>)
 8001900:	5c10      	ldrb	r0, [r2, r0]
 8001902:	1840      	adds	r0, r0, r1
 8001904:	4770      	bx	lr
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	02020304 	.word	0x02020304
 800190c:	01010101 	.word	0x01010101
	...

08001918 <__clzdi2>:
 8001918:	b510      	push	{r4, lr}
 800191a:	2900      	cmp	r1, #0
 800191c:	d103      	bne.n	8001926 <__clzdi2+0xe>
 800191e:	f7ff ffdd 	bl	80018dc <__clzsi2>
 8001922:	3020      	adds	r0, #32
 8001924:	e002      	b.n	800192c <__clzdi2+0x14>
 8001926:	0008      	movs	r0, r1
 8001928:	f7ff ffd8 	bl	80018dc <__clzsi2>
 800192c:	bd10      	pop	{r4, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)

08001930 <__eqdf2>:
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001932:	4657      	mov	r7, sl
 8001934:	46de      	mov	lr, fp
 8001936:	464e      	mov	r6, r9
 8001938:	4645      	mov	r5, r8
 800193a:	b5e0      	push	{r5, r6, r7, lr}
 800193c:	000d      	movs	r5, r1
 800193e:	0004      	movs	r4, r0
 8001940:	0fe8      	lsrs	r0, r5, #31
 8001942:	4683      	mov	fp, r0
 8001944:	0309      	lsls	r1, r1, #12
 8001946:	0fd8      	lsrs	r0, r3, #31
 8001948:	0b09      	lsrs	r1, r1, #12
 800194a:	4682      	mov	sl, r0
 800194c:	4819      	ldr	r0, [pc, #100]	@ (80019b4 <__eqdf2+0x84>)
 800194e:	468c      	mov	ip, r1
 8001950:	031f      	lsls	r7, r3, #12
 8001952:	0069      	lsls	r1, r5, #1
 8001954:	005e      	lsls	r6, r3, #1
 8001956:	0d49      	lsrs	r1, r1, #21
 8001958:	0b3f      	lsrs	r7, r7, #12
 800195a:	0d76      	lsrs	r6, r6, #21
 800195c:	4281      	cmp	r1, r0
 800195e:	d018      	beq.n	8001992 <__eqdf2+0x62>
 8001960:	4286      	cmp	r6, r0
 8001962:	d00f      	beq.n	8001984 <__eqdf2+0x54>
 8001964:	2001      	movs	r0, #1
 8001966:	42b1      	cmp	r1, r6
 8001968:	d10d      	bne.n	8001986 <__eqdf2+0x56>
 800196a:	45bc      	cmp	ip, r7
 800196c:	d10b      	bne.n	8001986 <__eqdf2+0x56>
 800196e:	4294      	cmp	r4, r2
 8001970:	d109      	bne.n	8001986 <__eqdf2+0x56>
 8001972:	45d3      	cmp	fp, sl
 8001974:	d01c      	beq.n	80019b0 <__eqdf2+0x80>
 8001976:	2900      	cmp	r1, #0
 8001978:	d105      	bne.n	8001986 <__eqdf2+0x56>
 800197a:	4660      	mov	r0, ip
 800197c:	4320      	orrs	r0, r4
 800197e:	1e43      	subs	r3, r0, #1
 8001980:	4198      	sbcs	r0, r3
 8001982:	e000      	b.n	8001986 <__eqdf2+0x56>
 8001984:	2001      	movs	r0, #1
 8001986:	bcf0      	pop	{r4, r5, r6, r7}
 8001988:	46bb      	mov	fp, r7
 800198a:	46b2      	mov	sl, r6
 800198c:	46a9      	mov	r9, r5
 800198e:	46a0      	mov	r8, r4
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001992:	2001      	movs	r0, #1
 8001994:	428e      	cmp	r6, r1
 8001996:	d1f6      	bne.n	8001986 <__eqdf2+0x56>
 8001998:	4661      	mov	r1, ip
 800199a:	4339      	orrs	r1, r7
 800199c:	000f      	movs	r7, r1
 800199e:	4317      	orrs	r7, r2
 80019a0:	4327      	orrs	r7, r4
 80019a2:	d1f0      	bne.n	8001986 <__eqdf2+0x56>
 80019a4:	465b      	mov	r3, fp
 80019a6:	4652      	mov	r2, sl
 80019a8:	1a98      	subs	r0, r3, r2
 80019aa:	1e43      	subs	r3, r0, #1
 80019ac:	4198      	sbcs	r0, r3
 80019ae:	e7ea      	b.n	8001986 <__eqdf2+0x56>
 80019b0:	2000      	movs	r0, #0
 80019b2:	e7e8      	b.n	8001986 <__eqdf2+0x56>
 80019b4:	000007ff 	.word	0x000007ff

080019b8 <__gedf2>:
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	4657      	mov	r7, sl
 80019bc:	464e      	mov	r6, r9
 80019be:	4645      	mov	r5, r8
 80019c0:	46de      	mov	lr, fp
 80019c2:	b5e0      	push	{r5, r6, r7, lr}
 80019c4:	000d      	movs	r5, r1
 80019c6:	030f      	lsls	r7, r1, #12
 80019c8:	0b39      	lsrs	r1, r7, #12
 80019ca:	b083      	sub	sp, #12
 80019cc:	0004      	movs	r4, r0
 80019ce:	4680      	mov	r8, r0
 80019d0:	9101      	str	r1, [sp, #4]
 80019d2:	0058      	lsls	r0, r3, #1
 80019d4:	0fe9      	lsrs	r1, r5, #31
 80019d6:	4f31      	ldr	r7, [pc, #196]	@ (8001a9c <__gedf2+0xe4>)
 80019d8:	0d40      	lsrs	r0, r0, #21
 80019da:	468c      	mov	ip, r1
 80019dc:	006e      	lsls	r6, r5, #1
 80019de:	0319      	lsls	r1, r3, #12
 80019e0:	4682      	mov	sl, r0
 80019e2:	4691      	mov	r9, r2
 80019e4:	0d76      	lsrs	r6, r6, #21
 80019e6:	0b09      	lsrs	r1, r1, #12
 80019e8:	0fd8      	lsrs	r0, r3, #31
 80019ea:	42be      	cmp	r6, r7
 80019ec:	d01f      	beq.n	8001a2e <__gedf2+0x76>
 80019ee:	45ba      	cmp	sl, r7
 80019f0:	d00f      	beq.n	8001a12 <__gedf2+0x5a>
 80019f2:	2e00      	cmp	r6, #0
 80019f4:	d12f      	bne.n	8001a56 <__gedf2+0x9e>
 80019f6:	4655      	mov	r5, sl
 80019f8:	9e01      	ldr	r6, [sp, #4]
 80019fa:	4334      	orrs	r4, r6
 80019fc:	2d00      	cmp	r5, #0
 80019fe:	d127      	bne.n	8001a50 <__gedf2+0x98>
 8001a00:	430a      	orrs	r2, r1
 8001a02:	d03a      	beq.n	8001a7a <__gedf2+0xc2>
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d145      	bne.n	8001a94 <__gedf2+0xdc>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d11a      	bne.n	8001a42 <__gedf2+0x8a>
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	4240      	negs	r0, r0
 8001a10:	e017      	b.n	8001a42 <__gedf2+0x8a>
 8001a12:	4311      	orrs	r1, r2
 8001a14:	d13b      	bne.n	8001a8e <__gedf2+0xd6>
 8001a16:	2e00      	cmp	r6, #0
 8001a18:	d102      	bne.n	8001a20 <__gedf2+0x68>
 8001a1a:	9f01      	ldr	r7, [sp, #4]
 8001a1c:	4327      	orrs	r7, r4
 8001a1e:	d0f3      	beq.n	8001a08 <__gedf2+0x50>
 8001a20:	4584      	cmp	ip, r0
 8001a22:	d109      	bne.n	8001a38 <__gedf2+0x80>
 8001a24:	4663      	mov	r3, ip
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <__gedf2+0x54>
 8001a2a:	4660      	mov	r0, ip
 8001a2c:	e009      	b.n	8001a42 <__gedf2+0x8a>
 8001a2e:	9f01      	ldr	r7, [sp, #4]
 8001a30:	4327      	orrs	r7, r4
 8001a32:	d12c      	bne.n	8001a8e <__gedf2+0xd6>
 8001a34:	45b2      	cmp	sl, r6
 8001a36:	d024      	beq.n	8001a82 <__gedf2+0xca>
 8001a38:	4663      	mov	r3, ip
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	4018      	ands	r0, r3
 8001a40:	3801      	subs	r0, #1
 8001a42:	b003      	add	sp, #12
 8001a44:	bcf0      	pop	{r4, r5, r6, r7}
 8001a46:	46bb      	mov	fp, r7
 8001a48:	46b2      	mov	sl, r6
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	46a0      	mov	r8, r4
 8001a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a50:	2c00      	cmp	r4, #0
 8001a52:	d0d9      	beq.n	8001a08 <__gedf2+0x50>
 8001a54:	e7e4      	b.n	8001a20 <__gedf2+0x68>
 8001a56:	4654      	mov	r4, sl
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d0ed      	beq.n	8001a38 <__gedf2+0x80>
 8001a5c:	4584      	cmp	ip, r0
 8001a5e:	d1eb      	bne.n	8001a38 <__gedf2+0x80>
 8001a60:	4556      	cmp	r6, sl
 8001a62:	dce9      	bgt.n	8001a38 <__gedf2+0x80>
 8001a64:	dbde      	blt.n	8001a24 <__gedf2+0x6c>
 8001a66:	9b01      	ldr	r3, [sp, #4]
 8001a68:	428b      	cmp	r3, r1
 8001a6a:	d8e5      	bhi.n	8001a38 <__gedf2+0x80>
 8001a6c:	d1da      	bne.n	8001a24 <__gedf2+0x6c>
 8001a6e:	45c8      	cmp	r8, r9
 8001a70:	d8e2      	bhi.n	8001a38 <__gedf2+0x80>
 8001a72:	2000      	movs	r0, #0
 8001a74:	45c8      	cmp	r8, r9
 8001a76:	d2e4      	bcs.n	8001a42 <__gedf2+0x8a>
 8001a78:	e7d4      	b.n	8001a24 <__gedf2+0x6c>
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	2c00      	cmp	r4, #0
 8001a7e:	d0e0      	beq.n	8001a42 <__gedf2+0x8a>
 8001a80:	e7da      	b.n	8001a38 <__gedf2+0x80>
 8001a82:	4311      	orrs	r1, r2
 8001a84:	d103      	bne.n	8001a8e <__gedf2+0xd6>
 8001a86:	4584      	cmp	ip, r0
 8001a88:	d1d6      	bne.n	8001a38 <__gedf2+0x80>
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	e7d9      	b.n	8001a42 <__gedf2+0x8a>
 8001a8e:	2002      	movs	r0, #2
 8001a90:	4240      	negs	r0, r0
 8001a92:	e7d6      	b.n	8001a42 <__gedf2+0x8a>
 8001a94:	4584      	cmp	ip, r0
 8001a96:	d0e6      	beq.n	8001a66 <__gedf2+0xae>
 8001a98:	e7ce      	b.n	8001a38 <__gedf2+0x80>
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	000007ff 	.word	0x000007ff

08001aa0 <__ledf2>:
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa2:	4657      	mov	r7, sl
 8001aa4:	464e      	mov	r6, r9
 8001aa6:	4645      	mov	r5, r8
 8001aa8:	46de      	mov	lr, fp
 8001aaa:	b5e0      	push	{r5, r6, r7, lr}
 8001aac:	000d      	movs	r5, r1
 8001aae:	030f      	lsls	r7, r1, #12
 8001ab0:	0004      	movs	r4, r0
 8001ab2:	4680      	mov	r8, r0
 8001ab4:	0fe8      	lsrs	r0, r5, #31
 8001ab6:	0b39      	lsrs	r1, r7, #12
 8001ab8:	4684      	mov	ip, r0
 8001aba:	b083      	sub	sp, #12
 8001abc:	0058      	lsls	r0, r3, #1
 8001abe:	4f30      	ldr	r7, [pc, #192]	@ (8001b80 <__ledf2+0xe0>)
 8001ac0:	0d40      	lsrs	r0, r0, #21
 8001ac2:	9101      	str	r1, [sp, #4]
 8001ac4:	031e      	lsls	r6, r3, #12
 8001ac6:	0069      	lsls	r1, r5, #1
 8001ac8:	4682      	mov	sl, r0
 8001aca:	4691      	mov	r9, r2
 8001acc:	0d49      	lsrs	r1, r1, #21
 8001ace:	0b36      	lsrs	r6, r6, #12
 8001ad0:	0fd8      	lsrs	r0, r3, #31
 8001ad2:	42b9      	cmp	r1, r7
 8001ad4:	d020      	beq.n	8001b18 <__ledf2+0x78>
 8001ad6:	45ba      	cmp	sl, r7
 8001ad8:	d00f      	beq.n	8001afa <__ledf2+0x5a>
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d12b      	bne.n	8001b36 <__ledf2+0x96>
 8001ade:	9901      	ldr	r1, [sp, #4]
 8001ae0:	430c      	orrs	r4, r1
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	d137      	bne.n	8001b58 <__ledf2+0xb8>
 8001ae8:	4332      	orrs	r2, r6
 8001aea:	d038      	beq.n	8001b5e <__ledf2+0xbe>
 8001aec:	2c00      	cmp	r4, #0
 8001aee:	d144      	bne.n	8001b7a <__ledf2+0xda>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d119      	bne.n	8001b28 <__ledf2+0x88>
 8001af4:	2001      	movs	r0, #1
 8001af6:	4240      	negs	r0, r0
 8001af8:	e016      	b.n	8001b28 <__ledf2+0x88>
 8001afa:	4316      	orrs	r6, r2
 8001afc:	d113      	bne.n	8001b26 <__ledf2+0x86>
 8001afe:	2900      	cmp	r1, #0
 8001b00:	d102      	bne.n	8001b08 <__ledf2+0x68>
 8001b02:	9f01      	ldr	r7, [sp, #4]
 8001b04:	4327      	orrs	r7, r4
 8001b06:	d0f3      	beq.n	8001af0 <__ledf2+0x50>
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d020      	beq.n	8001b4e <__ledf2+0xae>
 8001b0c:	4663      	mov	r3, ip
 8001b0e:	2002      	movs	r0, #2
 8001b10:	3b01      	subs	r3, #1
 8001b12:	4018      	ands	r0, r3
 8001b14:	3801      	subs	r0, #1
 8001b16:	e007      	b.n	8001b28 <__ledf2+0x88>
 8001b18:	9f01      	ldr	r7, [sp, #4]
 8001b1a:	4327      	orrs	r7, r4
 8001b1c:	d103      	bne.n	8001b26 <__ledf2+0x86>
 8001b1e:	458a      	cmp	sl, r1
 8001b20:	d1f4      	bne.n	8001b0c <__ledf2+0x6c>
 8001b22:	4316      	orrs	r6, r2
 8001b24:	d01f      	beq.n	8001b66 <__ledf2+0xc6>
 8001b26:	2002      	movs	r0, #2
 8001b28:	b003      	add	sp, #12
 8001b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	46b2      	mov	sl, r6
 8001b30:	46a9      	mov	r9, r5
 8001b32:	46a0      	mov	r8, r4
 8001b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b36:	4654      	mov	r4, sl
 8001b38:	2c00      	cmp	r4, #0
 8001b3a:	d0e7      	beq.n	8001b0c <__ledf2+0x6c>
 8001b3c:	4584      	cmp	ip, r0
 8001b3e:	d1e5      	bne.n	8001b0c <__ledf2+0x6c>
 8001b40:	4551      	cmp	r1, sl
 8001b42:	dce3      	bgt.n	8001b0c <__ledf2+0x6c>
 8001b44:	db03      	blt.n	8001b4e <__ledf2+0xae>
 8001b46:	9b01      	ldr	r3, [sp, #4]
 8001b48:	42b3      	cmp	r3, r6
 8001b4a:	d8df      	bhi.n	8001b0c <__ledf2+0x6c>
 8001b4c:	d00f      	beq.n	8001b6e <__ledf2+0xce>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0cf      	beq.n	8001af4 <__ledf2+0x54>
 8001b54:	4660      	mov	r0, ip
 8001b56:	e7e7      	b.n	8001b28 <__ledf2+0x88>
 8001b58:	2c00      	cmp	r4, #0
 8001b5a:	d0c9      	beq.n	8001af0 <__ledf2+0x50>
 8001b5c:	e7d4      	b.n	8001b08 <__ledf2+0x68>
 8001b5e:	2000      	movs	r0, #0
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	d0e1      	beq.n	8001b28 <__ledf2+0x88>
 8001b64:	e7d2      	b.n	8001b0c <__ledf2+0x6c>
 8001b66:	4584      	cmp	ip, r0
 8001b68:	d1d0      	bne.n	8001b0c <__ledf2+0x6c>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	e7dc      	b.n	8001b28 <__ledf2+0x88>
 8001b6e:	45c8      	cmp	r8, r9
 8001b70:	d8cc      	bhi.n	8001b0c <__ledf2+0x6c>
 8001b72:	2000      	movs	r0, #0
 8001b74:	45c8      	cmp	r8, r9
 8001b76:	d2d7      	bcs.n	8001b28 <__ledf2+0x88>
 8001b78:	e7e9      	b.n	8001b4e <__ledf2+0xae>
 8001b7a:	4584      	cmp	ip, r0
 8001b7c:	d0e3      	beq.n	8001b46 <__ledf2+0xa6>
 8001b7e:	e7c5      	b.n	8001b0c <__ledf2+0x6c>
 8001b80:	000007ff 	.word	0x000007ff

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b09b      	sub	sp, #108	@ 0x6c
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8a:	f000 faf7 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8e:	f000 f8b1 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b92:	f000 f9a5 	bl	8001ee0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b96:	f000 f91f 	bl	8001dd8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b9a:	f000 f971 	bl	8001e80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd0 <main+0x14c>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f001 fd7f 	bl	80036a4 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	0099      	lsls	r1, r3, #2
 8001baa:	23a0      	movs	r3, #160	@ 0xa0
 8001bac:	05db      	lsls	r3, r3, #23
 8001bae:	2200      	movs	r2, #0
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 fdc6 	bl	8002742 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	0099      	lsls	r1, r3, #2
 8001bba:	23a0      	movs	r3, #160	@ 0xa0
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fdbe 	bl	8002742 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001bc6:	4b42      	ldr	r3, [pc, #264]	@ (8001cd0 <main+0x14c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd0 <main+0x14c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	2b09      	cmp	r3, #9
 8001bd8:	d9fa      	bls.n	8001bd0 <main+0x4c>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	0099      	lsls	r1, r3, #2
 8001bde:	23a0      	movs	r3, #160	@ 0xa0
 8001be0:	05db      	lsls	r3, r3, #23
 8001be2:	2200      	movs	r2, #0
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 fdac 	bl	8002742 <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001bea:	f000 fb2d 	bl	8002248 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <main+0x150>)
 8001bf2:	601a      	str	r2, [r3, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	005a      	lsls	r2, r3, #1
 8001bfa:	23a0      	movs	r3, #160	@ 0xa0
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	0011      	movs	r1, r2
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 fd81 	bl	8002708 <HAL_GPIO_ReadPin>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d108      	bne.n	8001c1c <main+0x98>
 8001c0a:	4b32      	ldr	r3, [pc, #200]	@ (8001cd4 <main+0x150>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330a      	adds	r3, #10
 8001c10:	001c      	movs	r4, r3
 8001c12:	f000 fb19 	bl	8002248 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	d8ec      	bhi.n	8001bf6 <main+0x72>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd0 <main+0x14c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <main+0x154>)
 8001c24:	601a      	str	r2, [r3, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001c26:	f000 fb0f 	bl	8002248 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <main+0x150>)
 8001c2e:	601a      	str	r2, [r3, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	005a      	lsls	r2, r3, #1
 8001c36:	23a0      	movs	r3, #160	@ 0xa0
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fd63 	bl	8002708 <HAL_GPIO_ReadPin>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d008      	beq.n	8001c58 <main+0xd4>
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <main+0x150>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3332      	adds	r3, #50	@ 0x32
 8001c4c:	001c      	movs	r4, r3
 8001c4e:	f000 fafb 	bl	8002248 <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	429c      	cmp	r4, r3
 8001c56:	d8ec      	bhi.n	8001c32 <main+0xae>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 8001c58:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <main+0x14c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <main+0x158>)
 8001c60:	601a      	str	r2, [r3, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <main+0x158>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <main+0x154>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fdd3 	bl	8001818 <__aeabi_ui2d>
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <main+0x15c>)
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <main+0x160>)
 8001c76:	f7fe ff2f 	bl	8000ad8 <__aeabi_dmul>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	000b      	movs	r3, r1
 8001c7e:	0010      	movs	r0, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	2200      	movs	r2, #0
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	05db      	lsls	r3, r3, #23
 8001c88:	f7fe fc0c 	bl	80004a4 <__aeabi_ddiv>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	000b      	movs	r3, r1
 8001c90:	0010      	movs	r0, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	f7fe fb1c 	bl	80002d0 <__aeabi_d2uiz>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <main+0x164>)
 8001c9e:	801a      	strh	r2, [r3, #0]
	      HAL_Delay(50);
 8001ca0:	2032      	movs	r0, #50	@ 0x32
 8001ca2:	f000 fadb 	bl	800225c <HAL_Delay>
	      char cho[100];
	      sprintf(cho,"dista= %d",Distance);
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <main+0x164>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	001a      	movs	r2, r3
 8001cac:	490f      	ldr	r1, [pc, #60]	@ (8001cec <main+0x168>)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f002 fd27 	bl	8004704 <siprintf>
	      HAL_UART_Transmit(&huart2,(uint8_t *)cho,sizeof(cho),10);
 8001cb6:	1d39      	adds	r1, r7, #4
 8001cb8:	480d      	ldr	r0, [pc, #52]	@ (8001cf0 <main+0x16c>)
 8001cba:	230a      	movs	r3, #10
 8001cbc:	2264      	movs	r2, #100	@ 0x64
 8001cbe:	f001 ffb9 	bl	8003c34 <HAL_UART_Transmit>
	      HAL_Delay(2000);
 8001cc2:	23fa      	movs	r3, #250	@ 0xfa
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 fac8 	bl	800225c <HAL_Delay>
  {
 8001ccc:	e773      	b.n	8001bb6 <main+0x32>
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	20000078 	.word	0x20000078
 8001cd4:	20000140 	.word	0x20000140
 8001cd8:	20000144 	.word	0x20000144
 8001cdc:	20000148 	.word	0x20000148
 8001ce0:	b020c49c 	.word	0xb020c49c
 8001ce4:	3fa16872 	.word	0x3fa16872
 8001ce8:	2000014c 	.word	0x2000014c
 8001cec:	08005058 	.word	0x08005058
 8001cf0:	200000b8 	.word	0x200000b8

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b09d      	sub	sp, #116	@ 0x74
 8001cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	2438      	movs	r4, #56	@ 0x38
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	0018      	movs	r0, r3
 8001d00:	2338      	movs	r3, #56	@ 0x38
 8001d02:	001a      	movs	r2, r3
 8001d04:	2100      	movs	r1, #0
 8001d06:	f002 fd1d 	bl	8004744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0a:	2324      	movs	r3, #36	@ 0x24
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	0018      	movs	r0, r3
 8001d10:	2314      	movs	r3, #20
 8001d12:	001a      	movs	r2, r3
 8001d14:	2100      	movs	r1, #0
 8001d16:	f002 fd15 	bl	8004744 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1a:	003b      	movs	r3, r7
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	2324      	movs	r3, #36	@ 0x24
 8001d20:	001a      	movs	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	f002 fd0e 	bl	8004744 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d28:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <SystemClock_Config+0xdc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a29      	ldr	r2, [pc, #164]	@ (8001dd4 <SystemClock_Config+0xe0>)
 8001d2e:	401a      	ands	r2, r3
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <SystemClock_Config+0xdc>)
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	0109      	lsls	r1, r1, #4
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d3a:	0021      	movs	r1, r4
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2202      	movs	r2, #2
 8001d40:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2201      	movs	r2, #1
 8001d46:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2202      	movs	r2, #2
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2200      	movs	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2280      	movs	r2, #128	@ 0x80
 8001d5e:	0312      	lsls	r2, r2, #12
 8001d60:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	0412      	lsls	r2, r2, #16
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 fd05 	bl	800277c <HAL_RCC_OscConfig>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001d76:	f000 f90b 	bl	8001f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7a:	2124      	movs	r1, #36	@ 0x24
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	220f      	movs	r2, #15
 8001d80:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2203      	movs	r2, #3
 8001d86:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f001 f8c0 	bl	8002f24 <HAL_RCC_ClockConfig>
 8001da4:	1e03      	subs	r3, r0, #0
 8001da6:	d001      	beq.n	8001dac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001da8:	f000 f8f2 	bl	8001f90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dac:	003b      	movs	r3, r7
 8001dae:	2202      	movs	r2, #2
 8001db0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001db2:	003b      	movs	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	003b      	movs	r3, r7
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f001 fad6 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001dc4:	f000 f8e4 	bl	8001f90 <Error_Handler>
  }
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b01d      	add	sp, #116	@ 0x74
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	ffffe7ff 	.word	0xffffe7ff

08001dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	2308      	movs	r3, #8
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	0018      	movs	r0, r3
 8001de4:	2310      	movs	r3, #16
 8001de6:	001a      	movs	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	f002 fcab 	bl	8004744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dee:	003b      	movs	r3, r7
 8001df0:	0018      	movs	r0, r3
 8001df2:	2308      	movs	r3, #8
 8001df4:	001a      	movs	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f002 fca4 	bl	8004744 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001dfe:	2280      	movs	r2, #128	@ 0x80
 8001e00:	05d2      	lsls	r2, r2, #23
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001e04:	4b1c      	ldr	r3, [pc, #112]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e06:	2247      	movs	r2, #71	@ 0x47
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e12:	4a1a      	ldr	r2, [pc, #104]	@ (8001e7c <MX_TIM2_Init+0xa4>)
 8001e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f001 fbfd 	bl	8003624 <HAL_TIM_Base_Init>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e2e:	f000 f8af 	bl	8001f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	2108      	movs	r1, #8
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2280      	movs	r2, #128	@ 0x80
 8001e38:	0152      	lsls	r2, r2, #5
 8001e3a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3c:	187a      	adds	r2, r7, r1
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e40:	0011      	movs	r1, r2
 8001e42:	0018      	movs	r0, r3
 8001e44:	f001 fc78 	bl	8003738 <HAL_TIM_ConfigClockSource>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001e4c:	f000 f8a0 	bl	8001f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	003b      	movs	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e56:	003b      	movs	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e5c:	003a      	movs	r2, r7
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <MX_TIM2_Init+0xa0>)
 8001e60:	0011      	movs	r1, r2
 8001e62:	0018      	movs	r0, r3
 8001e64:	f001 fe34 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e6c:	f000 f890 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b006      	add	sp, #24
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000078 	.word	0x20000078
 8001e7c:	0000ffff 	.word	0x0000ffff

08001e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001e86:	4a15      	ldr	r2, [pc, #84]	@ (8001edc <MX_USART2_UART_Init+0x5c>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001e8c:	22e1      	movs	r2, #225	@ 0xe1
 8001e8e:	0252      	lsls	r2, r2, #9
 8001e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <MX_USART2_UART_Init+0x58>)
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f001 fe61 	bl	8003b8c <HAL_UART_Init>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ece:	f000 f85f 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200000b8 	.word	0x200000b8
 8001edc:	40004400 	.word	0x40004400

08001ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	240c      	movs	r4, #12
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	0018      	movs	r0, r3
 8001eec:	2314      	movs	r3, #20
 8001eee:	001a      	movs	r2, r3
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f002 fc27 	bl	8004744 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <MX_GPIO_Init+0xac>)
 8001ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001efa:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <MX_GPIO_Init+0xac>)
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <MX_GPIO_Init+0xac>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <MX_GPIO_Init+0xac>)
 8001f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <MX_GPIO_Init+0xac>)
 8001f14:	2180      	movs	r1, #128	@ 0x80
 8001f16:	430a      	orrs	r2, r1
 8001f18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <MX_GPIO_Init+0xac>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	4013      	ands	r3, r2
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	0099      	lsls	r1, r3, #2
 8001f2a:	23a0      	movs	r3, #160	@ 0xa0
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	2200      	movs	r2, #0
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 fc06 	bl	8002742 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	2280      	movs	r2, #128	@ 0x80
 8001f3a:	0052      	lsls	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	193a      	adds	r2, r7, r4
 8001f4c:	23a0      	movs	r3, #160	@ 0xa0
 8001f4e:	05db      	lsls	r3, r3, #23
 8001f50:	0011      	movs	r1, r2
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 fa5a 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f58:	0021      	movs	r1, r4
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2280      	movs	r2, #128	@ 0x80
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2201      	movs	r2, #1
 8001f66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	187a      	adds	r2, r7, r1
 8001f76:	23a0      	movs	r3, #160	@ 0xa0
 8001f78:	05db      	lsls	r3, r3, #23
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 fa45 	bl	800240c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b009      	add	sp, #36	@ 0x24
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	40021000 	.word	0x40021000

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	e7fd      	b.n	8001f98 <Error_Handler+0x8>

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_MspInit+0x24>)
 8001fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_MspInit+0x24>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <HAL_MspInit+0x24>)
 8001fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_MspInit+0x24>)
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0549      	lsls	r1, r1, #21
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	05db      	lsls	r3, r3, #23
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d105      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <HAL_TIM_Base_MspInit+0x28>)
 8001fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fdc:	4b03      	ldr	r3, [pc, #12]	@ (8001fec <HAL_TIM_Base_MspInit+0x28>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b089      	sub	sp, #36	@ 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	240c      	movs	r4, #12
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	2314      	movs	r3, #20
 8002000:	001a      	movs	r2, r3
 8002002:	2100      	movs	r1, #0
 8002004:	f002 fb9e 	bl	8004744 <memset>
  if(huart->Instance==USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_UART_MspInit+0x80>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d129      	bne.n	8002066 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <HAL_UART_MspInit+0x84>)
 8002014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002016:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <HAL_UART_MspInit+0x84>)
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0289      	lsls	r1, r1, #10
 800201c:	430a      	orrs	r2, r1
 800201e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HAL_UART_MspInit+0x84>)
 8002022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_UART_MspInit+0x84>)
 8002026:	2101      	movs	r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_UART_MspInit+0x84>)
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8002038:	0021      	movs	r1, r4
 800203a:	187b      	adds	r3, r7, r1
 800203c:	4a0e      	ldr	r2, [pc, #56]	@ (8002078 <HAL_UART_MspInit+0x88>)
 800203e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2202      	movs	r2, #2
 8002044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2203      	movs	r2, #3
 8002050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2204      	movs	r2, #4
 8002056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	187a      	adds	r2, r7, r1
 800205a:	23a0      	movs	r3, #160	@ 0xa0
 800205c:	05db      	lsls	r3, r3, #23
 800205e:	0011      	movs	r1, r2
 8002060:	0018      	movs	r0, r3
 8002062:	f000 f9d3 	bl	800240c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b009      	add	sp, #36	@ 0x24
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	40004400 	.word	0x40004400
 8002074:	40021000 	.word	0x40021000
 8002078:	00008004 	.word	0x00008004

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002080:	46c0      	nop			@ (mov r8, r8)
 8002082:	e7fd      	b.n	8002080 <NMI_Handler+0x4>

08002084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	e7fd      	b.n	8002088 <HardFault_Handler+0x4>

0800208c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a4:	f000 f8be 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <_sbrk+0x5c>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <_sbrk+0x60>)
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <_sbrk+0x64>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <_sbrk+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	18d3      	adds	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e0:	f002 fb38 	bl	8004754 <__errno>
 80020e4:	0003      	movs	r3, r0
 80020e6:	220c      	movs	r2, #12
 80020e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	425b      	negs	r3, r3
 80020ee:	e009      	b.n	8002104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	18d2      	adds	r2, r2, r3
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <_sbrk+0x64>)
 8002100:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b006      	add	sp, #24
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20005000 	.word	0x20005000
 8002110:	00000400 	.word	0x00000400
 8002114:	20000150 	.word	0x20000150
 8002118:	200002a0 	.word	0x200002a0

0800211c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002128:	480d      	ldr	r0, [pc, #52]	@ (8002160 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800212a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800212c:	f7ff fff6 	bl	800211c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <LoopForever+0x6>)
  ldr r1, =_edata
 8002132:	490d      	ldr	r1, [pc, #52]	@ (8002168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LoopForever+0xe>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002148:	4c0a      	ldr	r4, [pc, #40]	@ (8002174 <LoopForever+0x16>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002156:	f002 fb03 	bl	8004760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff fd13 	bl	8001b84 <main>

0800215e <LoopForever>:

LoopForever:
    b LoopForever
 800215e:	e7fe      	b.n	800215e <LoopForever>
   ldr   r0, =_estack
 8002160:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002168:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800216c:	08005154 	.word	0x08005154
  ldr r2, =_sbss
 8002170:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002174:	200002a0 	.word	0x200002a0

08002178 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC1_COMP_IRQHandler>
	...

0800217c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_Init+0x3c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_Init+0x3c>)
 800218e:	2140      	movs	r1, #64	@ 0x40
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002194:	2000      	movs	r0, #0
 8002196:	f000 f811 	bl	80021bc <HAL_InitTick>
 800219a:	1e03      	subs	r3, r0, #0
 800219c:	d003      	beq.n	80021a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e001      	b.n	80021aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021a6:	f7ff fef9 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_InitTick+0x5c>)
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_InitTick+0x60>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	0019      	movs	r1, r3
 80021ce:	23fa      	movs	r3, #250	@ 0xfa
 80021d0:	0098      	lsls	r0, r3, #2
 80021d2:	f7fd ffa3 	bl	800011c <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	0019      	movs	r1, r3
 80021da:	0020      	movs	r0, r4
 80021dc:	f7fd ff9e 	bl	800011c <__udivsi3>
 80021e0:	0003      	movs	r3, r0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f905 	bl	80023f2 <HAL_SYSTICK_Config>
 80021e8:	1e03      	subs	r3, r0, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e00f      	b.n	8002210 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d80b      	bhi.n	800220e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	2301      	movs	r3, #1
 80021fa:	425b      	negs	r3, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f8e2 	bl	80023c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_InitTick+0x64>)
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b003      	add	sp, #12
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	20000000 	.word	0x20000000
 800221c:	20000008 	.word	0x20000008
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <HAL_IncTick+0x1c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	001a      	movs	r2, r3
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_IncTick+0x20>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	18d2      	adds	r2, r2, r3
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_IncTick+0x20>)
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			@ (mov r8, r8)
 8002240:	20000008 	.word	0x20000008
 8002244:	20000154 	.word	0x20000154

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <HAL_GetTick+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	20000154 	.word	0x20000154

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff fff0 	bl	8002248 <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3301      	adds	r3, #1
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	001a      	movs	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	189b      	adds	r3, r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	f7ff ffe0 	bl	8002248 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b004      	add	sp, #16
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	20000008 	.word	0x20000008

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0002      	movs	r2, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80022b8:	d828      	bhi.n	800230c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <__NVIC_SetPriority+0xd4>)
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	33c0      	adds	r3, #192	@ 0xc0
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	589b      	ldr	r3, [r3, r2]
 80022ca:	1dfa      	adds	r2, r7, #7
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	0011      	movs	r1, r2
 80022d0:	2203      	movs	r2, #3
 80022d2:	400a      	ands	r2, r1
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	21ff      	movs	r1, #255	@ 0xff
 80022d8:	4091      	lsls	r1, r2
 80022da:	000a      	movs	r2, r1
 80022dc:	43d2      	mvns	r2, r2
 80022de:	401a      	ands	r2, r3
 80022e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	22ff      	movs	r2, #255	@ 0xff
 80022e8:	401a      	ands	r2, r3
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	0018      	movs	r0, r3
 80022f0:	2303      	movs	r3, #3
 80022f2:	4003      	ands	r3, r0
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022f8:	481f      	ldr	r0, [pc, #124]	@ (8002378 <__NVIC_SetPriority+0xd4>)
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	430a      	orrs	r2, r1
 8002304:	33c0      	adds	r3, #192	@ 0xc0
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800230a:	e031      	b.n	8002370 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800230c:	4a1b      	ldr	r2, [pc, #108]	@ (800237c <__NVIC_SetPriority+0xd8>)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	0019      	movs	r1, r3
 8002314:	230f      	movs	r3, #15
 8002316:	400b      	ands	r3, r1
 8002318:	3b08      	subs	r3, #8
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3306      	adds	r3, #6
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	3304      	adds	r3, #4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1dfa      	adds	r2, r7, #7
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	0011      	movs	r1, r2
 800232c:	2203      	movs	r2, #3
 800232e:	400a      	ands	r2, r1
 8002330:	00d2      	lsls	r2, r2, #3
 8002332:	21ff      	movs	r1, #255	@ 0xff
 8002334:	4091      	lsls	r1, r2
 8002336:	000a      	movs	r2, r1
 8002338:	43d2      	mvns	r2, r2
 800233a:	401a      	ands	r2, r3
 800233c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	22ff      	movs	r2, #255	@ 0xff
 8002344:	401a      	ands	r2, r3
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	0018      	movs	r0, r3
 800234c:	2303      	movs	r3, #3
 800234e:	4003      	ands	r3, r0
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002354:	4809      	ldr	r0, [pc, #36]	@ (800237c <__NVIC_SetPriority+0xd8>)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	001c      	movs	r4, r3
 800235c:	230f      	movs	r3, #15
 800235e:	4023      	ands	r3, r4
 8002360:	3b08      	subs	r3, #8
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	430a      	orrs	r2, r1
 8002366:	3306      	adds	r3, #6
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	18c3      	adds	r3, r0, r3
 800236c:	3304      	adds	r3, #4
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	46c0      	nop			@ (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b003      	add	sp, #12
 8002376:	bd90      	pop	{r4, r7, pc}
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1e5a      	subs	r2, r3, #1
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	045b      	lsls	r3, r3, #17
 8002390:	429a      	cmp	r2, r3
 8002392:	d301      	bcc.n	8002398 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002394:	2301      	movs	r3, #1
 8002396:	e010      	b.n	80023ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <SysTick_Config+0x44>)
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	3a01      	subs	r2, #1
 800239e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a0:	2301      	movs	r3, #1
 80023a2:	425b      	negs	r3, r3
 80023a4:	2103      	movs	r1, #3
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff ff7c 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <SysTick_Config+0x44>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b2:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <SysTick_Config+0x44>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	210f      	movs	r1, #15
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	1c02      	adds	r2, r0, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff ff5d 	bl	80022a4 <__NVIC_SetPriority>
}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff ffbf 	bl	8002380 <SysTick_Config>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002422:	e155      	b.n	80026d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2101      	movs	r1, #1
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4091      	lsls	r1, r2
 800242e:	000a      	movs	r2, r1
 8002430:	4013      	ands	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d100      	bne.n	800243c <HAL_GPIO_Init+0x30>
 800243a:	e146      	b.n	80026ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2203      	movs	r2, #3
 8002442:	4013      	ands	r3, r2
 8002444:	2b01      	cmp	r3, #1
 8002446:	d005      	beq.n	8002454 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002450:	2b02      	cmp	r3, #2
 8002452:	d130      	bne.n	80024b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	409a      	lsls	r2, r3
 8002462:	0013      	movs	r3, r2
 8002464:	43da      	mvns	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	409a      	lsls	r2, r3
 8002476:	0013      	movs	r3, r2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248a:	2201      	movs	r2, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
 8002490:	0013      	movs	r3, r2
 8002492:	43da      	mvns	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	2201      	movs	r2, #1
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2203      	movs	r2, #3
 80024bc:	4013      	ands	r3, r2
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d017      	beq.n	80024f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	43da      	mvns	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d123      	bne.n	8002546 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	58d3      	ldr	r3, [r2, r3]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2207      	movs	r2, #7
 8002510:	4013      	ands	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2107      	movs	r1, #7
 800252a:	400b      	ands	r3, r1
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	0092      	lsls	r2, r2, #2
 8002542:	6939      	ldr	r1, [r7, #16]
 8002544:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	409a      	lsls	r2, r3
 8002554:	0013      	movs	r3, r2
 8002556:	43da      	mvns	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	401a      	ands	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	23c0      	movs	r3, #192	@ 0xc0
 8002580:	029b      	lsls	r3, r3, #10
 8002582:	4013      	ands	r3, r2
 8002584:	d100      	bne.n	8002588 <HAL_GPIO_Init+0x17c>
 8002586:	e0a0      	b.n	80026ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002588:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <HAL_GPIO_Init+0x2dc>)
 800258a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <HAL_GPIO_Init+0x2dc>)
 800258e:	2101      	movs	r1, #1
 8002590:	430a      	orrs	r2, r1
 8002592:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002594:	4a55      	ldr	r2, [pc, #340]	@ (80026ec <HAL_GPIO_Init+0x2e0>)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	3302      	adds	r3, #2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	589b      	ldr	r3, [r3, r2]
 80025a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2203      	movs	r2, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	409a      	lsls	r2, r3
 80025ae:	0013      	movs	r3, r2
 80025b0:	43da      	mvns	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	23a0      	movs	r3, #160	@ 0xa0
 80025bc:	05db      	lsls	r3, r3, #23
 80025be:	429a      	cmp	r2, r3
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x1f6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4a      	ldr	r2, [pc, #296]	@ (80026f0 <HAL_GPIO_Init+0x2e4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x1f2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	@ (80026f4 <HAL_GPIO_Init+0x2e8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x1ee>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	@ (80026f8 <HAL_GPIO_Init+0x2ec>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x1ea>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	@ (80026fc <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x1e6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	@ (8002700 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x1e2>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e00a      	b.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025ee:	2306      	movs	r3, #6
 80025f0:	e008      	b.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025f6:	2303      	movs	r3, #3
 80025f8:	e004      	b.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_Init+0x1f8>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_GPIO_Init+0x1f8>
 8002602:	2300      	movs	r3, #0
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	2103      	movs	r1, #3
 8002608:	400a      	ands	r2, r1
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4093      	lsls	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002614:	4935      	ldr	r1, [pc, #212]	@ (80026ec <HAL_GPIO_Init+0x2e0>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b38      	ldr	r3, [pc, #224]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43da      	mvns	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	035b      	lsls	r3, r3, #13
 800263a:	4013      	ands	r3, r2
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002646:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43da      	mvns	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	039b      	lsls	r3, r3, #14
 8002664:	4013      	ands	r3, r2
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002670:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002676:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43da      	mvns	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	4013      	ands	r3, r2
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800269a:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a0:	4b18      	ldr	r3, [pc, #96]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	025b      	lsls	r3, r3, #9
 80026b8:	4013      	ands	r3, r2
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <HAL_GPIO_Init+0x2f8>)
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	40da      	lsrs	r2, r3
 80026d8:	1e13      	subs	r3, r2, #0
 80026da:	d000      	beq.n	80026de <HAL_GPIO_Init+0x2d2>
 80026dc:	e6a2      	b.n	8002424 <HAL_GPIO_Init+0x18>
  }
}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	46c0      	nop			@ (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b006      	add	sp, #24
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010000 	.word	0x40010000
 80026f0:	50000400 	.word	0x50000400
 80026f4:	50000800 	.word	0x50000800
 80026f8:	50000c00 	.word	0x50000c00
 80026fc:	50001000 	.word	0x50001000
 8002700:	50001c00 	.word	0x50001c00
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	000a      	movs	r2, r1
 8002712:	1cbb      	adds	r3, r7, #2
 8002714:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	1cba      	adds	r2, r7, #2
 800271c:	8812      	ldrh	r2, [r2, #0]
 800271e:	4013      	ands	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002722:	230f      	movs	r3, #15
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e003      	b.n	8002734 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272c:	230f      	movs	r3, #15
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002734:	230f      	movs	r3, #15
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	781b      	ldrb	r3, [r3, #0]
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	0008      	movs	r0, r1
 800274c:	0011      	movs	r1, r2
 800274e:	1cbb      	adds	r3, r7, #2
 8002750:	1c02      	adds	r2, r0, #0
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	1c7b      	adds	r3, r7, #1
 8002756:	1c0a      	adds	r2, r1, #0
 8002758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275a:	1c7b      	adds	r3, r7, #1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	1cbb      	adds	r3, r7, #2
 8002764:	881a      	ldrh	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800276a:	e003      	b.n	8002774 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800276c:	1cbb      	adds	r3, r7, #2
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002774:	46c0      	nop			@ (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b08a      	sub	sp, #40	@ 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f000 fbbf 	bl	8002f0e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002790:	4bc9      	ldr	r3, [pc, #804]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	220c      	movs	r2, #12
 8002796:	4013      	ands	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279a:	4bc7      	ldr	r3, [pc, #796]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	025b      	lsls	r3, r3, #9
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d100      	bne.n	80027b2 <HAL_RCC_OscConfig+0x36>
 80027b0:	e07e      	b.n	80028b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d007      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d112      	bne.n	80027e4 <HAL_RCC_OscConfig+0x68>
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	025b      	lsls	r3, r3, #9
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	4bbb      	ldr	r3, [pc, #748]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	4013      	ands	r3, r2
 80027d2:	d100      	bne.n	80027d6 <HAL_RCC_OscConfig+0x5a>
 80027d4:	e06b      	b.n	80028ae <HAL_RCC_OscConfig+0x132>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d167      	bne.n	80028ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f000 fb95 	bl	8002f0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x84>
 80027f0:	4bb1      	ldr	r3, [pc, #708]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4bb0      	ldr	r3, [pc, #704]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80027f6:	2180      	movs	r1, #128	@ 0x80
 80027f8:	0249      	lsls	r1, r1, #9
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e027      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	23a0      	movs	r3, #160	@ 0xa0
 8002806:	02db      	lsls	r3, r3, #11
 8002808:	429a      	cmp	r2, r3
 800280a:	d10e      	bne.n	800282a <HAL_RCC_OscConfig+0xae>
 800280c:	4baa      	ldr	r3, [pc, #680]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4ba9      	ldr	r3, [pc, #676]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002812:	2180      	movs	r1, #128	@ 0x80
 8002814:	02c9      	lsls	r1, r1, #11
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	0249      	lsls	r1, r1, #9
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e012      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 800282a:	4ba3      	ldr	r3, [pc, #652]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002830:	49a2      	ldr	r1, [pc, #648]	@ (8002abc <HAL_RCC_OscConfig+0x340>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4ba0      	ldr	r3, [pc, #640]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	4013      	ands	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4b9c      	ldr	r3, [pc, #624]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b9b      	ldr	r3, [pc, #620]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800284a:	499d      	ldr	r1, [pc, #628]	@ (8002ac0 <HAL_RCC_OscConfig+0x344>)
 800284c:	400a      	ands	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff fcf6 	bl	8002248 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002860:	e009      	b.n	8002876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002862:	f7ff fcf1 	bl	8002248 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	@ 0x64
 800286e:	d902      	bls.n	8002876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	f000 fb4c 	bl	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002876:	4b90      	ldr	r3, [pc, #576]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	4013      	ands	r3, r2
 8002880:	d0ef      	beq.n	8002862 <HAL_RCC_OscConfig+0xe6>
 8002882:	e015      	b.n	80028b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7ff fce0 	bl	8002248 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800288e:	f7ff fcdb 	bl	8002248 <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	@ 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e336      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028a0:	4b85      	ldr	r3, [pc, #532]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	029b      	lsls	r3, r3, #10
 80028a8:	4013      	ands	r3, r2
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x112>
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2202      	movs	r2, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d100      	bne.n	80028bc <HAL_RCC_OscConfig+0x140>
 80028ba:	e099      	b.n	80029f0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80028ca:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80028d0:	2120      	movs	r1, #32
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	2220      	movs	r2, #32
 80028da:	4393      	bics	r3, r2
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d13e      	bne.n	8002968 <HAL_RCC_OscConfig+0x1ec>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13b      	bne.n	8002968 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028f0:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2204      	movs	r2, #4
 80028f6:	4013      	ands	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_RCC_OscConfig+0x188>
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e304      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac4 <HAL_RCC_OscConfig+0x348>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800291a:	4b67      	ldr	r3, [pc, #412]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2209      	movs	r2, #9
 8002920:	4393      	bics	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	4b64      	ldr	r3, [pc, #400]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800292c:	f000 fc42 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8002930:	0001      	movs	r1, r0
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	220f      	movs	r2, #15
 800293a:	4013      	ands	r3, r2
 800293c:	4a62      	ldr	r2, [pc, #392]	@ (8002ac8 <HAL_RCC_OscConfig+0x34c>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	000a      	movs	r2, r1
 8002942:	40da      	lsrs	r2, r3
 8002944:	4b61      	ldr	r3, [pc, #388]	@ (8002acc <HAL_RCC_OscConfig+0x350>)
 8002946:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002948:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <HAL_RCC_OscConfig+0x354>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2513      	movs	r5, #19
 800294e:	197c      	adds	r4, r7, r5
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff fc33 	bl	80021bc <HAL_InitTick>
 8002956:	0003      	movs	r3, r0
 8002958:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800295a:	197b      	adds	r3, r7, r5
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d046      	beq.n	80029f0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002962:	197b      	adds	r3, r7, r5
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	e2d2      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d027      	beq.n	80029be <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800296e:	4b52      	ldr	r3, [pc, #328]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2209      	movs	r2, #9
 8002974:	4393      	bics	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff fc62 	bl	8002248 <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff fc5d 	bl	8002248 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e2b8      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299c:	4b46      	ldr	r3, [pc, #280]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2204      	movs	r2, #4
 80029a2:	4013      	ands	r3, r2
 80029a4:	d0f1      	beq.n	800298a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a46      	ldr	r2, [pc, #280]	@ (8002ac4 <HAL_RCC_OscConfig+0x348>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	4b40      	ldr	r3, [pc, #256]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	e018      	b.n	80029f0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	438a      	bics	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7ff fc3d 	bl	8002248 <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7ff fc38 	bl	8002248 <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e293      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029e6:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	d1f1      	bne.n	80029d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2210      	movs	r2, #16
 80029f6:	4013      	ands	r3, r2
 80029f8:	d100      	bne.n	80029fc <HAL_RCC_OscConfig+0x280>
 80029fa:	e0a2      	b.n	8002b42 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d140      	bne.n	8002a84 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a02:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x29e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e279      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1a:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad4 <HAL_RCC_OscConfig+0x358>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a28:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	0a19      	lsrs	r1, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	061a      	lsls	r2, r3, #24
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	0b5b      	lsrs	r3, r3, #13
 8002a48:	3301      	adds	r3, #1
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	0212      	lsls	r2, r2, #8
 8002a4e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	210f      	movs	r1, #15
 8002a58:	400b      	ands	r3, r1
 8002a5a:	491b      	ldr	r1, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x34c>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <HAL_RCC_OscConfig+0x350>)
 8002a62:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <HAL_RCC_OscConfig+0x354>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2513      	movs	r5, #19
 8002a6a:	197c      	adds	r4, r7, r5
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff fba5 	bl	80021bc <HAL_InitTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a76:	197b      	adds	r3, r7, r5
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d061      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002a7e:	197b      	adds	r3, r7, r5
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	e244      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d040      	beq.n	8002b0e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x33c>)
 8002a92:	2180      	movs	r1, #128	@ 0x80
 8002a94:	0049      	lsls	r1, r1, #1
 8002a96:	430a      	orrs	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7ff fbd5 	bl	8002248 <HAL_GetTick>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aa2:	e019      	b.n	8002ad8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fbd0 	bl	8002248 <HAL_GetTick>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d912      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e22b      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	fffeffff 	.word	0xfffeffff
 8002ac0:	fffbffff 	.word	0xfffbffff
 8002ac4:	ffffe0ff 	.word	0xffffe0ff
 8002ac8:	080050a4 	.word	0x080050a4
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ad8:	4bca      	ldr	r3, [pc, #808]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d0df      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae4:	4bc7      	ldr	r3, [pc, #796]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4ac7      	ldr	r2, [pc, #796]	@ (8002e08 <HAL_RCC_OscConfig+0x68c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af2:	4bc4      	ldr	r3, [pc, #784]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af8:	4bc2      	ldr	r3, [pc, #776]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	0a19      	lsrs	r1, r3, #8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	061a      	lsls	r2, r3, #24
 8002b06:	4bbf      	ldr	r3, [pc, #764]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	e019      	b.n	8002b42 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b0e:	4bbd      	ldr	r3, [pc, #756]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4bbc      	ldr	r3, [pc, #752]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b14:	49bd      	ldr	r1, [pc, #756]	@ (8002e0c <HAL_RCC_OscConfig+0x690>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7ff fb95 	bl	8002248 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b24:	f7ff fb90 	bl	8002248 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1eb      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b36:	4bb3      	ldr	r3, [pc, #716]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2208      	movs	r2, #8
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d036      	beq.n	8002bba <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d019      	beq.n	8002b88 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b54:	4bab      	ldr	r3, [pc, #684]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b58:	4baa      	ldr	r3, [pc, #680]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7ff fb72 	bl	8002248 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7ff fb6d 	bl	8002248 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1c8      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d0f1      	beq.n	8002b6a <HAL_RCC_OscConfig+0x3ee>
 8002b86:	e018      	b.n	8002bba <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b88:	4b9e      	ldr	r3, [pc, #632]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7ff fb58 	bl	8002248 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff fb53 	bl	8002248 <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1ae      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bb0:	4b94      	ldr	r3, [pc, #592]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d1f1      	bne.n	8002b9e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x44a>
 8002bc4:	e0ae      	b.n	8002d24 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2023      	movs	r0, #35	@ 0x23
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b8d      	ldr	r3, [pc, #564]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	055b      	lsls	r3, r3, #21
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b8a      	ldr	r3, [pc, #552]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bde:	4b89      	ldr	r3, [pc, #548]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	0549      	lsls	r1, r1, #21
 8002be4:	430a      	orrs	r2, r1
 8002be6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x694>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d11a      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <HAL_RCC_OscConfig+0x694>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b84      	ldr	r3, [pc, #528]	@ (8002e10 <HAL_RCC_OscConfig+0x694>)
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	0049      	lsls	r1, r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c08:	f7ff fb1e 	bl	8002248 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7ff fb19 	bl	8002248 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	@ 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e174      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b7a      	ldr	r3, [pc, #488]	@ (8002e10 <HAL_RCC_OscConfig+0x694>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4d0>
 8002c3c:	4b71      	ldr	r3, [pc, #452]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c40:	4b70      	ldr	r3, [pc, #448]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c42:	2180      	movs	r1, #128	@ 0x80
 8002c44:	0049      	lsls	r1, r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c4a:	e031      	b.n	8002cb0 <HAL_RCC_OscConfig+0x534>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4f2>
 8002c54:	4b6b      	ldr	r3, [pc, #428]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c58:	4b6a      	ldr	r3, [pc, #424]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c5a:	496c      	ldr	r1, [pc, #432]	@ (8002e0c <HAL_RCC_OscConfig+0x690>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c60:	4b68      	ldr	r3, [pc, #416]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c64:	4b67      	ldr	r3, [pc, #412]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c66:	496b      	ldr	r1, [pc, #428]	@ (8002e14 <HAL_RCC_OscConfig+0x698>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c6c:	e020      	b.n	8002cb0 <HAL_RCC_OscConfig+0x534>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	23a0      	movs	r3, #160	@ 0xa0
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d10e      	bne.n	8002c98 <HAL_RCC_OscConfig+0x51c>
 8002c7a:	4b62      	ldr	r3, [pc, #392]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c7e:	4b61      	ldr	r3, [pc, #388]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	00c9      	lsls	r1, r1, #3
 8002c84:	430a      	orrs	r2, r1
 8002c86:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c88:	4b5e      	ldr	r3, [pc, #376]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	0049      	lsls	r1, r1, #1
 8002c92:	430a      	orrs	r2, r1
 8002c94:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x534>
 8002c98:	4b5a      	ldr	r3, [pc, #360]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c9c:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002c9e:	495b      	ldr	r1, [pc, #364]	@ (8002e0c <HAL_RCC_OscConfig+0x690>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ca4:	4b57      	ldr	r3, [pc, #348]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002ca6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca8:	4b56      	ldr	r3, [pc, #344]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002caa:	495a      	ldr	r1, [pc, #360]	@ (8002e14 <HAL_RCC_OscConfig+0x698>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7ff fac6 	bl	8002248 <HAL_GetTick>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc0:	e009      	b.n	8002cd6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7ff fac1 	bl	8002248 <HAL_GetTick>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	4a52      	ldr	r2, [pc, #328]	@ (8002e18 <HAL_RCC_OscConfig+0x69c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e11b      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d0ef      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x546>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7ff fab0 	bl	8002248 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7ff faab 	bl	8002248 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a47      	ldr	r2, [pc, #284]	@ (8002e18 <HAL_RCC_OscConfig+0x69c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e105      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d02:	4b40      	ldr	r3, [pc, #256]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d1ef      	bne.n	8002cee <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d0e:	2323      	movs	r3, #35	@ 0x23
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b3a      	ldr	r3, [pc, #232]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d1c:	4b39      	ldr	r3, [pc, #228]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d1e:	493f      	ldr	r1, [pc, #252]	@ (8002e1c <HAL_RCC_OscConfig+0x6a0>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d049      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d026      	beq.n	8002d84 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d36:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d46:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d4e:	4b34      	ldr	r3, [pc, #208]	@ (8002e20 <HAL_RCC_OscConfig+0x6a4>)
 8002d50:	6a1a      	ldr	r2, [r3, #32]
 8002d52:	4b33      	ldr	r3, [pc, #204]	@ (8002e20 <HAL_RCC_OscConfig+0x6a4>)
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	0189      	lsls	r1, r1, #6
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff fa74 	bl	8002248 <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d66:	f7ff fa6f 	bl	8002248 <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0ca      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d0f1      	beq.n	8002d66 <HAL_RCC_OscConfig+0x5ea>
 8002d82:	e01e      	b.n	8002dc2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	4b23      	ldr	r3, [pc, #140]	@ (8002e20 <HAL_RCC_OscConfig+0x6a4>)
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4b22      	ldr	r3, [pc, #136]	@ (8002e20 <HAL_RCC_OscConfig+0x6a4>)
 8002d96:	4923      	ldr	r1, [pc, #140]	@ (8002e24 <HAL_RCC_OscConfig+0x6a8>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fa54 	bl	8002248 <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7ff fa4f 	bl	8002248 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0aa      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db8:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d1f1      	bne.n	8002da6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <HAL_RCC_OscConfig+0x650>
 8002dca:	e09f      	b.n	8002f0c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d100      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x658>
 8002dd2:	e078      	b.n	8002ec6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d159      	bne.n	8002e90 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <HAL_RCC_OscConfig+0x688>)
 8002de2:	4911      	ldr	r1, [pc, #68]	@ (8002e28 <HAL_RCC_OscConfig+0x6ac>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff fa2e 	bl	8002248 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7ff fa29 	bl	8002248 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d915      	bls.n	8002e2c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e084      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	ffff1fff 	.word	0xffff1fff
 8002e0c:	fffffeff 	.word	0xfffffeff
 8002e10:	40007000 	.word	0x40007000
 8002e14:	fffffbff 	.word	0xfffffbff
 8002e18:	00001388 	.word	0x00001388
 8002e1c:	efffffff 	.word	0xefffffff
 8002e20:	40010000 	.word	0x40010000
 8002e24:	ffffdfff 	.word	0xffffdfff
 8002e28:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	049b      	lsls	r3, r3, #18
 8002e34:	4013      	ands	r3, r2
 8002e36:	d1dc      	bne.n	8002df2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e38:	4b37      	ldr	r3, [pc, #220]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a37      	ldr	r2, [pc, #220]	@ (8002f1c <HAL_RCC_OscConfig+0x7a0>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	431a      	orrs	r2, r3
 8002e52:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b2f      	ldr	r3, [pc, #188]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e5e:	2180      	movs	r1, #128	@ 0x80
 8002e60:	0449      	lsls	r1, r1, #17
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7ff f9ef 	bl	8002248 <HAL_GetTick>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff f9ea 	bl	8002248 <HAL_GetTick>
 8002e74:	0002      	movs	r2, r0
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e045      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e82:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	049b      	lsls	r3, r3, #18
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x6f4>
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002e96:	4922      	ldr	r1, [pc, #136]	@ (8002f20 <HAL_RCC_OscConfig+0x7a4>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f9d4 	bl	8002248 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7ff f9cf 	bl	8002248 <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e02a      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	@ 0x80
 8002ebe:	049b      	lsls	r3, r3, #18
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x72a>
 8002ec4:	e022      	b.n	8002f0c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01d      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <HAL_RCC_OscConfig+0x79c>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	2380      	movs	r3, #128	@ 0x80
 8002edc:	025b      	lsls	r3, r3, #9
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d10f      	bne.n	8002f08 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	23f0      	movs	r3, #240	@ 0xf0
 8002eec:	039b      	lsls	r3, r3, #14
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	23c0      	movs	r3, #192	@ 0xc0
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	401a      	ands	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b00a      	add	sp, #40	@ 0x28
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	ff02ffff 	.word	0xff02ffff
 8002f20:	feffffff 	.word	0xfeffffff

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e128      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b96      	ldr	r3, [pc, #600]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d91e      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b93      	ldr	r3, [pc, #588]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	4b90      	ldr	r3, [pc, #576]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f58:	f7ff f976 	bl	8002248 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f60:	e009      	b.n	8002f76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f62:	f7ff f971 	bl	8002248 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	4a8a      	ldr	r2, [pc, #552]	@ (8003198 <HAL_RCC_ClockConfig+0x274>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e109      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b87      	ldr	r3, [pc, #540]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8e:	4b83      	ldr	r3, [pc, #524]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	22f0      	movs	r2, #240	@ 0xf0
 8002f94:	4393      	bics	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d100      	bne.n	8002fae <HAL_RCC_ClockConfig+0x8a>
 8002fac:	e089      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb6:	4b79      	ldr	r3, [pc, #484]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d120      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0e1      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fce:	4b73      	ldr	r3, [pc, #460]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	049b      	lsls	r3, r3, #18
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d114      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0d5      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	d109      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ca      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ff4:	4b69      	ldr	r3, [pc, #420]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0c2      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003004:	4b65      	ldr	r3, [pc, #404]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2203      	movs	r2, #3
 800300a:	4393      	bics	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b62      	ldr	r3, [pc, #392]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7ff f916 	bl	8002248 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d111      	bne.n	800304c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003028:	e009      	b.n	800303e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302a:	f7ff f90d 	bl	8002248 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a58      	ldr	r2, [pc, #352]	@ (8003198 <HAL_RCC_ClockConfig+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0a5      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800303e:	4b57      	ldr	r3, [pc, #348]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	220c      	movs	r2, #12
 8003044:	4013      	ands	r3, r2
 8003046:	2b08      	cmp	r3, #8
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_ClockConfig+0x106>
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d111      	bne.n	8003078 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	e009      	b.n	800306a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003056:	f7ff f8f7 	bl	8002248 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	4a4d      	ldr	r2, [pc, #308]	@ (8003198 <HAL_RCC_ClockConfig+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e08f      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306a:	4b4c      	ldr	r3, [pc, #304]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	220c      	movs	r2, #12
 8003070:	4013      	ands	r3, r2
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d1ef      	bne.n	8003056 <HAL_RCC_ClockConfig+0x132>
 8003076:	e024      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d11b      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003080:	e009      	b.n	8003096 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7ff f8e1 	bl	8002248 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	4a42      	ldr	r2, [pc, #264]	@ (8003198 <HAL_RCC_ClockConfig+0x274>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e079      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	4b41      	ldr	r3, [pc, #260]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	220c      	movs	r2, #12
 800309c:	4013      	ands	r3, r2
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d1ef      	bne.n	8003082 <HAL_RCC_ClockConfig+0x15e>
 80030a2:	e00e      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7ff f8d0 	bl	8002248 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003198 <HAL_RCC_ClockConfig+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e068      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80030b8:	4b38      	ldr	r3, [pc, #224]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	220c      	movs	r2, #12
 80030be:	4013      	ands	r3, r2
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c2:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d21e      	bcs.n	800310e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d0:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4393      	bics	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	4b2e      	ldr	r3, [pc, #184]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030e2:	f7ff f8b1 	bl	8002248 <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	e009      	b.n	8003100 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7ff f8ac 	bl	8002248 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	4a28      	ldr	r2, [pc, #160]	@ (8003198 <HAL_RCC_ClockConfig+0x274>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e044      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003100:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_RCC_ClockConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d1ee      	bne.n	80030ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2204      	movs	r2, #4
 8003114:	4013      	ands	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a20      	ldr	r2, [pc, #128]	@ (80031a0 <HAL_RCC_ClockConfig+0x27c>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b1d      	ldr	r3, [pc, #116]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2208      	movs	r2, #8
 8003132:	4013      	ands	r3, r2
 8003134:	d00a      	beq.n	800314c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003136:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <HAL_RCC_ClockConfig+0x280>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00da      	lsls	r2, r3, #3
 8003146:	4b15      	ldr	r3, [pc, #84]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314c:	f000 f832 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003150:	0001      	movs	r1, r0
 8003152:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_RCC_ClockConfig+0x278>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	220f      	movs	r2, #15
 800315a:	4013      	ands	r3, r2
 800315c:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <HAL_RCC_ClockConfig+0x284>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	000a      	movs	r2, r1
 8003162:	40da      	lsrs	r2, r3
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <HAL_RCC_ClockConfig+0x288>)
 8003166:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_ClockConfig+0x28c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	250b      	movs	r5, #11
 800316e:	197c      	adds	r4, r7, r5
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff f823 	bl	80021bc <HAL_InitTick>
 8003176:	0003      	movs	r3, r0
 8003178:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800317a:	197b      	adds	r3, r7, r5
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003182:	197b      	adds	r3, r7, r5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	e000      	b.n	800318a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bdb0      	pop	{r4, r5, r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	40022000 	.word	0x40022000
 8003198:	00001388 	.word	0x00001388
 800319c:	40021000 	.word	0x40021000
 80031a0:	fffff8ff 	.word	0xfffff8ff
 80031a4:	ffffc7ff 	.word	0xffffc7ff
 80031a8:	080050a4 	.word	0x080050a4
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b08e      	sub	sp, #56	@ 0x38
 80031b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80031ba:	4b4c      	ldr	r3, [pc, #304]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c2:	230c      	movs	r3, #12
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d014      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031ca:	d900      	bls.n	80031ce <HAL_RCC_GetSysClockFreq+0x1a>
 80031cc:	e07b      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x112>
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x24>
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031d6:	e076      	b.n	80032c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031d8:	4b44      	ldr	r3, [pc, #272]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	4013      	ands	r3, r2
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80031e2:	4b43      	ldr	r3, [pc, #268]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80031e6:	e07c      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80031e8:	4b42      	ldr	r3, [pc, #264]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80031ea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80031ec:	e079      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b42      	ldr	r3, [pc, #264]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80031f0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80031f2:	e076      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f6:	0c9a      	lsrs	r2, r3, #18
 80031f8:	230f      	movs	r3, #15
 80031fa:	401a      	ands	r2, r3
 80031fc:	4b3f      	ldr	r3, [pc, #252]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x148>)
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003204:	0d9a      	lsrs	r2, r3, #22
 8003206:	2303      	movs	r3, #3
 8003208:	4013      	ands	r3, r2
 800320a:	3301      	adds	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320e:	4b37      	ldr	r3, [pc, #220]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	4013      	ands	r3, r2
 8003218:	d01a      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	4a35      	ldr	r2, [pc, #212]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003224:	2300      	movs	r3, #0
 8003226:	69b8      	ldr	r0, [r7, #24]
 8003228:	69f9      	ldr	r1, [r7, #28]
 800322a:	f7fd f823 	bl	8000274 <__aeabi_lmul>
 800322e:	0002      	movs	r2, r0
 8003230:	000b      	movs	r3, r1
 8003232:	0010      	movs	r0, r2
 8003234:	0019      	movs	r1, r3
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f7fc fff7 	bl	8000234 <__aeabi_uldivmod>
 8003246:	0002      	movs	r2, r0
 8003248:	000b      	movs	r3, r1
 800324a:	0013      	movs	r3, r2
 800324c:	637b      	str	r3, [r7, #52]	@ 0x34
 800324e:	e037      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003250:	4b26      	ldr	r3, [pc, #152]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	4013      	ands	r3, r2
 8003258:	d01a      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4a23      	ldr	r2, [pc, #140]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003264:	2300      	movs	r3, #0
 8003266:	68b8      	ldr	r0, [r7, #8]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	f7fd f803 	bl	8000274 <__aeabi_lmul>
 800326e:	0002      	movs	r2, r0
 8003270:	000b      	movs	r3, r1
 8003272:	0010      	movs	r0, r2
 8003274:	0019      	movs	r1, r3
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f7fc ffd7 	bl	8000234 <__aeabi_uldivmod>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	0013      	movs	r3, r2
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
 800328e:	e017      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	0018      	movs	r0, r3
 8003294:	2300      	movs	r3, #0
 8003296:	0019      	movs	r1, r3
 8003298:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800329a:	2300      	movs	r3, #0
 800329c:	f7fc ffea 	bl	8000274 <__aeabi_lmul>
 80032a0:	0002      	movs	r2, r0
 80032a2:	000b      	movs	r3, r1
 80032a4:	0010      	movs	r0, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	001c      	movs	r4, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	001d      	movs	r5, r3
 80032b0:	0022      	movs	r2, r4
 80032b2:	002b      	movs	r3, r5
 80032b4:	f7fc ffbe 	bl	8000234 <__aeabi_uldivmod>
 80032b8:	0002      	movs	r2, r0
 80032ba:	000b      	movs	r3, r1
 80032bc:	0013      	movs	r3, r2
 80032be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80032c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80032c4:	e00d      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x138>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	0b5b      	lsrs	r3, r3, #13
 80032cc:	2207      	movs	r2, #7
 80032ce:	4013      	ands	r3, r2
 80032d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	3301      	adds	r3, #1
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	0212      	lsls	r2, r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	0013      	movs	r3, r2
 80032de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80032e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b00e      	add	sp, #56	@ 0x38
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	003d0900 	.word	0x003d0900
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	080050bc 	.word	0x080050bc

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b02      	ldr	r3, [pc, #8]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x10>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff2 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800331c:	0001      	movs	r1, r0
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	2207      	movs	r2, #7
 8003326:	4013      	ands	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x28>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	40d9      	lsrs	r1, r3
 800332e:	000b      	movs	r3, r1
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	40021000 	.word	0x40021000
 800333c:	080050b4 	.word	0x080050b4

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	0001      	movs	r1, r0
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	0adb      	lsrs	r3, r3, #11
 8003350:	2207      	movs	r2, #7
 8003352:	4013      	ands	r3, r2
 8003354:	4a04      	ldr	r2, [pc, #16]	@ (8003368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	40d9      	lsrs	r1, r3
 800335a:	000b      	movs	r3, r1
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	080050b4 	.word	0x080050b4

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003374:	2017      	movs	r0, #23
 8003376:	183b      	adds	r3, r7, r0
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2220      	movs	r2, #32
 8003382:	4013      	ands	r3, r2
 8003384:	d100      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003386:	e0c7      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003388:	4b9b      	ldr	r3, [pc, #620]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800338a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	055b      	lsls	r3, r3, #21
 8003390:	4013      	ands	r3, r2
 8003392:	d109      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b98      	ldr	r3, [pc, #608]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003398:	4b97      	ldr	r3, [pc, #604]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800339a:	2180      	movs	r1, #128	@ 0x80
 800339c:	0549      	lsls	r1, r1, #21
 800339e:	430a      	orrs	r2, r1
 80033a0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b94      	ldr	r3, [pc, #592]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	d11a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b4:	4b91      	ldr	r3, [pc, #580]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b90      	ldr	r3, [pc, #576]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80033ba:	2180      	movs	r1, #128	@ 0x80
 80033bc:	0049      	lsls	r1, r1, #1
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fe ff41 	bl	8002248 <HAL_GetTick>
 80033c6:	0003      	movs	r3, r0
 80033c8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	e008      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033cc:	f7fe ff3c 	bl	8002248 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e107      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b87      	ldr	r3, [pc, #540]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4013      	ands	r3, r2
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033ea:	4b83      	ldr	r3, [pc, #524]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	23c0      	movs	r3, #192	@ 0xc0
 80033f0:	039b      	lsls	r3, r3, #14
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	23c0      	movs	r3, #192	@ 0xc0
 80033fc:	039b      	lsls	r3, r3, #14
 80033fe:	4013      	ands	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	429a      	cmp	r2, r3
 8003404:	d013      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	23c0      	movs	r3, #192	@ 0xc0
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	401a      	ands	r2, r3
 8003410:	23c0      	movs	r3, #192	@ 0xc0
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	429a      	cmp	r2, r3
 8003416:	d10a      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003418:	4b77      	ldr	r3, [pc, #476]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	401a      	ands	r2, r3
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	029b      	lsls	r3, r3, #10
 8003426:	429a      	cmp	r2, r3
 8003428:	d101      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0df      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800342e:	4b72      	ldr	r3, [pc, #456]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003432:	23c0      	movs	r3, #192	@ 0xc0
 8003434:	029b      	lsls	r3, r3, #10
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03b      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	23c0      	movs	r3, #192	@ 0xc0
 8003446:	029b      	lsls	r3, r3, #10
 8003448:	4013      	ands	r3, r2
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	d033      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2220      	movs	r2, #32
 8003456:	4013      	ands	r3, r2
 8003458:	d02e      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800345a:	4b67      	ldr	r3, [pc, #412]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	4a68      	ldr	r2, [pc, #416]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003460:	4013      	ands	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003464:	4b64      	ldr	r3, [pc, #400]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003468:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800346a:	2180      	movs	r1, #128	@ 0x80
 800346c:	0309      	lsls	r1, r1, #12
 800346e:	430a      	orrs	r2, r1
 8003470:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003472:	4b61      	ldr	r3, [pc, #388]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003476:	4b60      	ldr	r3, [pc, #384]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003478:	4962      	ldr	r1, [pc, #392]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800347a:	400a      	ands	r2, r1
 800347c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800347e:	4b5e      	ldr	r3, [pc, #376]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4013      	ands	r3, r2
 800348c:	d014      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fe fedb 	bl	8002248 <HAL_GetTick>
 8003492:	0003      	movs	r3, r0
 8003494:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003496:	e009      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fe fed6 	bl	8002248 <HAL_GetTick>
 800349c:	0002      	movs	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	4a59      	ldr	r2, [pc, #356]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0a0      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ac:	4b52      	ldr	r3, [pc, #328]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0ef      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2220      	movs	r2, #32
 80034be:	4013      	ands	r3, r2
 80034c0:	d01f      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	23c0      	movs	r3, #192	@ 0xc0
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	401a      	ands	r2, r3
 80034cc:	23c0      	movs	r3, #192	@ 0xc0
 80034ce:	029b      	lsls	r3, r3, #10
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d10c      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x182>
 80034d4:	4b48      	ldr	r3, [pc, #288]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	23c0      	movs	r3, #192	@ 0xc0
 80034e4:	039b      	lsls	r3, r3, #14
 80034e6:	401a      	ands	r2, r3
 80034e8:	4b43      	ldr	r3, [pc, #268]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	4b42      	ldr	r3, [pc, #264]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	23c0      	movs	r3, #192	@ 0xc0
 80034f8:	029b      	lsls	r3, r3, #10
 80034fa:	401a      	ands	r2, r3
 80034fc:	4b3e      	ldr	r3, [pc, #248]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80034fe:	430a      	orrs	r2, r1
 8003500:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003502:	2317      	movs	r3, #23
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350c:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800350e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003512:	493f      	ldr	r1, [pc, #252]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003514:	400a      	ands	r2, r1
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	4013      	ands	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003522:	4b35      	ldr	r3, [pc, #212]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	2203      	movs	r2, #3
 8003528:	4393      	bics	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003532:	430a      	orrs	r2, r1
 8003534:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2202      	movs	r2, #2
 800353c:	4013      	ands	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003540:	4b2d      	ldr	r3, [pc, #180]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003544:	220c      	movs	r2, #12
 8003546:	4393      	bics	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	4b2a      	ldr	r3, [pc, #168]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003550:	430a      	orrs	r2, r1
 8003552:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2204      	movs	r2, #4
 800355a:	4013      	ands	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800355e:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	4a2c      	ldr	r2, [pc, #176]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800356e:	430a      	orrs	r2, r1
 8003570:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2208      	movs	r2, #8
 8003578:	4013      	ands	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800357c:	4b1e      	ldr	r3, [pc, #120]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800357e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003580:	4a25      	ldr	r2, [pc, #148]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800358c:	430a      	orrs	r2, r1
 800358e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4013      	ands	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4b16      	ldr	r3, [pc, #88]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800359e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a0:	4a17      	ldr	r2, [pc, #92]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035ac:	430a      	orrs	r2, r1
 80035ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2240      	movs	r2, #64	@ 0x40
 80035b6:	4013      	ands	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ba:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035ca:	430a      	orrs	r2, r1
 80035cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2280      	movs	r2, #128	@ 0x80
 80035d4:	4013      	ands	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035d8:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	4b04      	ldr	r3, [pc, #16]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b006      	add	sp, #24
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40007000 	.word	0x40007000
 8003600:	fffcffff 	.word	0xfffcffff
 8003604:	fff7ffff 	.word	0xfff7ffff
 8003608:	00001388 	.word	0x00001388
 800360c:	ffcfffff 	.word	0xffcfffff
 8003610:	efffffff 	.word	0xefffffff
 8003614:	fffff3ff 	.word	0xfffff3ff
 8003618:	ffffcfff 	.word	0xffffcfff
 800361c:	fbffffff 	.word	0xfbffffff
 8003620:	fff3ffff 	.word	0xfff3ffff

08003624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e032      	b.n	800369c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2239      	movs	r2, #57	@ 0x39
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2238      	movs	r2, #56	@ 0x38
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0018      	movs	r0, r3
 800364e:	f7fe fcb9 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2239      	movs	r2, #57	@ 0x39
 8003656:	2102      	movs	r1, #2
 8003658:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	0019      	movs	r1, r3
 8003664:	0010      	movs	r0, r2
 8003666:	f000 f93b 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	223e      	movs	r2, #62	@ 0x3e
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	223a      	movs	r2, #58	@ 0x3a
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223b      	movs	r2, #59	@ 0x3b
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	223c      	movs	r2, #60	@ 0x3c
 8003686:	2101      	movs	r1, #1
 8003688:	5499      	strb	r1, [r3, r2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223d      	movs	r2, #61	@ 0x3d
 800368e:	2101      	movs	r1, #1
 8003690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2239      	movs	r2, #57	@ 0x39
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b002      	add	sp, #8
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2239      	movs	r2, #57	@ 0x39
 80036b0:	5c9b      	ldrb	r3, [r3, r2]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d001      	beq.n	80036bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e033      	b.n	8003724 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2239      	movs	r2, #57	@ 0x39
 80036c0:	2102      	movs	r1, #2
 80036c2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	05db      	lsls	r3, r3, #23
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d00e      	beq.n	80036ee <HAL_TIM_Base_Start+0x4a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a15      	ldr	r2, [pc, #84]	@ (800372c <HAL_TIM_Base_Start+0x88>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_TIM_Base_Start+0x4a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a14      	ldr	r2, [pc, #80]	@ (8003730 <HAL_TIM_Base_Start+0x8c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_TIM_Base_Start+0x4a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <HAL_TIM_Base_Start+0x90>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d111      	bne.n	8003712 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2207      	movs	r2, #7
 80036f6:	4013      	ands	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b06      	cmp	r3, #6
 80036fe:	d010      	beq.n	8003722 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2101      	movs	r1, #1
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	e007      	b.n	8003722 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40000400 	.word	0x40000400
 8003730:	40010800 	.word	0x40010800
 8003734:	40011400 	.word	0x40011400

08003738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	230f      	movs	r3, #15
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2238      	movs	r2, #56	@ 0x38
 800374e:	5c9b      	ldrb	r3, [r3, r2]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIM_ConfigClockSource+0x20>
 8003754:	2302      	movs	r3, #2
 8003756:	e0bc      	b.n	80038d2 <HAL_TIM_ConfigClockSource+0x19a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2238      	movs	r2, #56	@ 0x38
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2239      	movs	r2, #57	@ 0x39
 8003764:	2102      	movs	r1, #2
 8003766:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2277      	movs	r2, #119	@ 0x77
 8003774:	4393      	bics	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a58      	ldr	r2, [pc, #352]	@ (80038dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2280      	movs	r2, #128	@ 0x80
 800378e:	0192      	lsls	r2, r2, #6
 8003790:	4293      	cmp	r3, r2
 8003792:	d040      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0xde>
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	0192      	lsls	r2, r2, #6
 8003798:	4293      	cmp	r3, r2
 800379a:	d900      	bls.n	800379e <HAL_TIM_ConfigClockSource+0x66>
 800379c:	e088      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 800379e:	2280      	movs	r2, #128	@ 0x80
 80037a0:	0152      	lsls	r2, r2, #5
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d100      	bne.n	80037a8 <HAL_TIM_ConfigClockSource+0x70>
 80037a6:	e088      	b.n	80038ba <HAL_TIM_ConfigClockSource+0x182>
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	0152      	lsls	r2, r2, #5
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d900      	bls.n	80037b2 <HAL_TIM_ConfigClockSource+0x7a>
 80037b0:	e07e      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037b2:	2b70      	cmp	r3, #112	@ 0x70
 80037b4:	d018      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0xb0>
 80037b6:	d900      	bls.n	80037ba <HAL_TIM_ConfigClockSource+0x82>
 80037b8:	e07a      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037ba:	2b60      	cmp	r3, #96	@ 0x60
 80037bc:	d04f      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x126>
 80037be:	d900      	bls.n	80037c2 <HAL_TIM_ConfigClockSource+0x8a>
 80037c0:	e076      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037c2:	2b50      	cmp	r3, #80	@ 0x50
 80037c4:	d03b      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x106>
 80037c6:	d900      	bls.n	80037ca <HAL_TIM_ConfigClockSource+0x92>
 80037c8:	e072      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d057      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x146>
 80037ce:	d900      	bls.n	80037d2 <HAL_TIM_ConfigClockSource+0x9a>
 80037d0:	e06e      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037d2:	2b30      	cmp	r3, #48	@ 0x30
 80037d4:	d063      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x166>
 80037d6:	d86b      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d060      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x166>
 80037dc:	d868      	bhi.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05d      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x166>
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d05b      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x166>
 80037e6:	e063      	b.n	80038b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037f8:	f000 f94a 	bl	8003a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2277      	movs	r2, #119	@ 0x77
 8003808:	4313      	orrs	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
      break;
 8003814:	e052      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003826:	f000 f933 	bl	8003a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2180      	movs	r1, #128	@ 0x80
 8003836:	01c9      	lsls	r1, r1, #7
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
      break;
 800383c:	e03e      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	001a      	movs	r2, r3
 800384c:	f000 f8a6 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2150      	movs	r1, #80	@ 0x50
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f900 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 800385c:	e02e      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	001a      	movs	r2, r3
 800386c:	f000 f8c4 	bl	80039f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2160      	movs	r1, #96	@ 0x60
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f8f0 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 800387c:	e01e      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	001a      	movs	r2, r3
 800388c:	f000 f886 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2140      	movs	r1, #64	@ 0x40
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f8e0 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 800389c:	e00e      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0019      	movs	r1, r3
 80038a8:	0010      	movs	r0, r2
 80038aa:	f000 f8d7 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 80038ae:	e005      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80038b0:	230f      	movs	r3, #15
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
      break;
 80038b8:	e000      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80038ba:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2239      	movs	r2, #57	@ 0x39
 80038c0:	2101      	movs	r1, #1
 80038c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2238      	movs	r2, #56	@ 0x38
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]

  return status;
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b004      	add	sp, #16
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	ffff00ff 	.word	0xffff00ff

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	05db      	lsls	r3, r3, #23
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0x32>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a23      	ldr	r2, [pc, #140]	@ (800398c <TIM_Base_SetConfig+0xac>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0x32>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a22      	ldr	r2, [pc, #136]	@ (8003990 <TIM_Base_SetConfig+0xb0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0x32>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a21      	ldr	r2, [pc, #132]	@ (8003994 <TIM_Base_SetConfig+0xb4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2270      	movs	r2, #112	@ 0x70
 8003916:	4393      	bics	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	05db      	lsls	r3, r3, #23
 800392a:	429a      	cmp	r2, r3
 800392c:	d00b      	beq.n	8003946 <TIM_Base_SetConfig+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a16      	ldr	r2, [pc, #88]	@ (800398c <TIM_Base_SetConfig+0xac>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <TIM_Base_SetConfig+0x66>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <TIM_Base_SetConfig+0xb0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <TIM_Base_SetConfig+0x66>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <TIM_Base_SetConfig+0xb4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d108      	bne.n	8003958 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <TIM_Base_SetConfig+0xb8>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2280      	movs	r2, #128	@ 0x80
 800395c:	4393      	bics	r3, r2
 800395e:	001a      	movs	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	615a      	str	r2, [r3, #20]
}
 8003984:	46c0      	nop			@ (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40000400 	.word	0x40000400
 8003990:	40010800 	.word	0x40010800
 8003994:	40011400 	.word	0x40011400
 8003998:	fffffcff 	.word	0xfffffcff

0800399c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2201      	movs	r2, #1
 80039b4:	4393      	bics	r3, r2
 80039b6:	001a      	movs	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	22f0      	movs	r2, #240	@ 0xf0
 80039c6:	4393      	bics	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	220a      	movs	r2, #10
 80039d8:	4393      	bics	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b006      	add	sp, #24
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	4393      	bics	r3, r2
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <TIM_TI2_ConfigInputStage+0x60>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	22a0      	movs	r2, #160	@ 0xa0
 8003a34:	4393      	bics	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b006      	add	sp, #24
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	ffff0fff 	.word	0xffff0fff

08003a5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2270      	movs	r2, #112	@ 0x70
 8003a70:	4393      	bics	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4a09      	ldr	r2, [pc, #36]	@ (8003acc <TIM_ETR_SetConfig+0x3c>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b006      	add	sp, #24
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	ffff00ff 	.word	0xffff00ff

08003ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2238      	movs	r2, #56	@ 0x38
 8003ade:	5c9b      	ldrb	r3, [r3, r2]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e047      	b.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2238      	movs	r2, #56	@ 0x38
 8003aec:	2101      	movs	r1, #1
 8003aee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2239      	movs	r2, #57	@ 0x39
 8003af4:	2102      	movs	r1, #2
 8003af6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2270      	movs	r2, #112	@ 0x70
 8003b0c:	4393      	bics	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	2380      	movs	r3, #128	@ 0x80
 8003b28:	05db      	lsls	r3, r3, #23
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a10      	ldr	r2, [pc, #64]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10c      	bne.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2280      	movs	r2, #128	@ 0x80
 8003b50:	4393      	bics	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2239      	movs	r2, #57	@ 0x39
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2238      	movs	r2, #56	@ 0x38
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40010800 	.word	0x40010800
 8003b88:	40011400 	.word	0x40011400

08003b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e044      	b.n	8003c28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2278      	movs	r2, #120	@ 0x78
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fe fa1d 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2224      	movs	r2, #36	@ 0x24
 8003bba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f000 f8d0 	bl	8003d74 <UART_SetConfig>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e024      	b.n	8003c28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fb61 	bl	80042b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	490d      	ldr	r1, [pc, #52]	@ (8003c30 <HAL_UART_Init+0xa4>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	212a      	movs	r1, #42	@ 0x2a
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 fbf9 	bl	8004418 <UART_CheckIdleState>
 8003c26:	0003      	movs	r3, r0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	ffffb7ff 	.word	0xffffb7ff

08003c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	1dbb      	adds	r3, r7, #6
 8003c42:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d000      	beq.n	8003c4e <HAL_UART_Transmit+0x1a>
 8003c4c:	e08c      	b.n	8003d68 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_UART_Transmit+0x28>
 8003c54:	1dbb      	adds	r3, r7, #6
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e084      	b.n	8003d6a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	015b      	lsls	r3, r3, #5
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d109      	bne.n	8003c80 <HAL_UART_Transmit+0x4c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2201      	movs	r2, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d001      	beq.n	8003c80 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e074      	b.n	8003d6a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2284      	movs	r2, #132	@ 0x84
 8003c84:	2100      	movs	r1, #0
 8003c86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	@ 0x21
 8003c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8e:	f7fe fadb 	bl	8002248 <HAL_GetTick>
 8003c92:	0003      	movs	r3, r0
 8003c94:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1dba      	adds	r2, r7, #6
 8003c9a:	2150      	movs	r1, #80	@ 0x50
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1dba      	adds	r2, r7, #6
 8003ca4:	2152      	movs	r1, #82	@ 0x52
 8003ca6:	8812      	ldrh	r2, [r2, #0]
 8003ca8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	015b      	lsls	r3, r3, #5
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d108      	bne.n	8003cc8 <HAL_UART_Transmit+0x94>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	e003      	b.n	8003cd0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cd0:	e02f      	b.n	8003d32 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	0013      	movs	r3, r2
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	@ 0x80
 8003ce0:	f000 fc42 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 8003ce4:	1e03      	subs	r3, r0, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e03b      	b.n	8003d6a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	05d2      	lsls	r2, r2, #23
 8003d04:	0dd2      	lsrs	r2, r2, #23
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e007      	b.n	8003d20 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2252      	movs	r2, #82	@ 0x52
 8003d24:	5a9b      	ldrh	r3, [r3, r2]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b299      	uxth	r1, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2252      	movs	r2, #82	@ 0x52
 8003d30:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2252      	movs	r2, #82	@ 0x52
 8003d36:	5a9b      	ldrh	r3, [r3, r2]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1c9      	bne.n	8003cd2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0013      	movs	r3, r2
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2140      	movs	r1, #64	@ 0x40
 8003d4c:	f000 fc0c 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 8003d50:	1e03      	subs	r3, r0, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e005      	b.n	8003d6a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b008      	add	sp, #32
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b5b0      	push	{r4, r5, r7, lr}
 8003d76:	b08e      	sub	sp, #56	@ 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d7c:	231a      	movs	r3, #26
 8003d7e:	2218      	movs	r2, #24
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4ac3      	ldr	r2, [pc, #780]	@ (80040b4 <UART_SetConfig+0x340>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4abe      	ldr	r2, [pc, #760]	@ (80040b8 <UART_SetConfig+0x344>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4ab8      	ldr	r2, [pc, #736]	@ (80040bc <UART_SetConfig+0x348>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003de4:	4313      	orrs	r3, r2
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4ab4      	ldr	r2, [pc, #720]	@ (80040c0 <UART_SetConfig+0x34c>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4ab0      	ldr	r2, [pc, #704]	@ (80040c4 <UART_SetConfig+0x350>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d131      	bne.n	8003e6c <UART_SetConfig+0xf8>
 8003e08:	4baf      	ldr	r3, [pc, #700]	@ (80040c8 <UART_SetConfig+0x354>)
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d01d      	beq.n	8003e50 <UART_SetConfig+0xdc>
 8003e14:	d823      	bhi.n	8003e5e <UART_SetConfig+0xea>
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d00c      	beq.n	8003e34 <UART_SetConfig+0xc0>
 8003e1a:	d820      	bhi.n	8003e5e <UART_SetConfig+0xea>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <UART_SetConfig+0xb2>
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d00e      	beq.n	8003e42 <UART_SetConfig+0xce>
 8003e24:	e01b      	b.n	8003e5e <UART_SetConfig+0xea>
 8003e26:	231b      	movs	r3, #27
 8003e28:	2218      	movs	r2, #24
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e0b4      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003e34:	231b      	movs	r3, #27
 8003e36:	2218      	movs	r2, #24
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e0ad      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003e42:	231b      	movs	r3, #27
 8003e44:	2218      	movs	r2, #24
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	19db      	adds	r3, r3, r7
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e0a6      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003e50:	231b      	movs	r3, #27
 8003e52:	2218      	movs	r2, #24
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	2208      	movs	r2, #8
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e09f      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003e5e:	231b      	movs	r3, #27
 8003e60:	2218      	movs	r2, #24
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	19db      	adds	r3, r3, r7
 8003e66:	2210      	movs	r2, #16
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e098      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a96      	ldr	r2, [pc, #600]	@ (80040cc <UART_SetConfig+0x358>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d131      	bne.n	8003eda <UART_SetConfig+0x166>
 8003e76:	4b94      	ldr	r3, [pc, #592]	@ (80040c8 <UART_SetConfig+0x354>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d01d      	beq.n	8003ebe <UART_SetConfig+0x14a>
 8003e82:	d823      	bhi.n	8003ecc <UART_SetConfig+0x158>
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00c      	beq.n	8003ea2 <UART_SetConfig+0x12e>
 8003e88:	d820      	bhi.n	8003ecc <UART_SetConfig+0x158>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <UART_SetConfig+0x120>
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00e      	beq.n	8003eb0 <UART_SetConfig+0x13c>
 8003e92:	e01b      	b.n	8003ecc <UART_SetConfig+0x158>
 8003e94:	231b      	movs	r3, #27
 8003e96:	2218      	movs	r2, #24
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e07d      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003ea2:	231b      	movs	r3, #27
 8003ea4:	2218      	movs	r2, #24
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	19db      	adds	r3, r3, r7
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e076      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	2218      	movs	r2, #24
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	2204      	movs	r2, #4
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e06f      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003ebe:	231b      	movs	r3, #27
 8003ec0:	2218      	movs	r2, #24
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	19db      	adds	r3, r3, r7
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e068      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	2218      	movs	r2, #24
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e061      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7c      	ldr	r2, [pc, #496]	@ (80040d0 <UART_SetConfig+0x35c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d106      	bne.n	8003ef2 <UART_SetConfig+0x17e>
 8003ee4:	231b      	movs	r3, #27
 8003ee6:	2218      	movs	r2, #24
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	19db      	adds	r3, r3, r7
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e055      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a77      	ldr	r2, [pc, #476]	@ (80040d4 <UART_SetConfig+0x360>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d106      	bne.n	8003f0a <UART_SetConfig+0x196>
 8003efc:	231b      	movs	r3, #27
 8003efe:	2218      	movs	r2, #24
 8003f00:	189b      	adds	r3, r3, r2
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	e049      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80040bc <UART_SetConfig+0x348>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d13e      	bne.n	8003f92 <UART_SetConfig+0x21e>
 8003f14:	4b6c      	ldr	r3, [pc, #432]	@ (80040c8 <UART_SetConfig+0x354>)
 8003f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f18:	23c0      	movs	r3, #192	@ 0xc0
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	22c0      	movs	r2, #192	@ 0xc0
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <UART_SetConfig+0x202>
 8003f26:	22c0      	movs	r2, #192	@ 0xc0
 8003f28:	0112      	lsls	r2, r2, #4
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d82a      	bhi.n	8003f84 <UART_SetConfig+0x210>
 8003f2e:	2280      	movs	r2, #128	@ 0x80
 8003f30:	0112      	lsls	r2, r2, #4
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d011      	beq.n	8003f5a <UART_SetConfig+0x1e6>
 8003f36:	2280      	movs	r2, #128	@ 0x80
 8003f38:	0112      	lsls	r2, r2, #4
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d822      	bhi.n	8003f84 <UART_SetConfig+0x210>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <UART_SetConfig+0x1d8>
 8003f42:	2280      	movs	r2, #128	@ 0x80
 8003f44:	00d2      	lsls	r2, r2, #3
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00e      	beq.n	8003f68 <UART_SetConfig+0x1f4>
 8003f4a:	e01b      	b.n	8003f84 <UART_SetConfig+0x210>
 8003f4c:	231b      	movs	r3, #27
 8003f4e:	2218      	movs	r2, #24
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	19db      	adds	r3, r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e021      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003f5a:	231b      	movs	r3, #27
 8003f5c:	2218      	movs	r2, #24
 8003f5e:	189b      	adds	r3, r3, r2
 8003f60:	19db      	adds	r3, r3, r7
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e01a      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003f68:	231b      	movs	r3, #27
 8003f6a:	2218      	movs	r2, #24
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	19db      	adds	r3, r3, r7
 8003f70:	2204      	movs	r2, #4
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	e013      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003f76:	231b      	movs	r3, #27
 8003f78:	2218      	movs	r2, #24
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	19db      	adds	r3, r3, r7
 8003f7e:	2208      	movs	r2, #8
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e00c      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003f84:	231b      	movs	r3, #27
 8003f86:	2218      	movs	r2, #24
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	19db      	adds	r3, r3, r7
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e005      	b.n	8003f9e <UART_SetConfig+0x22a>
 8003f92:	231b      	movs	r3, #27
 8003f94:	2218      	movs	r2, #24
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	19db      	adds	r3, r3, r7
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a46      	ldr	r2, [pc, #280]	@ (80040bc <UART_SetConfig+0x348>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d000      	beq.n	8003faa <UART_SetConfig+0x236>
 8003fa8:	e09a      	b.n	80040e0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003faa:	231b      	movs	r3, #27
 8003fac:	2218      	movs	r2, #24
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	19db      	adds	r3, r3, r7
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d01d      	beq.n	8003ff4 <UART_SetConfig+0x280>
 8003fb8:	dc20      	bgt.n	8003ffc <UART_SetConfig+0x288>
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d015      	beq.n	8003fea <UART_SetConfig+0x276>
 8003fbe:	dc1d      	bgt.n	8003ffc <UART_SetConfig+0x288>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <UART_SetConfig+0x256>
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d005      	beq.n	8003fd4 <UART_SetConfig+0x260>
 8003fc8:	e018      	b.n	8003ffc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fca:	f7ff f9a3 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fd2:	e01c      	b.n	800400e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80040c8 <UART_SetConfig+0x354>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d002      	beq.n	8003fe4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003fde:	4b3e      	ldr	r3, [pc, #248]	@ (80040d8 <UART_SetConfig+0x364>)
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003fe2:	e014      	b.n	800400e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80040dc <UART_SetConfig+0x368>)
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003fe8:	e011      	b.n	800400e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7ff f8e3 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ff2:	e00c      	b.n	800400e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ffa:	e008      	b.n	800400e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004000:	231a      	movs	r3, #26
 8004002:	2218      	movs	r2, #24
 8004004:	189b      	adds	r3, r3, r2
 8004006:	19db      	adds	r3, r3, r7
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
        break;
 800400c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d100      	bne.n	8004016 <UART_SetConfig+0x2a2>
 8004014:	e133      	b.n	800427e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	0013      	movs	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	189b      	adds	r3, r3, r2
 8004020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d305      	bcc.n	8004032 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800402c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402e:	429a      	cmp	r2, r3
 8004030:	d906      	bls.n	8004040 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004032:	231a      	movs	r3, #26
 8004034:	2218      	movs	r2, #24
 8004036:	189b      	adds	r3, r3, r2
 8004038:	19db      	adds	r3, r3, r7
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	e11e      	b.n	800427e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	6939      	ldr	r1, [r7, #16]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	000b      	movs	r3, r1
 800404e:	0e1b      	lsrs	r3, r3, #24
 8004050:	0010      	movs	r0, r2
 8004052:	0205      	lsls	r5, r0, #8
 8004054:	431d      	orrs	r5, r3
 8004056:	000b      	movs	r3, r1
 8004058:	021c      	lsls	r4, r3, #8
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	1900      	adds	r0, r0, r4
 800406c:	4169      	adcs	r1, r5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f7fc f8da 	bl	8000234 <__aeabi_uldivmod>
 8004080:	0002      	movs	r2, r0
 8004082:	000b      	movs	r3, r1
 8004084:	0013      	movs	r3, r2
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408a:	23c0      	movs	r3, #192	@ 0xc0
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	429a      	cmp	r2, r3
 8004090:	d309      	bcc.n	80040a6 <UART_SetConfig+0x332>
 8004092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	035b      	lsls	r3, r3, #13
 8004098:	429a      	cmp	r2, r3
 800409a:	d204      	bcs.n	80040a6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	e0eb      	b.n	800427e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80040a6:	231a      	movs	r3, #26
 80040a8:	2218      	movs	r2, #24
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	19db      	adds	r3, r3, r7
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e0e4      	b.n	800427e <UART_SetConfig+0x50a>
 80040b4:	efff69f3 	.word	0xefff69f3
 80040b8:	ffffcfff 	.word	0xffffcfff
 80040bc:	40004800 	.word	0x40004800
 80040c0:	fffff4ff 	.word	0xfffff4ff
 80040c4:	40013800 	.word	0x40013800
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40004400 	.word	0x40004400
 80040d0:	40004c00 	.word	0x40004c00
 80040d4:	40005000 	.word	0x40005000
 80040d8:	003d0900 	.word	0x003d0900
 80040dc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d000      	beq.n	80040ee <UART_SetConfig+0x37a>
 80040ec:	e070      	b.n	80041d0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80040ee:	231b      	movs	r3, #27
 80040f0:	2218      	movs	r2, #24
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d822      	bhi.n	8004142 <UART_SetConfig+0x3ce>
 80040fc:	009a      	lsls	r2, r3, #2
 80040fe:	4b67      	ldr	r3, [pc, #412]	@ (800429c <UART_SetConfig+0x528>)
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004106:	f7ff f905 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 800410a:	0003      	movs	r3, r0
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800410e:	e021      	b.n	8004154 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004110:	f7ff f916 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8004114:	0003      	movs	r3, r0
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004118:	e01c      	b.n	8004154 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800411a:	4b61      	ldr	r3, [pc, #388]	@ (80042a0 <UART_SetConfig+0x52c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2210      	movs	r2, #16
 8004120:	4013      	ands	r3, r2
 8004122:	d002      	beq.n	800412a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004124:	4b5f      	ldr	r3, [pc, #380]	@ (80042a4 <UART_SetConfig+0x530>)
 8004126:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004128:	e014      	b.n	8004154 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800412a:	4b5f      	ldr	r3, [pc, #380]	@ (80042a8 <UART_SetConfig+0x534>)
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800412e:	e011      	b.n	8004154 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004130:	f7ff f840 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004134:	0003      	movs	r3, r0
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004138:	e00c      	b.n	8004154 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004140:	e008      	b.n	8004154 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004146:	231a      	movs	r3, #26
 8004148:	2218      	movs	r2, #24
 800414a:	189b      	adds	r3, r3, r2
 800414c:	19db      	adds	r3, r3, r7
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
        break;
 8004152:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d100      	bne.n	800415c <UART_SetConfig+0x3e8>
 800415a:	e090      	b.n	800427e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415e:	005a      	lsls	r2, r3, #1
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	18d2      	adds	r2, r2, r3
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0019      	movs	r1, r3
 800416e:	0010      	movs	r0, r2
 8004170:	f7fb ffd4 	bl	800011c <__udivsi3>
 8004174:	0003      	movs	r3, r0
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d921      	bls.n	80041c2 <UART_SetConfig+0x44e>
 800417e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004180:	2380      	movs	r3, #128	@ 0x80
 8004182:	025b      	lsls	r3, r3, #9
 8004184:	429a      	cmp	r2, r3
 8004186:	d21c      	bcs.n	80041c2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	b29a      	uxth	r2, r3
 800418c:	200e      	movs	r0, #14
 800418e:	2418      	movs	r4, #24
 8004190:	1903      	adds	r3, r0, r4
 8004192:	19db      	adds	r3, r3, r7
 8004194:	210f      	movs	r1, #15
 8004196:	438a      	bics	r2, r1
 8004198:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2207      	movs	r2, #7
 80041a2:	4013      	ands	r3, r2
 80041a4:	b299      	uxth	r1, r3
 80041a6:	1903      	adds	r3, r0, r4
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	1902      	adds	r2, r0, r4
 80041ac:	19d2      	adds	r2, r2, r7
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	1902      	adds	r2, r0, r4
 80041ba:	19d2      	adds	r2, r2, r7
 80041bc:	8812      	ldrh	r2, [r2, #0]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e05d      	b.n	800427e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80041c2:	231a      	movs	r3, #26
 80041c4:	2218      	movs	r2, #24
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	19db      	adds	r3, r3, r7
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e056      	b.n	800427e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d0:	231b      	movs	r3, #27
 80041d2:	2218      	movs	r2, #24
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d822      	bhi.n	8004224 <UART_SetConfig+0x4b0>
 80041de:	009a      	lsls	r2, r3, #2
 80041e0:	4b32      	ldr	r3, [pc, #200]	@ (80042ac <UART_SetConfig+0x538>)
 80041e2:	18d3      	adds	r3, r2, r3
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7ff f894 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80041ec:	0003      	movs	r3, r0
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041f0:	e021      	b.n	8004236 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f2:	f7ff f8a5 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 80041f6:	0003      	movs	r3, r0
 80041f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80041fa:	e01c      	b.n	8004236 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041fc:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <UART_SetConfig+0x52c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2210      	movs	r2, #16
 8004202:	4013      	ands	r3, r2
 8004204:	d002      	beq.n	800420c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004206:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <UART_SetConfig+0x530>)
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800420a:	e014      	b.n	8004236 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800420c:	4b26      	ldr	r3, [pc, #152]	@ (80042a8 <UART_SetConfig+0x534>)
 800420e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004210:	e011      	b.n	8004236 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7fe ffcf 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8004216:	0003      	movs	r3, r0
 8004218:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800421a:	e00c      	b.n	8004236 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421c:	2380      	movs	r3, #128	@ 0x80
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004222:	e008      	b.n	8004236 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004228:	231a      	movs	r3, #26
 800422a:	2218      	movs	r2, #24
 800422c:	189b      	adds	r3, r3, r2
 800422e:	19db      	adds	r3, r3, r7
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
        break;
 8004234:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	085a      	lsrs	r2, r3, #1
 8004242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004244:	18d2      	adds	r2, r2, r3
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0019      	movs	r1, r3
 800424c:	0010      	movs	r0, r2
 800424e:	f7fb ff65 	bl	800011c <__udivsi3>
 8004252:	0003      	movs	r3, r0
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	2b0f      	cmp	r3, #15
 800425a:	d90a      	bls.n	8004272 <UART_SetConfig+0x4fe>
 800425c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800425e:	2380      	movs	r3, #128	@ 0x80
 8004260:	025b      	lsls	r3, r3, #9
 8004262:	429a      	cmp	r2, r3
 8004264:	d205      	bcs.n	8004272 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	b29a      	uxth	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	e005      	b.n	800427e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004272:	231a      	movs	r3, #26
 8004274:	2218      	movs	r2, #24
 8004276:	189b      	adds	r3, r3, r2
 8004278:	19db      	adds	r3, r3, r7
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2200      	movs	r2, #0
 8004282:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2200      	movs	r2, #0
 8004288:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800428a:	231a      	movs	r3, #26
 800428c:	2218      	movs	r2, #24
 800428e:	189b      	adds	r3, r3, r2
 8004290:	19db      	adds	r3, r3, r7
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b00e      	add	sp, #56	@ 0x38
 800429a:	bdb0      	pop	{r4, r5, r7, pc}
 800429c:	080050c8 	.word	0x080050c8
 80042a0:	40021000 	.word	0x40021000
 80042a4:	003d0900 	.word	0x003d0900
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	080050ec 	.word	0x080050ec

080042b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	2201      	movs	r2, #1
 80042be:	4013      	ands	r3, r2
 80042c0:	d00b      	beq.n	80042da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a4a      	ldr	r2, [pc, #296]	@ (80043f4 <UART_AdvFeatureConfig+0x144>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	2202      	movs	r2, #2
 80042e0:	4013      	ands	r3, r2
 80042e2:	d00b      	beq.n	80042fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4a43      	ldr	r2, [pc, #268]	@ (80043f8 <UART_AdvFeatureConfig+0x148>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	0019      	movs	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	2204      	movs	r2, #4
 8004302:	4013      	ands	r3, r2
 8004304:	d00b      	beq.n	800431e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4a3b      	ldr	r2, [pc, #236]	@ (80043fc <UART_AdvFeatureConfig+0x14c>)
 800430e:	4013      	ands	r3, r2
 8004310:	0019      	movs	r1, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	2208      	movs	r2, #8
 8004324:	4013      	ands	r3, r2
 8004326:	d00b      	beq.n	8004340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4a34      	ldr	r2, [pc, #208]	@ (8004400 <UART_AdvFeatureConfig+0x150>)
 8004330:	4013      	ands	r3, r2
 8004332:	0019      	movs	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	2210      	movs	r2, #16
 8004346:	4013      	ands	r3, r2
 8004348:	d00b      	beq.n	8004362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a2c      	ldr	r2, [pc, #176]	@ (8004404 <UART_AdvFeatureConfig+0x154>)
 8004352:	4013      	ands	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	2220      	movs	r2, #32
 8004368:	4013      	ands	r3, r2
 800436a:	d00b      	beq.n	8004384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4a25      	ldr	r2, [pc, #148]	@ (8004408 <UART_AdvFeatureConfig+0x158>)
 8004374:	4013      	ands	r3, r2
 8004376:	0019      	movs	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	2240      	movs	r2, #64	@ 0x40
 800438a:	4013      	ands	r3, r2
 800438c:	d01d      	beq.n	80043ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a1d      	ldr	r2, [pc, #116]	@ (800440c <UART_AdvFeatureConfig+0x15c>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043aa:	2380      	movs	r3, #128	@ 0x80
 80043ac:	035b      	lsls	r3, r3, #13
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d10b      	bne.n	80043ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <UART_AdvFeatureConfig+0x160>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	2280      	movs	r2, #128	@ 0x80
 80043d0:	4013      	ands	r3, r2
 80043d2:	d00b      	beq.n	80043ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <UART_AdvFeatureConfig+0x164>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	fffdffff 	.word	0xfffdffff
 80043f8:	fffeffff 	.word	0xfffeffff
 80043fc:	fffbffff 	.word	0xfffbffff
 8004400:	ffff7fff 	.word	0xffff7fff
 8004404:	ffffefff 	.word	0xffffefff
 8004408:	ffffdfff 	.word	0xffffdfff
 800440c:	ffefffff 	.word	0xffefffff
 8004410:	ff9fffff 	.word	0xff9fffff
 8004414:	fff7ffff 	.word	0xfff7ffff

08004418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b092      	sub	sp, #72	@ 0x48
 800441c:	af02      	add	r7, sp, #8
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2284      	movs	r2, #132	@ 0x84
 8004424:	2100      	movs	r1, #0
 8004426:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004428:	f7fd ff0e 	bl	8002248 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2208      	movs	r2, #8
 8004438:	4013      	ands	r3, r2
 800443a:	2b08      	cmp	r3, #8
 800443c:	d12c      	bne.n	8004498 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800443e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004440:	2280      	movs	r2, #128	@ 0x80
 8004442:	0391      	lsls	r1, r2, #14
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4a46      	ldr	r2, [pc, #280]	@ (8004560 <UART_CheckIdleState+0x148>)
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	f000 f88c 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d021      	beq.n	8004498 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004454:	f3ef 8310 	mrs	r3, PRIMASK
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800445c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800445e:	2301      	movs	r3, #1
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2180      	movs	r1, #128	@ 0x80
 8004476:	438a      	bics	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	f383 8810 	msr	PRIMASK, r3
}
 8004484:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2278      	movs	r2, #120	@ 0x78
 8004490:	2100      	movs	r1, #0
 8004492:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e05f      	b.n	8004558 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2204      	movs	r2, #4
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d146      	bne.n	8004534 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a8:	2280      	movs	r2, #128	@ 0x80
 80044aa:	03d1      	lsls	r1, r2, #15
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004560 <UART_CheckIdleState+0x148>)
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f000 f858 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d03b      	beq.n	8004534 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044bc:	f3ef 8310 	mrs	r3, PRIMASK
 80044c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80044c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c6:	2301      	movs	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f383 8810 	msr	PRIMASK, r3
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4921      	ldr	r1, [pc, #132]	@ (8004564 <UART_CheckIdleState+0x14c>)
 80044de:	400a      	ands	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ee:	f3ef 8310 	mrs	r3, PRIMASK
 80044f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80044f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f8:	2301      	movs	r3, #1
 80044fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2101      	movs	r1, #1
 8004510:	438a      	bics	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2280      	movs	r2, #128	@ 0x80
 8004524:	2120      	movs	r1, #32
 8004526:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2278      	movs	r2, #120	@ 0x78
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e011      	b.n	8004558 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2280      	movs	r2, #128	@ 0x80
 800453e:	2120      	movs	r1, #32
 8004540:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2278      	movs	r2, #120	@ 0x78
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b010      	add	sp, #64	@ 0x40
 800455e:	bd80      	pop	{r7, pc}
 8004560:	01ffffff 	.word	0x01ffffff
 8004564:	fffffedf 	.word	0xfffffedf

08004568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004578:	e04b      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	3301      	adds	r3, #1
 800457e:	d048      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fd fe62 	bl	8002248 <HAL_GetTick>
 8004584:	0002      	movs	r2, r0
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e04b      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2204      	movs	r2, #4
 80045a2:	4013      	ands	r3, r2
 80045a4:	d035      	beq.n	8004612 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	2208      	movs	r2, #8
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d111      	bne.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2208      	movs	r2, #8
 80045ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f83c 	bl	800463c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2284      	movs	r2, #132	@ 0x84
 80045c8:	2108      	movs	r1, #8
 80045ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2278      	movs	r2, #120	@ 0x78
 80045d0:	2100      	movs	r1, #0
 80045d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e02c      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	2380      	movs	r3, #128	@ 0x80
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	401a      	ands	r2, r3
 80045e4:	2380      	movs	r3, #128	@ 0x80
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d112      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2280      	movs	r2, #128	@ 0x80
 80045f2:	0112      	lsls	r2, r2, #4
 80045f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 f81f 	bl	800463c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2284      	movs	r2, #132	@ 0x84
 8004602:	2120      	movs	r1, #32
 8004604:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2278      	movs	r2, #120	@ 0x78
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00f      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	425a      	negs	r2, r3
 8004622:	4153      	adcs	r3, r2
 8004624:	b2db      	uxtb	r3, r3
 8004626:	001a      	movs	r2, r3
 8004628:	1dfb      	adds	r3, r7, #7
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d0a4      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b004      	add	sp, #16
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08e      	sub	sp, #56	@ 0x38
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004644:	f3ef 8310 	mrs	r3, PRIMASK
 8004648:	617b      	str	r3, [r7, #20]
  return(result);
 800464a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464c:	637b      	str	r3, [r7, #52]	@ 0x34
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f383 8810 	msr	PRIMASK, r3
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4926      	ldr	r1, [pc, #152]	@ (8004700 <UART_EndRxTransfer+0xc4>)
 8004666:	400a      	ands	r2, r1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f383 8810 	msr	PRIMASK, r3
}
 8004674:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004676:	f3ef 8310 	mrs	r3, PRIMASK
 800467a:	623b      	str	r3, [r7, #32]
  return(result);
 800467c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004680:	2301      	movs	r3, #1
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	f383 8810 	msr	PRIMASK, r3
}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2101      	movs	r1, #1
 8004698:	438a      	bics	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a2:	f383 8810 	msr	PRIMASK, r3
}
 80046a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d118      	bne.n	80046e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b0:	f3ef 8310 	mrs	r3, PRIMASK
 80046b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ba:	2301      	movs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f383 8810 	msr	PRIMASK, r3
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2110      	movs	r1, #16
 80046d2:	438a      	bics	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2280      	movs	r2, #128	@ 0x80
 80046e6:	2120      	movs	r1, #32
 80046e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b00e      	add	sp, #56	@ 0x38
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	fffffedf 	.word	0xfffffedf

08004704 <siprintf>:
 8004704:	b40e      	push	{r1, r2, r3}
 8004706:	b500      	push	{lr}
 8004708:	490b      	ldr	r1, [pc, #44]	@ (8004738 <siprintf+0x34>)
 800470a:	b09c      	sub	sp, #112	@ 0x70
 800470c:	ab1d      	add	r3, sp, #116	@ 0x74
 800470e:	9002      	str	r0, [sp, #8]
 8004710:	9006      	str	r0, [sp, #24]
 8004712:	9107      	str	r1, [sp, #28]
 8004714:	9104      	str	r1, [sp, #16]
 8004716:	4809      	ldr	r0, [pc, #36]	@ (800473c <siprintf+0x38>)
 8004718:	4909      	ldr	r1, [pc, #36]	@ (8004740 <siprintf+0x3c>)
 800471a:	cb04      	ldmia	r3!, {r2}
 800471c:	9105      	str	r1, [sp, #20]
 800471e:	6800      	ldr	r0, [r0, #0]
 8004720:	a902      	add	r1, sp, #8
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	f000 f99e 	bl	8004a64 <_svfiprintf_r>
 8004728:	2200      	movs	r2, #0
 800472a:	9b02      	ldr	r3, [sp, #8]
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	b01c      	add	sp, #112	@ 0x70
 8004730:	bc08      	pop	{r3}
 8004732:	b003      	add	sp, #12
 8004734:	4718      	bx	r3
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	7fffffff 	.word	0x7fffffff
 800473c:	2000000c 	.word	0x2000000c
 8004740:	ffff0208 	.word	0xffff0208

08004744 <memset>:
 8004744:	0003      	movs	r3, r0
 8004746:	1882      	adds	r2, r0, r2
 8004748:	4293      	cmp	r3, r2
 800474a:	d100      	bne.n	800474e <memset+0xa>
 800474c:	4770      	bx	lr
 800474e:	7019      	strb	r1, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	e7f9      	b.n	8004748 <memset+0x4>

08004754 <__errno>:
 8004754:	4b01      	ldr	r3, [pc, #4]	@ (800475c <__errno+0x8>)
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	4770      	bx	lr
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	2000000c 	.word	0x2000000c

08004760 <__libc_init_array>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	2600      	movs	r6, #0
 8004764:	4c0c      	ldr	r4, [pc, #48]	@ (8004798 <__libc_init_array+0x38>)
 8004766:	4d0d      	ldr	r5, [pc, #52]	@ (800479c <__libc_init_array+0x3c>)
 8004768:	1b64      	subs	r4, r4, r5
 800476a:	10a4      	asrs	r4, r4, #2
 800476c:	42a6      	cmp	r6, r4
 800476e:	d109      	bne.n	8004784 <__libc_init_array+0x24>
 8004770:	2600      	movs	r6, #0
 8004772:	f000 fc65 	bl	8005040 <_init>
 8004776:	4c0a      	ldr	r4, [pc, #40]	@ (80047a0 <__libc_init_array+0x40>)
 8004778:	4d0a      	ldr	r5, [pc, #40]	@ (80047a4 <__libc_init_array+0x44>)
 800477a:	1b64      	subs	r4, r4, r5
 800477c:	10a4      	asrs	r4, r4, #2
 800477e:	42a6      	cmp	r6, r4
 8004780:	d105      	bne.n	800478e <__libc_init_array+0x2e>
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	00b3      	lsls	r3, r6, #2
 8004786:	58eb      	ldr	r3, [r5, r3]
 8004788:	4798      	blx	r3
 800478a:	3601      	adds	r6, #1
 800478c:	e7ee      	b.n	800476c <__libc_init_array+0xc>
 800478e:	00b3      	lsls	r3, r6, #2
 8004790:	58eb      	ldr	r3, [r5, r3]
 8004792:	4798      	blx	r3
 8004794:	3601      	adds	r6, #1
 8004796:	e7f2      	b.n	800477e <__libc_init_array+0x1e>
 8004798:	0800514c 	.word	0x0800514c
 800479c:	0800514c 	.word	0x0800514c
 80047a0:	08005150 	.word	0x08005150
 80047a4:	0800514c 	.word	0x0800514c

080047a8 <__retarget_lock_acquire_recursive>:
 80047a8:	4770      	bx	lr

080047aa <__retarget_lock_release_recursive>:
 80047aa:	4770      	bx	lr

080047ac <_free_r>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	0005      	movs	r5, r0
 80047b0:	1e0c      	subs	r4, r1, #0
 80047b2:	d010      	beq.n	80047d6 <_free_r+0x2a>
 80047b4:	3c04      	subs	r4, #4
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da00      	bge.n	80047be <_free_r+0x12>
 80047bc:	18e4      	adds	r4, r4, r3
 80047be:	0028      	movs	r0, r5
 80047c0:	f000 f8e0 	bl	8004984 <__malloc_lock>
 80047c4:	4a1d      	ldr	r2, [pc, #116]	@ (800483c <_free_r+0x90>)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <_free_r+0x2c>
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	6014      	str	r4, [r2, #0]
 80047d0:	0028      	movs	r0, r5
 80047d2:	f000 f8df 	bl	8004994 <__malloc_unlock>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d908      	bls.n	80047ee <_free_r+0x42>
 80047dc:	6820      	ldr	r0, [r4, #0]
 80047de:	1821      	adds	r1, r4, r0
 80047e0:	428b      	cmp	r3, r1
 80047e2:	d1f3      	bne.n	80047cc <_free_r+0x20>
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	1809      	adds	r1, r1, r0
 80047ea:	6021      	str	r1, [r4, #0]
 80047ec:	e7ee      	b.n	80047cc <_free_r+0x20>
 80047ee:	001a      	movs	r2, r3
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <_free_r+0x4e>
 80047f6:	42a3      	cmp	r3, r4
 80047f8:	d9f9      	bls.n	80047ee <_free_r+0x42>
 80047fa:	6811      	ldr	r1, [r2, #0]
 80047fc:	1850      	adds	r0, r2, r1
 80047fe:	42a0      	cmp	r0, r4
 8004800:	d10b      	bne.n	800481a <_free_r+0x6e>
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	1809      	adds	r1, r1, r0
 8004806:	1850      	adds	r0, r2, r1
 8004808:	6011      	str	r1, [r2, #0]
 800480a:	4283      	cmp	r3, r0
 800480c:	d1e0      	bne.n	80047d0 <_free_r+0x24>
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	1841      	adds	r1, r0, r1
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	6053      	str	r3, [r2, #4]
 8004818:	e7da      	b.n	80047d0 <_free_r+0x24>
 800481a:	42a0      	cmp	r0, r4
 800481c:	d902      	bls.n	8004824 <_free_r+0x78>
 800481e:	230c      	movs	r3, #12
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	e7d5      	b.n	80047d0 <_free_r+0x24>
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	1821      	adds	r1, r4, r0
 8004828:	428b      	cmp	r3, r1
 800482a:	d103      	bne.n	8004834 <_free_r+0x88>
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	1809      	adds	r1, r1, r0
 8004832:	6021      	str	r1, [r4, #0]
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6054      	str	r4, [r2, #4]
 8004838:	e7ca      	b.n	80047d0 <_free_r+0x24>
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	2000029c 	.word	0x2000029c

08004840 <sbrk_aligned>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4e0f      	ldr	r6, [pc, #60]	@ (8004880 <sbrk_aligned+0x40>)
 8004844:	000d      	movs	r5, r1
 8004846:	6831      	ldr	r1, [r6, #0]
 8004848:	0004      	movs	r4, r0
 800484a:	2900      	cmp	r1, #0
 800484c:	d102      	bne.n	8004854 <sbrk_aligned+0x14>
 800484e:	f000 fb99 	bl	8004f84 <_sbrk_r>
 8004852:	6030      	str	r0, [r6, #0]
 8004854:	0029      	movs	r1, r5
 8004856:	0020      	movs	r0, r4
 8004858:	f000 fb94 	bl	8004f84 <_sbrk_r>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d103      	bne.n	8004868 <sbrk_aligned+0x28>
 8004860:	2501      	movs	r5, #1
 8004862:	426d      	negs	r5, r5
 8004864:	0028      	movs	r0, r5
 8004866:	bd70      	pop	{r4, r5, r6, pc}
 8004868:	2303      	movs	r3, #3
 800486a:	1cc5      	adds	r5, r0, #3
 800486c:	439d      	bics	r5, r3
 800486e:	42a8      	cmp	r0, r5
 8004870:	d0f8      	beq.n	8004864 <sbrk_aligned+0x24>
 8004872:	1a29      	subs	r1, r5, r0
 8004874:	0020      	movs	r0, r4
 8004876:	f000 fb85 	bl	8004f84 <_sbrk_r>
 800487a:	3001      	adds	r0, #1
 800487c:	d1f2      	bne.n	8004864 <sbrk_aligned+0x24>
 800487e:	e7ef      	b.n	8004860 <sbrk_aligned+0x20>
 8004880:	20000298 	.word	0x20000298

08004884 <_malloc_r>:
 8004884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004886:	2203      	movs	r2, #3
 8004888:	1ccb      	adds	r3, r1, #3
 800488a:	4393      	bics	r3, r2
 800488c:	3308      	adds	r3, #8
 800488e:	0005      	movs	r5, r0
 8004890:	001f      	movs	r7, r3
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d234      	bcs.n	8004900 <_malloc_r+0x7c>
 8004896:	270c      	movs	r7, #12
 8004898:	42b9      	cmp	r1, r7
 800489a:	d833      	bhi.n	8004904 <_malloc_r+0x80>
 800489c:	0028      	movs	r0, r5
 800489e:	f000 f871 	bl	8004984 <__malloc_lock>
 80048a2:	4e37      	ldr	r6, [pc, #220]	@ (8004980 <_malloc_r+0xfc>)
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	001c      	movs	r4, r3
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	d12f      	bne.n	800490c <_malloc_r+0x88>
 80048ac:	0039      	movs	r1, r7
 80048ae:	0028      	movs	r0, r5
 80048b0:	f7ff ffc6 	bl	8004840 <sbrk_aligned>
 80048b4:	0004      	movs	r4, r0
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	d15f      	bne.n	800497a <_malloc_r+0xf6>
 80048ba:	6834      	ldr	r4, [r6, #0]
 80048bc:	9400      	str	r4, [sp, #0]
 80048be:	9b00      	ldr	r3, [sp, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d14a      	bne.n	800495a <_malloc_r+0xd6>
 80048c4:	2c00      	cmp	r4, #0
 80048c6:	d052      	beq.n	800496e <_malloc_r+0xea>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	0028      	movs	r0, r5
 80048cc:	18e3      	adds	r3, r4, r3
 80048ce:	9900      	ldr	r1, [sp, #0]
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f000 fb57 	bl	8004f84 <_sbrk_r>
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	4283      	cmp	r3, r0
 80048da:	d148      	bne.n	800496e <_malloc_r+0xea>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	0028      	movs	r0, r5
 80048e0:	1aff      	subs	r7, r7, r3
 80048e2:	0039      	movs	r1, r7
 80048e4:	f7ff ffac 	bl	8004840 <sbrk_aligned>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d040      	beq.n	800496e <_malloc_r+0xea>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	6833      	ldr	r3, [r6, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	d133      	bne.n	8004962 <_malloc_r+0xde>
 80048fa:	9b00      	ldr	r3, [sp, #0]
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	e019      	b.n	8004934 <_malloc_r+0xb0>
 8004900:	2b00      	cmp	r3, #0
 8004902:	dac9      	bge.n	8004898 <_malloc_r+0x14>
 8004904:	230c      	movs	r3, #12
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	2000      	movs	r0, #0
 800490a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800490c:	6821      	ldr	r1, [r4, #0]
 800490e:	1bc9      	subs	r1, r1, r7
 8004910:	d420      	bmi.n	8004954 <_malloc_r+0xd0>
 8004912:	290b      	cmp	r1, #11
 8004914:	d90a      	bls.n	800492c <_malloc_r+0xa8>
 8004916:	19e2      	adds	r2, r4, r7
 8004918:	6027      	str	r7, [r4, #0]
 800491a:	42a3      	cmp	r3, r4
 800491c:	d104      	bne.n	8004928 <_malloc_r+0xa4>
 800491e:	6032      	str	r2, [r6, #0]
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	6011      	str	r1, [r2, #0]
 8004924:	6053      	str	r3, [r2, #4]
 8004926:	e005      	b.n	8004934 <_malloc_r+0xb0>
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	e7f9      	b.n	8004920 <_malloc_r+0x9c>
 800492c:	6862      	ldr	r2, [r4, #4]
 800492e:	42a3      	cmp	r3, r4
 8004930:	d10e      	bne.n	8004950 <_malloc_r+0xcc>
 8004932:	6032      	str	r2, [r6, #0]
 8004934:	0028      	movs	r0, r5
 8004936:	f000 f82d 	bl	8004994 <__malloc_unlock>
 800493a:	0020      	movs	r0, r4
 800493c:	2207      	movs	r2, #7
 800493e:	300b      	adds	r0, #11
 8004940:	1d23      	adds	r3, r4, #4
 8004942:	4390      	bics	r0, r2
 8004944:	1ac2      	subs	r2, r0, r3
 8004946:	4298      	cmp	r0, r3
 8004948:	d0df      	beq.n	800490a <_malloc_r+0x86>
 800494a:	1a1b      	subs	r3, r3, r0
 800494c:	50a3      	str	r3, [r4, r2]
 800494e:	e7dc      	b.n	800490a <_malloc_r+0x86>
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e7ef      	b.n	8004934 <_malloc_r+0xb0>
 8004954:	0023      	movs	r3, r4
 8004956:	6864      	ldr	r4, [r4, #4]
 8004958:	e7a6      	b.n	80048a8 <_malloc_r+0x24>
 800495a:	9c00      	ldr	r4, [sp, #0]
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	e7ad      	b.n	80048be <_malloc_r+0x3a>
 8004962:	001a      	movs	r2, r3
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	42a3      	cmp	r3, r4
 8004968:	d1fb      	bne.n	8004962 <_malloc_r+0xde>
 800496a:	2300      	movs	r3, #0
 800496c:	e7da      	b.n	8004924 <_malloc_r+0xa0>
 800496e:	230c      	movs	r3, #12
 8004970:	0028      	movs	r0, r5
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f000 f80e 	bl	8004994 <__malloc_unlock>
 8004978:	e7c6      	b.n	8004908 <_malloc_r+0x84>
 800497a:	6007      	str	r7, [r0, #0]
 800497c:	e7da      	b.n	8004934 <_malloc_r+0xb0>
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	2000029c 	.word	0x2000029c

08004984 <__malloc_lock>:
 8004984:	b510      	push	{r4, lr}
 8004986:	4802      	ldr	r0, [pc, #8]	@ (8004990 <__malloc_lock+0xc>)
 8004988:	f7ff ff0e 	bl	80047a8 <__retarget_lock_acquire_recursive>
 800498c:	bd10      	pop	{r4, pc}
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	20000294 	.word	0x20000294

08004994 <__malloc_unlock>:
 8004994:	b510      	push	{r4, lr}
 8004996:	4802      	ldr	r0, [pc, #8]	@ (80049a0 <__malloc_unlock+0xc>)
 8004998:	f7ff ff07 	bl	80047aa <__retarget_lock_release_recursive>
 800499c:	bd10      	pop	{r4, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	20000294 	.word	0x20000294

080049a4 <__ssputs_r>:
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	688e      	ldr	r6, [r1, #8]
 80049a8:	b085      	sub	sp, #20
 80049aa:	001f      	movs	r7, r3
 80049ac:	000c      	movs	r4, r1
 80049ae:	680b      	ldr	r3, [r1, #0]
 80049b0:	9002      	str	r0, [sp, #8]
 80049b2:	9203      	str	r2, [sp, #12]
 80049b4:	42be      	cmp	r6, r7
 80049b6:	d830      	bhi.n	8004a1a <__ssputs_r+0x76>
 80049b8:	210c      	movs	r1, #12
 80049ba:	5e62      	ldrsh	r2, [r4, r1]
 80049bc:	2190      	movs	r1, #144	@ 0x90
 80049be:	00c9      	lsls	r1, r1, #3
 80049c0:	420a      	tst	r2, r1
 80049c2:	d028      	beq.n	8004a16 <__ssputs_r+0x72>
 80049c4:	2003      	movs	r0, #3
 80049c6:	6921      	ldr	r1, [r4, #16]
 80049c8:	1a5b      	subs	r3, r3, r1
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	6963      	ldr	r3, [r4, #20]
 80049ce:	4343      	muls	r3, r0
 80049d0:	9801      	ldr	r0, [sp, #4]
 80049d2:	0fdd      	lsrs	r5, r3, #31
 80049d4:	18ed      	adds	r5, r5, r3
 80049d6:	1c7b      	adds	r3, r7, #1
 80049d8:	181b      	adds	r3, r3, r0
 80049da:	106d      	asrs	r5, r5, #1
 80049dc:	42ab      	cmp	r3, r5
 80049de:	d900      	bls.n	80049e2 <__ssputs_r+0x3e>
 80049e0:	001d      	movs	r5, r3
 80049e2:	0552      	lsls	r2, r2, #21
 80049e4:	d528      	bpl.n	8004a38 <__ssputs_r+0x94>
 80049e6:	0029      	movs	r1, r5
 80049e8:	9802      	ldr	r0, [sp, #8]
 80049ea:	f7ff ff4b 	bl	8004884 <_malloc_r>
 80049ee:	1e06      	subs	r6, r0, #0
 80049f0:	d02c      	beq.n	8004a4c <__ssputs_r+0xa8>
 80049f2:	9a01      	ldr	r2, [sp, #4]
 80049f4:	6921      	ldr	r1, [r4, #16]
 80049f6:	f000 fae2 	bl	8004fbe <memcpy>
 80049fa:	89a2      	ldrh	r2, [r4, #12]
 80049fc:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <__ssputs_r+0xbc>)
 80049fe:	401a      	ands	r2, r3
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	4313      	orrs	r3, r2
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	9b01      	ldr	r3, [sp, #4]
 8004a08:	6126      	str	r6, [r4, #16]
 8004a0a:	18f6      	adds	r6, r6, r3
 8004a0c:	6026      	str	r6, [r4, #0]
 8004a0e:	003e      	movs	r6, r7
 8004a10:	6165      	str	r5, [r4, #20]
 8004a12:	1aed      	subs	r5, r5, r3
 8004a14:	60a5      	str	r5, [r4, #8]
 8004a16:	42be      	cmp	r6, r7
 8004a18:	d900      	bls.n	8004a1c <__ssputs_r+0x78>
 8004a1a:	003e      	movs	r6, r7
 8004a1c:	0032      	movs	r2, r6
 8004a1e:	9903      	ldr	r1, [sp, #12]
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	f000 fa9b 	bl	8004f5c <memmove>
 8004a26:	2000      	movs	r0, #0
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	1b9b      	subs	r3, r3, r6
 8004a2c:	60a3      	str	r3, [r4, #8]
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	199b      	adds	r3, r3, r6
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	b005      	add	sp, #20
 8004a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a38:	002a      	movs	r2, r5
 8004a3a:	9802      	ldr	r0, [sp, #8]
 8004a3c:	f000 fac8 	bl	8004fd0 <_realloc_r>
 8004a40:	1e06      	subs	r6, r0, #0
 8004a42:	d1e0      	bne.n	8004a06 <__ssputs_r+0x62>
 8004a44:	6921      	ldr	r1, [r4, #16]
 8004a46:	9802      	ldr	r0, [sp, #8]
 8004a48:	f7ff feb0 	bl	80047ac <_free_r>
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	2001      	movs	r0, #1
 8004a50:	9a02      	ldr	r2, [sp, #8]
 8004a52:	4240      	negs	r0, r0
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	89a2      	ldrh	r2, [r4, #12]
 8004a58:	3334      	adds	r3, #52	@ 0x34
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	e7e9      	b.n	8004a34 <__ssputs_r+0x90>
 8004a60:	fffffb7f 	.word	0xfffffb7f

08004a64 <_svfiprintf_r>:
 8004a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a66:	b0a1      	sub	sp, #132	@ 0x84
 8004a68:	9003      	str	r0, [sp, #12]
 8004a6a:	001d      	movs	r5, r3
 8004a6c:	898b      	ldrh	r3, [r1, #12]
 8004a6e:	000f      	movs	r7, r1
 8004a70:	0016      	movs	r6, r2
 8004a72:	061b      	lsls	r3, r3, #24
 8004a74:	d511      	bpl.n	8004a9a <_svfiprintf_r+0x36>
 8004a76:	690b      	ldr	r3, [r1, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10e      	bne.n	8004a9a <_svfiprintf_r+0x36>
 8004a7c:	2140      	movs	r1, #64	@ 0x40
 8004a7e:	f7ff ff01 	bl	8004884 <_malloc_r>
 8004a82:	6038      	str	r0, [r7, #0]
 8004a84:	6138      	str	r0, [r7, #16]
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d105      	bne.n	8004a96 <_svfiprintf_r+0x32>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	9a03      	ldr	r2, [sp, #12]
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	2001      	movs	r0, #1
 8004a92:	4240      	negs	r0, r0
 8004a94:	e0cf      	b.n	8004c36 <_svfiprintf_r+0x1d2>
 8004a96:	2340      	movs	r3, #64	@ 0x40
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	ac08      	add	r4, sp, #32
 8004a9e:	6163      	str	r3, [r4, #20]
 8004aa0:	3320      	adds	r3, #32
 8004aa2:	7663      	strb	r3, [r4, #25]
 8004aa4:	3310      	adds	r3, #16
 8004aa6:	76a3      	strb	r3, [r4, #26]
 8004aa8:	9507      	str	r5, [sp, #28]
 8004aaa:	0035      	movs	r5, r6
 8004aac:	782b      	ldrb	r3, [r5, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <_svfiprintf_r+0x52>
 8004ab2:	2b25      	cmp	r3, #37	@ 0x25
 8004ab4:	d148      	bne.n	8004b48 <_svfiprintf_r+0xe4>
 8004ab6:	1bab      	subs	r3, r5, r6
 8004ab8:	9305      	str	r3, [sp, #20]
 8004aba:	42b5      	cmp	r5, r6
 8004abc:	d00b      	beq.n	8004ad6 <_svfiprintf_r+0x72>
 8004abe:	0032      	movs	r2, r6
 8004ac0:	0039      	movs	r1, r7
 8004ac2:	9803      	ldr	r0, [sp, #12]
 8004ac4:	f7ff ff6e 	bl	80049a4 <__ssputs_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d100      	bne.n	8004ace <_svfiprintf_r+0x6a>
 8004acc:	e0ae      	b.n	8004c2c <_svfiprintf_r+0x1c8>
 8004ace:	6963      	ldr	r3, [r4, #20]
 8004ad0:	9a05      	ldr	r2, [sp, #20]
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	6163      	str	r3, [r4, #20]
 8004ad6:	782b      	ldrb	r3, [r5, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d100      	bne.n	8004ade <_svfiprintf_r+0x7a>
 8004adc:	e0a6      	b.n	8004c2c <_svfiprintf_r+0x1c8>
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4252      	negs	r2, r2
 8004ae4:	6062      	str	r2, [r4, #4]
 8004ae6:	a904      	add	r1, sp, #16
 8004ae8:	3254      	adds	r2, #84	@ 0x54
 8004aea:	1852      	adds	r2, r2, r1
 8004aec:	1c6e      	adds	r6, r5, #1
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	60e3      	str	r3, [r4, #12]
 8004af2:	60a3      	str	r3, [r4, #8]
 8004af4:	7013      	strb	r3, [r2, #0]
 8004af6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004af8:	4b54      	ldr	r3, [pc, #336]	@ (8004c4c <_svfiprintf_r+0x1e8>)
 8004afa:	2205      	movs	r2, #5
 8004afc:	0018      	movs	r0, r3
 8004afe:	7831      	ldrb	r1, [r6, #0]
 8004b00:	9305      	str	r3, [sp, #20]
 8004b02:	f000 fa51 	bl	8004fa8 <memchr>
 8004b06:	1c75      	adds	r5, r6, #1
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d11f      	bne.n	8004b4c <_svfiprintf_r+0xe8>
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	06d3      	lsls	r3, r2, #27
 8004b10:	d504      	bpl.n	8004b1c <_svfiprintf_r+0xb8>
 8004b12:	2353      	movs	r3, #83	@ 0x53
 8004b14:	a904      	add	r1, sp, #16
 8004b16:	185b      	adds	r3, r3, r1
 8004b18:	2120      	movs	r1, #32
 8004b1a:	7019      	strb	r1, [r3, #0]
 8004b1c:	0713      	lsls	r3, r2, #28
 8004b1e:	d504      	bpl.n	8004b2a <_svfiprintf_r+0xc6>
 8004b20:	2353      	movs	r3, #83	@ 0x53
 8004b22:	a904      	add	r1, sp, #16
 8004b24:	185b      	adds	r3, r3, r1
 8004b26:	212b      	movs	r1, #43	@ 0x2b
 8004b28:	7019      	strb	r1, [r3, #0]
 8004b2a:	7833      	ldrb	r3, [r6, #0]
 8004b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b2e:	d016      	beq.n	8004b5e <_svfiprintf_r+0xfa>
 8004b30:	0035      	movs	r5, r6
 8004b32:	2100      	movs	r1, #0
 8004b34:	200a      	movs	r0, #10
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	782a      	ldrb	r2, [r5, #0]
 8004b3a:	1c6e      	adds	r6, r5, #1
 8004b3c:	3a30      	subs	r2, #48	@ 0x30
 8004b3e:	2a09      	cmp	r2, #9
 8004b40:	d950      	bls.n	8004be4 <_svfiprintf_r+0x180>
 8004b42:	2900      	cmp	r1, #0
 8004b44:	d111      	bne.n	8004b6a <_svfiprintf_r+0x106>
 8004b46:	e017      	b.n	8004b78 <_svfiprintf_r+0x114>
 8004b48:	3501      	adds	r5, #1
 8004b4a:	e7af      	b.n	8004aac <_svfiprintf_r+0x48>
 8004b4c:	9b05      	ldr	r3, [sp, #20]
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	1ac0      	subs	r0, r0, r3
 8004b52:	2301      	movs	r3, #1
 8004b54:	4083      	lsls	r3, r0
 8004b56:	4313      	orrs	r3, r2
 8004b58:	002e      	movs	r6, r5
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e7cc      	b.n	8004af8 <_svfiprintf_r+0x94>
 8004b5e:	9b07      	ldr	r3, [sp, #28]
 8004b60:	1d19      	adds	r1, r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	9107      	str	r1, [sp, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db01      	blt.n	8004b6e <_svfiprintf_r+0x10a>
 8004b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b6c:	e004      	b.n	8004b78 <_svfiprintf_r+0x114>
 8004b6e:	425b      	negs	r3, r3
 8004b70:	60e3      	str	r3, [r4, #12]
 8004b72:	2302      	movs	r3, #2
 8004b74:	4313      	orrs	r3, r2
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	782b      	ldrb	r3, [r5, #0]
 8004b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b7c:	d10c      	bne.n	8004b98 <_svfiprintf_r+0x134>
 8004b7e:	786b      	ldrb	r3, [r5, #1]
 8004b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b82:	d134      	bne.n	8004bee <_svfiprintf_r+0x18a>
 8004b84:	9b07      	ldr	r3, [sp, #28]
 8004b86:	3502      	adds	r5, #2
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	9207      	str	r2, [sp, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da01      	bge.n	8004b96 <_svfiprintf_r+0x132>
 8004b92:	2301      	movs	r3, #1
 8004b94:	425b      	negs	r3, r3
 8004b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b98:	4e2d      	ldr	r6, [pc, #180]	@ (8004c50 <_svfiprintf_r+0x1ec>)
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	0030      	movs	r0, r6
 8004b9e:	7829      	ldrb	r1, [r5, #0]
 8004ba0:	f000 fa02 	bl	8004fa8 <memchr>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d006      	beq.n	8004bb6 <_svfiprintf_r+0x152>
 8004ba8:	2340      	movs	r3, #64	@ 0x40
 8004baa:	1b80      	subs	r0, r0, r6
 8004bac:	4083      	lsls	r3, r0
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	7829      	ldrb	r1, [r5, #0]
 8004bb8:	2206      	movs	r2, #6
 8004bba:	4826      	ldr	r0, [pc, #152]	@ (8004c54 <_svfiprintf_r+0x1f0>)
 8004bbc:	1c6e      	adds	r6, r5, #1
 8004bbe:	7621      	strb	r1, [r4, #24]
 8004bc0:	f000 f9f2 	bl	8004fa8 <memchr>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d038      	beq.n	8004c3a <_svfiprintf_r+0x1d6>
 8004bc8:	4b23      	ldr	r3, [pc, #140]	@ (8004c58 <_svfiprintf_r+0x1f4>)
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d122      	bne.n	8004c14 <_svfiprintf_r+0x1b0>
 8004bce:	2207      	movs	r2, #7
 8004bd0:	9b07      	ldr	r3, [sp, #28]
 8004bd2:	3307      	adds	r3, #7
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	6963      	ldr	r3, [r4, #20]
 8004bdc:	9a04      	ldr	r2, [sp, #16]
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	6163      	str	r3, [r4, #20]
 8004be2:	e762      	b.n	8004aaa <_svfiprintf_r+0x46>
 8004be4:	4343      	muls	r3, r0
 8004be6:	0035      	movs	r5, r6
 8004be8:	2101      	movs	r1, #1
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	e7a4      	b.n	8004b38 <_svfiprintf_r+0xd4>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	782a      	ldrb	r2, [r5, #0]
 8004bfa:	1c6e      	adds	r6, r5, #1
 8004bfc:	3a30      	subs	r2, #48	@ 0x30
 8004bfe:	2a09      	cmp	r2, #9
 8004c00:	d903      	bls.n	8004c0a <_svfiprintf_r+0x1a6>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0c8      	beq.n	8004b98 <_svfiprintf_r+0x134>
 8004c06:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c08:	e7c6      	b.n	8004b98 <_svfiprintf_r+0x134>
 8004c0a:	4341      	muls	r1, r0
 8004c0c:	0035      	movs	r5, r6
 8004c0e:	2301      	movs	r3, #1
 8004c10:	1889      	adds	r1, r1, r2
 8004c12:	e7f1      	b.n	8004bf8 <_svfiprintf_r+0x194>
 8004c14:	aa07      	add	r2, sp, #28
 8004c16:	9200      	str	r2, [sp, #0]
 8004c18:	0021      	movs	r1, r4
 8004c1a:	003a      	movs	r2, r7
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <_svfiprintf_r+0x1f8>)
 8004c1e:	9803      	ldr	r0, [sp, #12]
 8004c20:	e000      	b.n	8004c24 <_svfiprintf_r+0x1c0>
 8004c22:	bf00      	nop
 8004c24:	9004      	str	r0, [sp, #16]
 8004c26:	9b04      	ldr	r3, [sp, #16]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	d1d6      	bne.n	8004bda <_svfiprintf_r+0x176>
 8004c2c:	89bb      	ldrh	r3, [r7, #12]
 8004c2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c30:	065b      	lsls	r3, r3, #25
 8004c32:	d500      	bpl.n	8004c36 <_svfiprintf_r+0x1d2>
 8004c34:	e72c      	b.n	8004a90 <_svfiprintf_r+0x2c>
 8004c36:	b021      	add	sp, #132	@ 0x84
 8004c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3a:	aa07      	add	r2, sp, #28
 8004c3c:	9200      	str	r2, [sp, #0]
 8004c3e:	0021      	movs	r1, r4
 8004c40:	003a      	movs	r2, r7
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <_svfiprintf_r+0x1f8>)
 8004c44:	9803      	ldr	r0, [sp, #12]
 8004c46:	f000 f87b 	bl	8004d40 <_printf_i>
 8004c4a:	e7eb      	b.n	8004c24 <_svfiprintf_r+0x1c0>
 8004c4c:	08005110 	.word	0x08005110
 8004c50:	08005116 	.word	0x08005116
 8004c54:	0800511a 	.word	0x0800511a
 8004c58:	00000000 	.word	0x00000000
 8004c5c:	080049a5 	.word	0x080049a5

08004c60 <_printf_common>:
 8004c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c62:	0016      	movs	r6, r2
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	688a      	ldr	r2, [r1, #8]
 8004c68:	690b      	ldr	r3, [r1, #16]
 8004c6a:	000c      	movs	r4, r1
 8004c6c:	9000      	str	r0, [sp, #0]
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	da00      	bge.n	8004c74 <_printf_common+0x14>
 8004c72:	0013      	movs	r3, r2
 8004c74:	0022      	movs	r2, r4
 8004c76:	6033      	str	r3, [r6, #0]
 8004c78:	3243      	adds	r2, #67	@ 0x43
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	2a00      	cmp	r2, #0
 8004c7e:	d001      	beq.n	8004c84 <_printf_common+0x24>
 8004c80:	3301      	adds	r3, #1
 8004c82:	6033      	str	r3, [r6, #0]
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	d502      	bpl.n	8004c90 <_printf_common+0x30>
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	6033      	str	r3, [r6, #0]
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	2306      	movs	r3, #6
 8004c94:	0015      	movs	r5, r2
 8004c96:	401d      	ands	r5, r3
 8004c98:	421a      	tst	r2, r3
 8004c9a:	d027      	beq.n	8004cec <_printf_common+0x8c>
 8004c9c:	0023      	movs	r3, r4
 8004c9e:	3343      	adds	r3, #67	@ 0x43
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	1e5a      	subs	r2, r3, #1
 8004ca4:	4193      	sbcs	r3, r2
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	0692      	lsls	r2, r2, #26
 8004caa:	d430      	bmi.n	8004d0e <_printf_common+0xae>
 8004cac:	0022      	movs	r2, r4
 8004cae:	9901      	ldr	r1, [sp, #4]
 8004cb0:	9800      	ldr	r0, [sp, #0]
 8004cb2:	9d08      	ldr	r5, [sp, #32]
 8004cb4:	3243      	adds	r2, #67	@ 0x43
 8004cb6:	47a8      	blx	r5
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d025      	beq.n	8004d08 <_printf_common+0xa8>
 8004cbc:	2206      	movs	r2, #6
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	2500      	movs	r5, #0
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d105      	bne.n	8004cd4 <_printf_common+0x74>
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	68e5      	ldr	r5, [r4, #12]
 8004ccc:	1aed      	subs	r5, r5, r3
 8004cce:	43eb      	mvns	r3, r5
 8004cd0:	17db      	asrs	r3, r3, #31
 8004cd2:	401d      	ands	r5, r3
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	6922      	ldr	r2, [r4, #16]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	dd01      	ble.n	8004ce0 <_printf_common+0x80>
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	18ed      	adds	r5, r5, r3
 8004ce0:	2600      	movs	r6, #0
 8004ce2:	42b5      	cmp	r5, r6
 8004ce4:	d120      	bne.n	8004d28 <_printf_common+0xc8>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e010      	b.n	8004d0c <_printf_common+0xac>
 8004cea:	3501      	adds	r5, #1
 8004cec:	68e3      	ldr	r3, [r4, #12]
 8004cee:	6832      	ldr	r2, [r6, #0]
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	42ab      	cmp	r3, r5
 8004cf4:	ddd2      	ble.n	8004c9c <_printf_common+0x3c>
 8004cf6:	0022      	movs	r2, r4
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	9901      	ldr	r1, [sp, #4]
 8004cfc:	9800      	ldr	r0, [sp, #0]
 8004cfe:	9f08      	ldr	r7, [sp, #32]
 8004d00:	3219      	adds	r2, #25
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	d1f0      	bne.n	8004cea <_printf_common+0x8a>
 8004d08:	2001      	movs	r0, #1
 8004d0a:	4240      	negs	r0, r0
 8004d0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d0e:	2030      	movs	r0, #48	@ 0x30
 8004d10:	18e1      	adds	r1, r4, r3
 8004d12:	3143      	adds	r1, #67	@ 0x43
 8004d14:	7008      	strb	r0, [r1, #0]
 8004d16:	0021      	movs	r1, r4
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	3145      	adds	r1, #69	@ 0x45
 8004d1c:	7809      	ldrb	r1, [r1, #0]
 8004d1e:	18a2      	adds	r2, r4, r2
 8004d20:	3243      	adds	r2, #67	@ 0x43
 8004d22:	3302      	adds	r3, #2
 8004d24:	7011      	strb	r1, [r2, #0]
 8004d26:	e7c1      	b.n	8004cac <_printf_common+0x4c>
 8004d28:	0022      	movs	r2, r4
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	9901      	ldr	r1, [sp, #4]
 8004d2e:	9800      	ldr	r0, [sp, #0]
 8004d30:	9f08      	ldr	r7, [sp, #32]
 8004d32:	321a      	adds	r2, #26
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0e6      	beq.n	8004d08 <_printf_common+0xa8>
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7d1      	b.n	8004ce2 <_printf_common+0x82>
	...

08004d40 <_printf_i>:
 8004d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d42:	b08b      	sub	sp, #44	@ 0x2c
 8004d44:	9206      	str	r2, [sp, #24]
 8004d46:	000a      	movs	r2, r1
 8004d48:	3243      	adds	r2, #67	@ 0x43
 8004d4a:	9307      	str	r3, [sp, #28]
 8004d4c:	9005      	str	r0, [sp, #20]
 8004d4e:	9203      	str	r2, [sp, #12]
 8004d50:	7e0a      	ldrb	r2, [r1, #24]
 8004d52:	000c      	movs	r4, r1
 8004d54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d56:	2a78      	cmp	r2, #120	@ 0x78
 8004d58:	d809      	bhi.n	8004d6e <_printf_i+0x2e>
 8004d5a:	2a62      	cmp	r2, #98	@ 0x62
 8004d5c:	d80b      	bhi.n	8004d76 <_printf_i+0x36>
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	d100      	bne.n	8004d64 <_printf_i+0x24>
 8004d62:	e0bc      	b.n	8004ede <_printf_i+0x19e>
 8004d64:	497b      	ldr	r1, [pc, #492]	@ (8004f54 <_printf_i+0x214>)
 8004d66:	9104      	str	r1, [sp, #16]
 8004d68:	2a58      	cmp	r2, #88	@ 0x58
 8004d6a:	d100      	bne.n	8004d6e <_printf_i+0x2e>
 8004d6c:	e090      	b.n	8004e90 <_printf_i+0x150>
 8004d6e:	0025      	movs	r5, r4
 8004d70:	3542      	adds	r5, #66	@ 0x42
 8004d72:	702a      	strb	r2, [r5, #0]
 8004d74:	e022      	b.n	8004dbc <_printf_i+0x7c>
 8004d76:	0010      	movs	r0, r2
 8004d78:	3863      	subs	r0, #99	@ 0x63
 8004d7a:	2815      	cmp	r0, #21
 8004d7c:	d8f7      	bhi.n	8004d6e <_printf_i+0x2e>
 8004d7e:	f7fb f9c3 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d82:	0016      	.short	0x0016
 8004d84:	fff6001f 	.word	0xfff6001f
 8004d88:	fff6fff6 	.word	0xfff6fff6
 8004d8c:	001ffff6 	.word	0x001ffff6
 8004d90:	fff6fff6 	.word	0xfff6fff6
 8004d94:	fff6fff6 	.word	0xfff6fff6
 8004d98:	003600a1 	.word	0x003600a1
 8004d9c:	fff60080 	.word	0xfff60080
 8004da0:	00b2fff6 	.word	0x00b2fff6
 8004da4:	0036fff6 	.word	0x0036fff6
 8004da8:	fff6fff6 	.word	0xfff6fff6
 8004dac:	0084      	.short	0x0084
 8004dae:	0025      	movs	r5, r4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	3542      	adds	r5, #66	@ 0x42
 8004db4:	1d11      	adds	r1, r2, #4
 8004db6:	6019      	str	r1, [r3, #0]
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	702b      	strb	r3, [r5, #0]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0a0      	b.n	8004f02 <_printf_i+0x1c2>
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	6809      	ldr	r1, [r1, #0]
 8004dc4:	1d02      	adds	r2, r0, #4
 8004dc6:	060d      	lsls	r5, r1, #24
 8004dc8:	d50b      	bpl.n	8004de2 <_printf_i+0xa2>
 8004dca:	6806      	ldr	r6, [r0, #0]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	2e00      	cmp	r6, #0
 8004dd0:	da03      	bge.n	8004dda <_printf_i+0x9a>
 8004dd2:	232d      	movs	r3, #45	@ 0x2d
 8004dd4:	9a03      	ldr	r2, [sp, #12]
 8004dd6:	4276      	negs	r6, r6
 8004dd8:	7013      	strb	r3, [r2, #0]
 8004dda:	4b5e      	ldr	r3, [pc, #376]	@ (8004f54 <_printf_i+0x214>)
 8004ddc:	270a      	movs	r7, #10
 8004dde:	9304      	str	r3, [sp, #16]
 8004de0:	e018      	b.n	8004e14 <_printf_i+0xd4>
 8004de2:	6806      	ldr	r6, [r0, #0]
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	0649      	lsls	r1, r1, #25
 8004de8:	d5f1      	bpl.n	8004dce <_printf_i+0x8e>
 8004dea:	b236      	sxth	r6, r6
 8004dec:	e7ef      	b.n	8004dce <_printf_i+0x8e>
 8004dee:	6808      	ldr	r0, [r1, #0]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	c940      	ldmia	r1!, {r6}
 8004df4:	0605      	lsls	r5, r0, #24
 8004df6:	d402      	bmi.n	8004dfe <_printf_i+0xbe>
 8004df8:	0640      	lsls	r0, r0, #25
 8004dfa:	d500      	bpl.n	8004dfe <_printf_i+0xbe>
 8004dfc:	b2b6      	uxth	r6, r6
 8004dfe:	6019      	str	r1, [r3, #0]
 8004e00:	4b54      	ldr	r3, [pc, #336]	@ (8004f54 <_printf_i+0x214>)
 8004e02:	270a      	movs	r7, #10
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	2a6f      	cmp	r2, #111	@ 0x6f
 8004e08:	d100      	bne.n	8004e0c <_printf_i+0xcc>
 8004e0a:	3f02      	subs	r7, #2
 8004e0c:	0023      	movs	r3, r4
 8004e0e:	2200      	movs	r2, #0
 8004e10:	3343      	adds	r3, #67	@ 0x43
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	60a3      	str	r3, [r4, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	db03      	blt.n	8004e24 <_printf_i+0xe4>
 8004e1c:	2104      	movs	r1, #4
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	438a      	bics	r2, r1
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	2e00      	cmp	r6, #0
 8004e26:	d102      	bne.n	8004e2e <_printf_i+0xee>
 8004e28:	9d03      	ldr	r5, [sp, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <_printf_i+0x108>
 8004e2e:	9d03      	ldr	r5, [sp, #12]
 8004e30:	0030      	movs	r0, r6
 8004e32:	0039      	movs	r1, r7
 8004e34:	f7fb f9f8 	bl	8000228 <__aeabi_uidivmod>
 8004e38:	9b04      	ldr	r3, [sp, #16]
 8004e3a:	3d01      	subs	r5, #1
 8004e3c:	5c5b      	ldrb	r3, [r3, r1]
 8004e3e:	702b      	strb	r3, [r5, #0]
 8004e40:	0033      	movs	r3, r6
 8004e42:	0006      	movs	r6, r0
 8004e44:	429f      	cmp	r7, r3
 8004e46:	d9f3      	bls.n	8004e30 <_printf_i+0xf0>
 8004e48:	2f08      	cmp	r7, #8
 8004e4a:	d109      	bne.n	8004e60 <_printf_i+0x120>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	07db      	lsls	r3, r3, #31
 8004e50:	d506      	bpl.n	8004e60 <_printf_i+0x120>
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	6923      	ldr	r3, [r4, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	dc02      	bgt.n	8004e60 <_printf_i+0x120>
 8004e5a:	2330      	movs	r3, #48	@ 0x30
 8004e5c:	3d01      	subs	r5, #1
 8004e5e:	702b      	strb	r3, [r5, #0]
 8004e60:	9b03      	ldr	r3, [sp, #12]
 8004e62:	1b5b      	subs	r3, r3, r5
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	9b07      	ldr	r3, [sp, #28]
 8004e68:	0021      	movs	r1, r4
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	9805      	ldr	r0, [sp, #20]
 8004e6e:	9b06      	ldr	r3, [sp, #24]
 8004e70:	aa09      	add	r2, sp, #36	@ 0x24
 8004e72:	f7ff fef5 	bl	8004c60 <_printf_common>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d148      	bne.n	8004f0c <_printf_i+0x1cc>
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	4240      	negs	r0, r0
 8004e7e:	b00b      	add	sp, #44	@ 0x2c
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e82:	2220      	movs	r2, #32
 8004e84:	6809      	ldr	r1, [r1, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	6022      	str	r2, [r4, #0]
 8004e8a:	2278      	movs	r2, #120	@ 0x78
 8004e8c:	4932      	ldr	r1, [pc, #200]	@ (8004f58 <_printf_i+0x218>)
 8004e8e:	9104      	str	r1, [sp, #16]
 8004e90:	0021      	movs	r1, r4
 8004e92:	3145      	adds	r1, #69	@ 0x45
 8004e94:	700a      	strb	r2, [r1, #0]
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	c940      	ldmia	r1!, {r6}
 8004e9c:	0610      	lsls	r0, r2, #24
 8004e9e:	d402      	bmi.n	8004ea6 <_printf_i+0x166>
 8004ea0:	0650      	lsls	r0, r2, #25
 8004ea2:	d500      	bpl.n	8004ea6 <_printf_i+0x166>
 8004ea4:	b2b6      	uxth	r6, r6
 8004ea6:	6019      	str	r1, [r3, #0]
 8004ea8:	07d3      	lsls	r3, r2, #31
 8004eaa:	d502      	bpl.n	8004eb2 <_printf_i+0x172>
 8004eac:	2320      	movs	r3, #32
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	2e00      	cmp	r6, #0
 8004eb4:	d001      	beq.n	8004eba <_printf_i+0x17a>
 8004eb6:	2710      	movs	r7, #16
 8004eb8:	e7a8      	b.n	8004e0c <_printf_i+0xcc>
 8004eba:	2220      	movs	r2, #32
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	4393      	bics	r3, r2
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	e7f8      	b.n	8004eb6 <_printf_i+0x176>
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	680d      	ldr	r5, [r1, #0]
 8004ec8:	1d10      	adds	r0, r2, #4
 8004eca:	6949      	ldr	r1, [r1, #20]
 8004ecc:	6018      	str	r0, [r3, #0]
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	062e      	lsls	r6, r5, #24
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0x198>
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <_printf_i+0x19e>
 8004ed8:	066d      	lsls	r5, r5, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0x194>
 8004edc:	8019      	strh	r1, [r3, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9d03      	ldr	r5, [sp, #12]
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	e7bf      	b.n	8004e66 <_printf_i+0x126>
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	1d11      	adds	r1, r2, #4
 8004eea:	6019      	str	r1, [r3, #0]
 8004eec:	6815      	ldr	r5, [r2, #0]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	f000 f858 	bl	8004fa8 <memchr>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d001      	beq.n	8004f00 <_printf_i+0x1c0>
 8004efc:	1b40      	subs	r0, r0, r5
 8004efe:	6060      	str	r0, [r4, #4]
 8004f00:	6863      	ldr	r3, [r4, #4]
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	2300      	movs	r3, #0
 8004f06:	9a03      	ldr	r2, [sp, #12]
 8004f08:	7013      	strb	r3, [r2, #0]
 8004f0a:	e7ac      	b.n	8004e66 <_printf_i+0x126>
 8004f0c:	002a      	movs	r2, r5
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	9906      	ldr	r1, [sp, #24]
 8004f12:	9805      	ldr	r0, [sp, #20]
 8004f14:	9d07      	ldr	r5, [sp, #28]
 8004f16:	47a8      	blx	r5
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d0ae      	beq.n	8004e7a <_printf_i+0x13a>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	079b      	lsls	r3, r3, #30
 8004f20:	d415      	bmi.n	8004f4e <_printf_i+0x20e>
 8004f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	4298      	cmp	r0, r3
 8004f28:	daa9      	bge.n	8004e7e <_printf_i+0x13e>
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	e7a7      	b.n	8004e7e <_printf_i+0x13e>
 8004f2e:	0022      	movs	r2, r4
 8004f30:	2301      	movs	r3, #1
 8004f32:	9906      	ldr	r1, [sp, #24]
 8004f34:	9805      	ldr	r0, [sp, #20]
 8004f36:	9e07      	ldr	r6, [sp, #28]
 8004f38:	3219      	adds	r2, #25
 8004f3a:	47b0      	blx	r6
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d09c      	beq.n	8004e7a <_printf_i+0x13a>
 8004f40:	3501      	adds	r5, #1
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	42ab      	cmp	r3, r5
 8004f4a:	dcf0      	bgt.n	8004f2e <_printf_i+0x1ee>
 8004f4c:	e7e9      	b.n	8004f22 <_printf_i+0x1e2>
 8004f4e:	2500      	movs	r5, #0
 8004f50:	e7f7      	b.n	8004f42 <_printf_i+0x202>
 8004f52:	46c0      	nop			@ (mov r8, r8)
 8004f54:	08005121 	.word	0x08005121
 8004f58:	08005132 	.word	0x08005132

08004f5c <memmove>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4288      	cmp	r0, r1
 8004f60:	d806      	bhi.n	8004f70 <memmove+0x14>
 8004f62:	2300      	movs	r3, #0
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d008      	beq.n	8004f7a <memmove+0x1e>
 8004f68:	5ccc      	ldrb	r4, [r1, r3]
 8004f6a:	54c4      	strb	r4, [r0, r3]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	e7f9      	b.n	8004f64 <memmove+0x8>
 8004f70:	188b      	adds	r3, r1, r2
 8004f72:	4298      	cmp	r0, r3
 8004f74:	d2f5      	bcs.n	8004f62 <memmove+0x6>
 8004f76:	3a01      	subs	r2, #1
 8004f78:	d200      	bcs.n	8004f7c <memmove+0x20>
 8004f7a:	bd10      	pop	{r4, pc}
 8004f7c:	5c8b      	ldrb	r3, [r1, r2]
 8004f7e:	5483      	strb	r3, [r0, r2]
 8004f80:	e7f9      	b.n	8004f76 <memmove+0x1a>
	...

08004f84 <_sbrk_r>:
 8004f84:	2300      	movs	r3, #0
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	4d06      	ldr	r5, [pc, #24]	@ (8004fa4 <_sbrk_r+0x20>)
 8004f8a:	0004      	movs	r4, r0
 8004f8c:	0008      	movs	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fd f88e 	bl	80020b0 <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_sbrk_r+0x1c>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d000      	beq.n	8004fa0 <_sbrk_r+0x1c>
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	20000290 	.word	0x20000290

08004fa8 <memchr>:
 8004fa8:	b2c9      	uxtb	r1, r1
 8004faa:	1882      	adds	r2, r0, r2
 8004fac:	4290      	cmp	r0, r2
 8004fae:	d101      	bne.n	8004fb4 <memchr+0xc>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	4770      	bx	lr
 8004fb4:	7803      	ldrb	r3, [r0, #0]
 8004fb6:	428b      	cmp	r3, r1
 8004fb8:	d0fb      	beq.n	8004fb2 <memchr+0xa>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	e7f6      	b.n	8004fac <memchr+0x4>

08004fbe <memcpy>:
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d100      	bne.n	8004fc8 <memcpy+0xa>
 8004fc6:	bd10      	pop	{r4, pc}
 8004fc8:	5ccc      	ldrb	r4, [r1, r3]
 8004fca:	54c4      	strb	r4, [r0, r3]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	e7f8      	b.n	8004fc2 <memcpy+0x4>

08004fd0 <_realloc_r>:
 8004fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd2:	0006      	movs	r6, r0
 8004fd4:	000c      	movs	r4, r1
 8004fd6:	0015      	movs	r5, r2
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	d105      	bne.n	8004fe8 <_realloc_r+0x18>
 8004fdc:	0011      	movs	r1, r2
 8004fde:	f7ff fc51 	bl	8004884 <_malloc_r>
 8004fe2:	0004      	movs	r4, r0
 8004fe4:	0020      	movs	r0, r4
 8004fe6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	d103      	bne.n	8004ff4 <_realloc_r+0x24>
 8004fec:	f7ff fbde 	bl	80047ac <_free_r>
 8004ff0:	2400      	movs	r4, #0
 8004ff2:	e7f7      	b.n	8004fe4 <_realloc_r+0x14>
 8004ff4:	f000 f81b 	bl	800502e <_malloc_usable_size_r>
 8004ff8:	0007      	movs	r7, r0
 8004ffa:	4285      	cmp	r5, r0
 8004ffc:	d802      	bhi.n	8005004 <_realloc_r+0x34>
 8004ffe:	0843      	lsrs	r3, r0, #1
 8005000:	42ab      	cmp	r3, r5
 8005002:	d3ef      	bcc.n	8004fe4 <_realloc_r+0x14>
 8005004:	0029      	movs	r1, r5
 8005006:	0030      	movs	r0, r6
 8005008:	f7ff fc3c 	bl	8004884 <_malloc_r>
 800500c:	9001      	str	r0, [sp, #4]
 800500e:	2800      	cmp	r0, #0
 8005010:	d0ee      	beq.n	8004ff0 <_realloc_r+0x20>
 8005012:	002a      	movs	r2, r5
 8005014:	42bd      	cmp	r5, r7
 8005016:	d900      	bls.n	800501a <_realloc_r+0x4a>
 8005018:	003a      	movs	r2, r7
 800501a:	0021      	movs	r1, r4
 800501c:	9801      	ldr	r0, [sp, #4]
 800501e:	f7ff ffce 	bl	8004fbe <memcpy>
 8005022:	0021      	movs	r1, r4
 8005024:	0030      	movs	r0, r6
 8005026:	f7ff fbc1 	bl	80047ac <_free_r>
 800502a:	9c01      	ldr	r4, [sp, #4]
 800502c:	e7da      	b.n	8004fe4 <_realloc_r+0x14>

0800502e <_malloc_usable_size_r>:
 800502e:	1f0b      	subs	r3, r1, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1f18      	subs	r0, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	da01      	bge.n	800503c <_malloc_usable_size_r+0xe>
 8005038:	580b      	ldr	r3, [r1, r0]
 800503a:	18c0      	adds	r0, r0, r3
 800503c:	4770      	bx	lr
	...

08005040 <_init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr

0800504c <_fini>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005052:	bc08      	pop	{r3}
 8005054:	469e      	mov	lr, r3
 8005056:	4770      	bx	lr
