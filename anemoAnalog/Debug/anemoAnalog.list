
anemoAnalog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800426c  0800426c  0000526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004328  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  08004384  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08004384  00006390  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6cc  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5f  00000000  00000000  00010750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  000123b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b5  00000000  00000000  00012c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b19  00000000  00000000  0001331d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b46d  00000000  00000000  00027e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fc87  00000000  00000000  000332a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e4  00000000  00000000  000b2f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b5254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004254 	.word	0x08004254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004254 	.word	0x08004254

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fb10 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f844 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f966 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 80004cc:	f000 f946 	bl	800075c <MX_DMA_Init>
  MX_ADC_Init();
 80004d0:	f000 f8b0 	bl	8000634 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f912 	bl	80006fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <main+0x80>)
 80004da:	2100      	movs	r1, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 f831 	bl	8001544 <HAL_ADCEx_Calibration_Start>
HAL_ADC_Start_DMA(&hadc,(uint32_t*)&direction,1);
 80004e2:	4917      	ldr	r1, [pc, #92]	@ (8000540 <main+0x84>)
 80004e4:	4b15      	ldr	r3, [pc, #84]	@ (800053c <main+0x80>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fdf3 	bl	80010d4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   HAL_ADC_Start(&hadc);
 80004ee:	4b13      	ldr	r3, [pc, #76]	@ (800053c <main+0x80>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fcff 	bl	8000ef4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc,1000);
 80004f6:	23fa      	movs	r3, #250	@ 0xfa
 80004f8:	009a      	lsls	r2, r3, #2
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <main+0x80>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fd4c 	bl	8000f9c <HAL_ADC_PollForConversion>
	  	direction= HAL_ADC_GetValue(&hadc);
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <main+0x80>)
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fe66 	bl	80011d8 <HAL_ADC_GetValue>
 800050c:	0002      	movs	r2, r0
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <main+0x84>)
 8000510:	601a      	str	r2, [r3, #0]
	  	sprintf(readval,"val: %lu\r\n",direction);
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <main+0x84>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	490b      	ldr	r1, [pc, #44]	@ (8000544 <main+0x88>)
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <main+0x8c>)
 800051a:	0018      	movs	r0, r3
 800051c:	f003 f9fc 	bl	8003918 <siprintf>
	  	HAL_UART_Transmit(&huart2,(uint8_t *)readval,sizeof(readval),HAL_MAX_DELAY);
 8000520:	2301      	movs	r3, #1
 8000522:	425b      	negs	r3, r3
 8000524:	4908      	ldr	r1, [pc, #32]	@ (8000548 <main+0x8c>)
 8000526:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x90>)
 8000528:	2296      	movs	r2, #150	@ 0x96
 800052a:	f002 fc8d 	bl	8002e48 <HAL_UART_Transmit>
	  	HAL_Delay(1000);
 800052e:	23fa      	movs	r3, #250	@ 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fb46 	bl	8000bc4 <HAL_Delay>
  {   HAL_ADC_Start(&hadc);
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	e7d8      	b.n	80004ee <main+0x32>
 800053c:	20000078 	.word	0x20000078
 8000540:	200001a4 	.word	0x200001a4
 8000544:	0800426c 	.word	0x0800426c
 8000548:	200001a8 	.word	0x200001a8
 800054c:	2000011c 	.word	0x2000011c

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b09d      	sub	sp, #116	@ 0x74
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	2438      	movs	r4, #56	@ 0x38
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	2338      	movs	r3, #56	@ 0x38
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f003 f9f9 	bl	8003958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	2324      	movs	r3, #36	@ 0x24
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	0018      	movs	r0, r3
 800056c:	2314      	movs	r3, #20
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f003 f9f1 	bl	8003958 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	2324      	movs	r3, #36	@ 0x24
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f003 f9ea 	bl	8003958 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	4b29      	ldr	r3, [pc, #164]	@ (800062c <SystemClock_Config+0xdc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a29      	ldr	r2, [pc, #164]	@ (8000630 <SystemClock_Config+0xe0>)
 800058a:	401a      	ands	r2, r3
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <SystemClock_Config+0xdc>)
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	0109      	lsls	r1, r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000596:	0021      	movs	r1, r4
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2202      	movs	r2, #2
 800059c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2210      	movs	r2, #16
 80005a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2202      	movs	r2, #2
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	0312      	lsls	r2, r2, #12
 80005bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	0412      	lsls	r2, r2, #16
 80005c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fc95 	bl	8001ef8 <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005d2:	f000 f925 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	2124      	movs	r1, #36	@ 0x24
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	220f      	movs	r2, #15
 80005dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2203      	movs	r2, #3
 80005e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2101      	movs	r1, #1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 f850 	bl	80026a0 <HAL_RCC_ClockConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000604:	f000 f90c 	bl	8000820 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000608:	003b      	movs	r3, r7
 800060a:	2202      	movs	r2, #2
 800060c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800060e:	003b      	movs	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000614:	003b      	movs	r3, r7
 8000616:	0018      	movs	r0, r3
 8000618:	f002 fa66 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000620:	f000 f8fe 	bl	8000820 <Error_Handler>
  }
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b01d      	add	sp, #116	@ 0x74
 800062a:	bd90      	pop	{r4, r7, pc}
 800062c:	40007000 	.word	0x40007000
 8000630:	ffffe7ff 	.word	0xffffe7ff

08000634 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	003b      	movs	r3, r7
 800063c:	0018      	movs	r0, r3
 800063e:	2308      	movs	r3, #8
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f003 f988 	bl	8003958 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <MX_ADC_Init+0xc0>)
 800064a:	4a2b      	ldr	r2, [pc, #172]	@ (80006f8 <MX_ADC_Init+0xc4>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000650:	2200      	movs	r2, #0
 8000652:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000654:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	05d2      	lsls	r2, r2, #23
 800065a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <MX_ADC_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000664:	2206      	movs	r2, #6
 8000666:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_ADC_Init+0xc0>)
 800066a:	2201      	movs	r2, #1
 800066c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000676:	2220      	movs	r2, #32
 8000678:	2101      	movs	r1, #1
 800067a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_ADC_Init+0xc0>)
 800067e:	2221      	movs	r2, #33	@ 0x21
 8000680:	2100      	movs	r1, #0
 8000682:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_ADC_Init+0xc0>)
 800068c:	22c2      	movs	r2, #194	@ 0xc2
 800068e:	32ff      	adds	r2, #255	@ 0xff
 8000690:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_ADC_Init+0xc0>)
 8000694:	222c      	movs	r2, #44	@ 0x2c
 8000696:	2100      	movs	r1, #0
 8000698:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_ADC_Init+0xc0>)
 800069c:	2204      	movs	r2, #4
 800069e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_ADC_Init+0xc0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_ADC_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_ADC_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_ADC_Init+0xc0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_ADC_Init+0xc0>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 faa6 	bl	8000c0c <HAL_ADC_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006c4:	f000 f8ac 	bl	8000820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	0152      	lsls	r2, r2, #5
 80006d4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d6:	003a      	movs	r2, r7
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_ADC_Init+0xc0>)
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fd9f 	bl	8001220 <HAL_ADC_ConfigChannel>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006e6:	f000 f89b 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000078 	.word	0x20000078
 80006f8:	40012400 	.word	0x40012400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	22e1      	movs	r2, #225	@ 0xe1
 800070a:	0252      	lsls	r2, r2, #9
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fb2d 	bl	8002da0 <HAL_UART_Init>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f869 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000011c 	.word	0x2000011c
 8000758:	40004400 	.word	0x40004400

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_DMA_Init+0x38>)
 8000764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_DMA_Init+0x38>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	631a      	str	r2, [r3, #48]	@ 0x30
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_DMA_Init+0x38>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2009      	movs	r0, #9
 8000780:	f001 f82a 	bl	80017d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000784:	2009      	movs	r0, #9
 8000786:	f001 f83c 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b089      	sub	sp, #36	@ 0x24
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	240c      	movs	r4, #12
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f003 f8d5 	bl	8003958 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_GPIO_Init+0x80>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	01d2      	lsls	r2, r2, #7
 80007e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	22c4      	movs	r2, #196	@ 0xc4
 80007ea:	0392      	lsls	r2, r2, #14
 80007ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a09      	ldr	r2, [pc, #36]	@ (800081c <MX_GPIO_Init+0x84>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f001 f9d8 	bl	8001bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2007      	movs	r0, #7
 8000806:	f000 ffe7 	bl	80017d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800080a:	2007      	movs	r0, #7
 800080c:	f000 fff9 	bl	8001802 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b009      	add	sp, #36	@ 0x24
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	50000400 	.word	0x50000400

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <HAL_MspInit+0x24>)
 8000832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_MspInit+0x24>)
 8000836:	2101      	movs	r1, #1
 8000838:	430a      	orrs	r2, r1
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <HAL_MspInit+0x24>)
 800083e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <HAL_MspInit+0x24>)
 8000842:	2180      	movs	r1, #128	@ 0x80
 8000844:	0549      	lsls	r1, r1, #21
 8000846:	430a      	orrs	r2, r1
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	240c      	movs	r4, #12
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f003 f876 	bl	8003958 <memset>
  if(hadc->Instance==ADC1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a2a      	ldr	r2, [pc, #168]	@ (800091c <HAL_ADC_MspInit+0xc8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d14d      	bne.n	8000912 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000876:	4b2a      	ldr	r3, [pc, #168]	@ (8000920 <HAL_ADC_MspInit+0xcc>)
 8000878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <HAL_ADC_MspInit+0xcc>)
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	0089      	lsls	r1, r1, #2
 8000880:	430a      	orrs	r2, r1
 8000882:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <HAL_ADC_MspInit+0xcc>)
 8000886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <HAL_ADC_MspInit+0xcc>)
 800088a:	2101      	movs	r1, #1
 800088c:	430a      	orrs	r2, r1
 800088e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <HAL_ADC_MspInit+0xcc>)
 8000892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000894:	2201      	movs	r2, #1
 8000896:	4013      	ands	r3, r2
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2203      	movs	r2, #3
 80008a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	193a      	adds	r2, r7, r4
 80008b0:	23a0      	movs	r3, #160	@ 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 f97a 	bl	8001bb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008be:	4a1a      	ldr	r2, [pc, #104]	@ (8000928 <HAL_ADC_MspInit+0xd4>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008dc:	2280      	movs	r2, #128	@ 0x80
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	00d2      	lsls	r2, r2, #3
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008ec:	2220      	movs	r2, #32
 80008ee:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 ff9f 	bl	800183c <HAL_DMA_Init>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000902:	f7ff ff8d 	bl	8000820 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 800090a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_ADC_MspInit+0xd0>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b009      	add	sp, #36	@ 0x24
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	40012400 	.word	0x40012400
 8000920:	40021000 	.word	0x40021000
 8000924:	200000d4 	.word	0x200000d4
 8000928:	40020008 	.word	0x40020008

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	240c      	movs	r4, #12
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	2314      	movs	r3, #20
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f003 f80a 	bl	8003958 <memset>
  if(huart->Instance==USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <HAL_UART_MspInit+0x80>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d129      	bne.n	80009a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_UART_MspInit+0x84>)
 8000950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0x84>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	0289      	lsls	r1, r1, #10
 8000958:	430a      	orrs	r2, r1
 800095a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <HAL_UART_MspInit+0x84>)
 800095e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <HAL_UART_MspInit+0x84>)
 8000962:	2101      	movs	r1, #1
 8000964:	430a      	orrs	r2, r1
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <HAL_UART_MspInit+0x84>)
 800096a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096c:	2201      	movs	r2, #1
 800096e:	4013      	ands	r3, r2
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8000974:	0021      	movs	r1, r4
 8000976:	187b      	adds	r3, r7, r1
 8000978:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_UART_MspInit+0x88>)
 800097a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2202      	movs	r2, #2
 8000980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2202      	movs	r2, #2
 800098c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2204      	movs	r2, #4
 8000992:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	187a      	adds	r2, r7, r1
 8000996:	23a0      	movs	r3, #160	@ 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 f907 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b009      	add	sp, #36	@ 0x24
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	00008004 	.word	0x00008004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8d4 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009ee:	2380      	movs	r3, #128	@ 0x80
 80009f0:	01db      	lsls	r3, r3, #7
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fa5a 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <DMA1_Channel1_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fff6 	bl	80019f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	200000d4 	.word	0x200000d4

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f002 ff8e 	bl	8003968 <__errno>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	18d2      	adds	r2, r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <_sbrk+0x64>)
 8000a68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b006      	add	sp, #24
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20005000 	.word	0x20005000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	20000240 	.word	0x20000240
 8000a80:	20000390 	.word	0x20000390

08000a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a92:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a94:	f7ff fff6 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 ff59 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fcfb 	bl	80004bc <main>

08000ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
   ldr   r0, =_estack
 8000ac8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ad4:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8000ad8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000adc:	20000390 	.word	0x20000390

08000ae0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_COMP_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_Init+0x3c>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_Init+0x3c>)
 8000af6:	2140      	movs	r1, #64	@ 0x40
 8000af8:	430a      	orrs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 f811 	bl	8000b24 <HAL_InitTick>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	e001      	b.n	8000b12 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b0e:	f7ff fe8d 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_InitTick+0x5c>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	23fa      	movs	r3, #250	@ 0xfa
 8000b38:	0098      	lsls	r0, r3, #2
 8000b3a:	f7ff faef 	bl	800011c <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0019      	movs	r1, r3
 8000b42:	0020      	movs	r0, r4
 8000b44:	f7ff faea 	bl	800011c <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fe69 	bl	8001822 <HAL_SYSTICK_Config>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e00f      	b.n	8000b78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d80b      	bhi.n	8000b76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fe36 	bl	80017d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_InitTick+0x64>)
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	18d2      	adds	r2, r2, r3
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_IncTick+0x20>)
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000244 	.word	0x20000244

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	@ (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000244 	.word	0x20000244

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001a      	movs	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e159      	b.n	8000ed2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10a      	bne.n	8000c3c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2250      	movs	r2, #80	@ 0x50
 8000c30:	2100      	movs	r1, #0
 8000c32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff fe0c 	bl	8000854 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c40:	2210      	movs	r2, #16
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b10      	cmp	r3, #16
 8000c46:	d005      	beq.n	8000c54 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000c52:	d00b      	beq.n	8000c6c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c58:	2210      	movs	r2, #16
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2250      	movs	r2, #80	@ 0x50
 8000c64:	2100      	movs	r1, #0
 8000c66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e132      	b.n	8000ed2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c70:	4a9a      	ldr	r2, [pc, #616]	@ (8000edc <HAL_ADC_Init+0x2d0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	2202      	movs	r2, #2
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2203      	movs	r2, #3
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d108      	bne.n	8000c9c <HAL_ADC_Init+0x90>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_ADC_Init+0x90>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <HAL_ADC_Init+0x92>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d149      	bne.n	8000d36 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	23c0      	movs	r3, #192	@ 0xc0
 8000ca8:	061b      	lsls	r3, r3, #24
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d00b      	beq.n	8000cc6 <HAL_ADC_Init+0xba>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d005      	beq.n	8000cc6 <HAL_ADC_Init+0xba>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	2380      	movs	r3, #128	@ 0x80
 8000cc0:	061b      	lsls	r3, r3, #24
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d111      	bne.n	8000cea <HAL_ADC_Init+0xde>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	0892      	lsrs	r2, r2, #2
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6919      	ldr	r1, [r3, #16]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	e014      	b.n	8000d14 <HAL_ADC_Init+0x108>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	0892      	lsrs	r2, r2, #2
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	4b79      	ldr	r3, [pc, #484]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b78      	ldr	r3, [pc, #480]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d00:	4978      	ldr	r1, [pc, #480]	@ (8000ee4 <HAL_ADC_Init+0x2d8>)
 8000d02:	400a      	ands	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	4b76      	ldr	r3, [pc, #472]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d08:	6819      	ldr	r1, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4b74      	ldr	r3, [pc, #464]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2118      	movs	r1, #24
 8000d20:	438a      	bics	r2, r1
 8000d22:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68d9      	ldr	r1, [r3, #12]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000d36:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b69      	ldr	r3, [pc, #420]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d3c:	496a      	ldr	r1, [pc, #424]	@ (8000ee8 <HAL_ADC_Init+0x2dc>)
 8000d3e:	400a      	ands	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000d42:	4b67      	ldr	r3, [pc, #412]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4a:	065a      	lsls	r2, r3, #25
 8000d4c:	4b64      	ldr	r3, [pc, #400]	@ (8000ee0 <HAL_ADC_Init+0x2d4>)
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d108      	bne.n	8000d72 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2180      	movs	r1, #128	@ 0x80
 8000d6c:	0549      	lsls	r1, r1, #21
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	495b      	ldr	r1, [pc, #364]	@ (8000eec <HAL_ADC_Init+0x2e0>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68d9      	ldr	r1, [r3, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_Init+0x18c>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e000      	b.n	8000d9a <HAL_ADC_Init+0x18e>
 8000d98:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000d9a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2020      	movs	r0, #32
 8000da0:	5c1b      	ldrb	r3, [r3, r0]
 8000da2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000da4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	202c      	movs	r0, #44	@ 0x2c
 8000daa:	5c1b      	ldrb	r3, [r3, r0]
 8000dac:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dae:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000db4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000dbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dc4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd2:	23c2      	movs	r3, #194	@ 0xc2
 8000dd4:	33ff      	adds	r3, #255	@ 0xff
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d00b      	beq.n	8000df2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68d9      	ldr	r1, [r3, #12]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2221      	movs	r2, #33	@ 0x21
 8000df6:	5c9b      	ldrb	r3, [r3, r2]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d11a      	bne.n	8000e32 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2220      	movs	r2, #32
 8000e00:	5c9b      	ldrb	r3, [r3, r2]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	0249      	lsls	r1, r1, #9
 8000e14:	430a      	orrs	r2, r1
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	e00b      	b.n	8000e32 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e1e:	2220      	movs	r2, #32
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d11f      	bne.n	8000e7a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	492a      	ldr	r1, [pc, #168]	@ (8000ef0 <HAL_ADC_Init+0x2e4>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6919      	ldr	r1, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e58:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000e5e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2101      	movs	r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	e00e      	b.n	8000e98 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d107      	bne.n	8000e98 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2101      	movs	r1, #1
 8000e94:	438a      	bics	r2, r1
 8000e96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2107      	movs	r1, #7
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6959      	ldr	r1, [r3, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4393      	bics	r3, r2
 8000ec8:	2201      	movs	r2, #1
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	fffffefd 	.word	0xfffffefd
 8000ee0:	40012708 	.word	0x40012708
 8000ee4:	ffc3ffff 	.word	0xffc3ffff
 8000ee8:	fdffffff 	.word	0xfdffffff
 8000eec:	fffe0219 	.word	0xfffe0219
 8000ef0:	fffffc03 	.word	0xfffffc03

08000ef4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	230f      	movs	r3, #15
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d138      	bne.n	8000f82 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2250      	movs	r2, #80	@ 0x50
 8000f14:	5c9b      	ldrb	r3, [r3, r2]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Start+0x2a>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e038      	b.n	8000f90 <HAL_ADC_Start+0x9c>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2250      	movs	r2, #80	@ 0x50
 8000f22:	2101      	movs	r1, #1
 8000f24:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d007      	beq.n	8000f3e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f2e:	230f      	movs	r3, #15
 8000f30:	18fc      	adds	r4, r7, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 f9f9 	bl	800132c <ADC_Enable>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d120      	bne.n	8000f8a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f4c:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <HAL_ADC_Start+0xa4>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	0052      	lsls	r2, r2, #1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2250      	movs	r2, #80	@ 0x50
 8000f64:	2100      	movs	r1, #0
 8000f66:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	221c      	movs	r2, #28
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	e003      	b.n	8000f8a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f82:	230f      	movs	r3, #15
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	2202      	movs	r2, #2
 8000f88:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b005      	add	sp, #20
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	fffff0fe 	.word	0xfffff0fe

08000f9c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d102      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e014      	b.n	8000fe6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fce:	2220      	movs	r2, #32
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2250      	movs	r2, #80	@ 0x50
 8000fda:	2100      	movs	r1, #0
 8000fdc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e072      	b.n	80010c8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fe6:	f7ff fde3 	bl	8000bb0 <HAL_GetTick>
 8000fea:	0003      	movs	r3, r0
 8000fec:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fee:	e01f      	b.n	8001030 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	d01c      	beq.n	8001030 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <HAL_ADC_PollForConversion+0x70>
 8000ffc:	f7ff fdd8 	bl	8000bb0 <HAL_GetTick>
 8001000:	0002      	movs	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d211      	bcs.n	8001030 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	d10b      	bne.n	8001030 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101c:	2204      	movs	r2, #4
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2250      	movs	r2, #80	@ 0x50
 8001028:	2100      	movs	r1, #0
 800102a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e04b      	b.n	80010c8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	d0d9      	beq.n	8000ff0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	23c0      	movs	r3, #192	@ 0xc0
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4013      	ands	r3, r2
 8001056:	d12e      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2220      	movs	r2, #32
 800105c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	d129      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2208      	movs	r2, #8
 800106a:	4013      	ands	r3, r2
 800106c:	2b08      	cmp	r3, #8
 800106e:	d122      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2204      	movs	r2, #4
 8001078:	4013      	ands	r3, r2
 800107a:	d110      	bne.n	800109e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	210c      	movs	r1, #12
 8001088:	438a      	bics	r2, r1
 800108a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001090:	4a0f      	ldr	r2, [pc, #60]	@ (80010d0 <HAL_ADC_PollForConversion+0x134>)
 8001092:	4013      	ands	r3, r2
 8001094:	2201      	movs	r2, #1
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	@ 0x54
 800109c:	e00b      	b.n	80010b6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010a2:	2220      	movs	r2, #32
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	2201      	movs	r2, #1
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b004      	add	sp, #16
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	fffffefe 	.word	0xfffffefe

080010d4 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2317      	movs	r3, #23
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4013      	ands	r3, r2
 80010f2:	d15e      	bne.n	80011b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2250      	movs	r2, #80	@ 0x50
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADC_Start_DMA+0x2e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e05e      	b.n	80011c0 <HAL_ADC_Start_DMA+0xec>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2250      	movs	r2, #80	@ 0x50
 8001106:	2101      	movs	r1, #1
 8001108:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d007      	beq.n	8001132 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001122:	2317      	movs	r3, #23
 8001124:	18fc      	adds	r4, r7, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	0018      	movs	r0, r3
 800112a:	f000 f8ff 	bl	800132c <ADC_Enable>
 800112e:	0003      	movs	r3, r0
 8001130:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001132:	2317      	movs	r3, #23
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d13e      	bne.n	80011ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001140:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <HAL_ADC_Start_DMA+0xf4>)
 8001142:	4013      	ands	r3, r2
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	431a      	orrs	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2200      	movs	r2, #0
 8001152:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2250      	movs	r2, #80	@ 0x50
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <HAL_ADC_Start_DMA+0xf8>)
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a19      	ldr	r2, [pc, #100]	@ (80011d0 <HAL_ADC_Start_DMA+0xfc>)
 800116a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <HAL_ADC_Start_DMA+0x100>)
 8001172:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	221c      	movs	r2, #28
 800117a:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	430a      	orrs	r2, r1
 800118a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3340      	adds	r3, #64	@ 0x40
 8001196:	0019      	movs	r1, r3
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f000 fbc6 	bl	800192c <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2104      	movs	r1, #4
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	e003      	b.n	80011ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011b2:	2317      	movs	r3, #23
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2202      	movs	r2, #2
 80011b8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ba:	2317      	movs	r3, #23
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b007      	add	sp, #28
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	fffff0fe 	.word	0xfffff0fe
 80011cc:	080013fd 	.word	0x080013fd
 80011d0:	080014b1 	.word	0x080014b1
 80011d4:	080014cf 	.word	0x080014cf

080011d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2250      	movs	r2, #80	@ 0x50
 800122e:	5c9b      	ldrb	r3, [r3, r2]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x18>
 8001234:	2302      	movs	r3, #2
 8001236:	e06c      	b.n	8001312 <HAL_ADC_ConfigChannel+0xf2>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2250      	movs	r2, #80	@ 0x50
 800123c:	2101      	movs	r1, #1
 800123e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2204      	movs	r2, #4
 8001248:	4013      	ands	r3, r2
 800124a:	d00b      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001250:	2220      	movs	r2, #32
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2250      	movs	r2, #80	@ 0x50
 800125c:	2100      	movs	r1, #0
 800125e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e056      	b.n	8001312 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a2c      	ldr	r2, [pc, #176]	@ (800131c <HAL_ADC_ConfigChannel+0xfc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d028      	beq.n	80012c0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	035b      	lsls	r3, r3, #13
 800127a:	0b5a      	lsrs	r2, r3, #13
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	02db      	lsls	r3, r3, #11
 800128c:	4013      	ands	r3, r2
 800128e:	d009      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 8001296:	2180      	movs	r1, #128	@ 0x80
 8001298:	0409      	lsls	r1, r1, #16
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800129e:	200a      	movs	r0, #10
 80012a0:	f000 f930 	bl	8001504 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	d02b      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	03c9      	lsls	r1, r1, #15
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e023      	b.n	8001308 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	035b      	lsls	r3, r3, #13
 80012cc:	0b5b      	lsrs	r3, r3, #13
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	02db      	lsls	r3, r3, #11
 80012e0:	4013      	ands	r3, r2
 80012e2:	d005      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 80012ea:	490e      	ldr	r1, [pc, #56]	@ (8001324 <HAL_ADC_ConfigChannel+0x104>)
 80012ec:	400a      	ands	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	029b      	lsls	r3, r3, #10
 80012f8:	4013      	ands	r3, r2
 80012fa:	d005      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_ADC_ConfigChannel+0x100>)
 8001302:	4909      	ldr	r1, [pc, #36]	@ (8001328 <HAL_ADC_ConfigChannel+0x108>)
 8001304:	400a      	ands	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2250      	movs	r2, #80	@ 0x50
 800130c:	2100      	movs	r1, #0
 800130e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	00001001 	.word	0x00001001
 8001320:	40012708 	.word	0x40012708
 8001324:	ff7fffff 	.word	0xff7fffff
 8001328:	ffbfffff 	.word	0xffbfffff

0800132c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <ADC_Enable+0x2c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	4013      	ands	r3, r2
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <ADC_Enable+0x2c>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <ADC_Enable+0x2e>
 8001358:	2300      	movs	r3, #0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d146      	bne.n	80013ec <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <ADC_Enable+0xcc>)
 8001366:	4013      	ands	r3, r2
 8001368:	d00d      	beq.n	8001386 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136e:	2210      	movs	r2, #16
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	2201      	movs	r2, #1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e033      	b.n	80013ee <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001396:	2001      	movs	r0, #1
 8001398:	f000 f8b4 	bl	8001504 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800139c:	f7ff fc08 	bl	8000bb0 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013a4:	e01b      	b.n	80013de <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013a6:	f7ff fc03 	bl	8000bb0 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b0a      	cmp	r3, #10
 80013b2:	d914      	bls.n	80013de <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d00d      	beq.n	80013de <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c6:	2210      	movs	r2, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	2201      	movs	r2, #1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d1dc      	bne.n	80013a6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	80000017 	.word	0x80000017

080013fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001408:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140e:	2250      	movs	r2, #80	@ 0x50
 8001410:	4013      	ands	r3, r2
 8001412:	d141      	bne.n	8001498 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001418:	2280      	movs	r2, #128	@ 0x80
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	431a      	orrs	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	23c0      	movs	r3, #192	@ 0xc0
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4013      	ands	r3, r2
 800142e:	d12e      	bne.n	800148e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2220      	movs	r2, #32
 8001434:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d129      	bne.n	800148e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2208      	movs	r2, #8
 8001442:	4013      	ands	r3, r2
 8001444:	2b08      	cmp	r3, #8
 8001446:	d122      	bne.n	800148e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2204      	movs	r2, #4
 8001450:	4013      	ands	r3, r2
 8001452:	d110      	bne.n	8001476 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	210c      	movs	r1, #12
 8001460:	438a      	bics	r2, r1
 8001462:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001468:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <ADC_DMAConvCplt+0xb0>)
 800146a:	4013      	ands	r3, r2
 800146c:	2201      	movs	r2, #1
 800146e:	431a      	orrs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	655a      	str	r2, [r3, #84]	@ 0x54
 8001474:	e00b      	b.n	800148e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147a:	2220      	movs	r2, #32
 800147c:	431a      	orrs	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001486:	2201      	movs	r2, #1
 8001488:	431a      	orrs	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff feac 	bl	80011ee <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001496:	e005      	b.n	80014a4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	0010      	movs	r0, r2
 80014a2:	4798      	blx	r3
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	fffffefe 	.word	0xfffffefe

080014b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fe9c 	bl	80011fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e0:	2240      	movs	r2, #64	@ 0x40
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	2204      	movs	r2, #4
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff fe89 	bl	800120e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}

08001504 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <ADC_DelayMicroSecond+0x38>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	490b      	ldr	r1, [pc, #44]	@ (8001540 <ADC_DelayMicroSecond+0x3c>)
 8001512:	0018      	movs	r0, r3
 8001514:	f7fe fe02 	bl	800011c <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	001a      	movs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4353      	muls	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001522:	e002      	b.n	800152a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3b01      	subs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f9      	bne.n	8001524 <ADC_DelayMicroSecond+0x20>
  }
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	20000000 	.word	0x20000000
 8001540:	000f4240 	.word	0x000f4240

08001544 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	2317      	movs	r3, #23
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2250      	movs	r2, #80	@ 0x50
 8001562:	5c9b      	ldrb	r3, [r3, r2]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADCEx_Calibration_Start+0x28>
 8001568:	2302      	movs	r3, #2
 800156a:	e083      	b.n	8001674 <HAL_ADCEx_Calibration_Start+0x130>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2250      	movs	r2, #80	@ 0x50
 8001570:	2101      	movs	r1, #1
 8001572:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2203      	movs	r2, #3
 800157c:	4013      	ands	r3, r2
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_ADCEx_Calibration_Start+0x50>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_ADCEx_Calibration_Start+0x50>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <HAL_ADCEx_Calibration_Start+0x52>
 8001594:	2300      	movs	r3, #0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d15b      	bne.n	8001652 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	4a37      	ldr	r2, [pc, #220]	@ (800167c <HAL_ADCEx_Calibration_Start+0x138>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	2202      	movs	r2, #2
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2203      	movs	r2, #3
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2103      	movs	r1, #3
 80015c2:	438a      	bics	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	0609      	lsls	r1, r1, #24
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80015d8:	f7ff faea 	bl	8000bb0 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015e0:	e01d      	b.n	800161e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015e2:	f7ff fae5 	bl	8000bb0 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b0a      	cmp	r3, #10
 80015ee:	d916      	bls.n	800161e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	0fdb      	lsrs	r3, r3, #31
 80015f8:	07da      	lsls	r2, r3, #31
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	429a      	cmp	r2, r3
 8001600:	d10d      	bne.n	800161e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001606:	2212      	movs	r2, #18
 8001608:	4393      	bics	r3, r2
 800160a:	2210      	movs	r2, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2250      	movs	r2, #80	@ 0x50
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e02a      	b.n	8001674 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	0fdb      	lsrs	r3, r3, #31
 8001626:	07da      	lsls	r2, r3, #31
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	061b      	lsls	r3, r3, #24
 800162c:	429a      	cmp	r2, r3
 800162e:	d0d8      	beq.n	80015e2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68d9      	ldr	r1, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	430a      	orrs	r2, r1
 800163e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	2203      	movs	r2, #3
 8001646:	4393      	bics	r3, r2
 8001648:	2201      	movs	r2, #1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001650:	e009      	b.n	8001666 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001656:	2220      	movs	r2, #32
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800165e:	2317      	movs	r3, #23
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2250      	movs	r2, #80	@ 0x50
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800166e:	2317      	movs	r3, #23
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b006      	add	sp, #24
 800167a:	bd80      	pop	{r7, pc}
 800167c:	fffffefd 	.word	0xfffffefd

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	0002      	movs	r2, r0
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800168c:	1dfb      	adds	r3, r7, #7
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b7f      	cmp	r3, #127	@ 0x7f
 8001692:	d809      	bhi.n	80016a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	001a      	movs	r2, r3
 800169a:	231f      	movs	r3, #31
 800169c:	401a      	ands	r2, r3
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_EnableIRQ+0x30>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	4091      	lsls	r1, r2
 80016a4:	000a      	movs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
  }
}
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	0002      	movs	r2, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016c8:	d828      	bhi.n	800171c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001788 <__NVIC_SetPriority+0xd4>)
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	33c0      	adds	r3, #192	@ 0xc0
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	589b      	ldr	r3, [r3, r2]
 80016da:	1dfa      	adds	r2, r7, #7
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	0011      	movs	r1, r2
 80016e0:	2203      	movs	r2, #3
 80016e2:	400a      	ands	r2, r1
 80016e4:	00d2      	lsls	r2, r2, #3
 80016e6:	21ff      	movs	r1, #255	@ 0xff
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	401a      	ands	r2, r3
 80016f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	019b      	lsls	r3, r3, #6
 80016f6:	22ff      	movs	r2, #255	@ 0xff
 80016f8:	401a      	ands	r2, r3
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	2303      	movs	r3, #3
 8001702:	4003      	ands	r3, r0
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001708:	481f      	ldr	r0, [pc, #124]	@ (8001788 <__NVIC_SetPriority+0xd4>)
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	430a      	orrs	r2, r1
 8001714:	33c0      	adds	r3, #192	@ 0xc0
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800171a:	e031      	b.n	8001780 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <__NVIC_SetPriority+0xd8>)
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0019      	movs	r1, r3
 8001724:	230f      	movs	r3, #15
 8001726:	400b      	ands	r3, r1
 8001728:	3b08      	subs	r3, #8
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3306      	adds	r3, #6
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	18d3      	adds	r3, r2, r3
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1dfa      	adds	r2, r7, #7
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	0011      	movs	r1, r2
 800173c:	2203      	movs	r2, #3
 800173e:	400a      	ands	r2, r1
 8001740:	00d2      	lsls	r2, r2, #3
 8001742:	21ff      	movs	r1, #255	@ 0xff
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	43d2      	mvns	r2, r2
 800174a:	401a      	ands	r2, r3
 800174c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	22ff      	movs	r2, #255	@ 0xff
 8001754:	401a      	ands	r2, r3
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	0018      	movs	r0, r3
 800175c:	2303      	movs	r3, #3
 800175e:	4003      	ands	r3, r0
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001764:	4809      	ldr	r0, [pc, #36]	@ (800178c <__NVIC_SetPriority+0xd8>)
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	001c      	movs	r4, r3
 800176c:	230f      	movs	r3, #15
 800176e:	4023      	ands	r3, r4
 8001770:	3b08      	subs	r3, #8
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	430a      	orrs	r2, r1
 8001776:	3306      	adds	r3, #6
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	18c3      	adds	r3, r0, r3
 800177c:	3304      	adds	r3, #4
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b003      	add	sp, #12
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	1e5a      	subs	r2, r3, #1
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	045b      	lsls	r3, r3, #17
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d301      	bcc.n	80017a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a4:	2301      	movs	r3, #1
 80017a6:	e010      	b.n	80017ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <SysTick_Config+0x44>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	3a01      	subs	r2, #1
 80017ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b0:	2301      	movs	r3, #1
 80017b2:	425b      	negs	r3, r3
 80017b4:	2103      	movs	r1, #3
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff ff7c 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <SysTick_Config+0x44>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <SysTick_Config+0x44>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	210f      	movs	r1, #15
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	1c02      	adds	r2, r0, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	0002      	movs	r2, r0
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff ff33 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ffaf 	bl	8001790 <SysTick_Config>
 8001832:	0003      	movs	r3, r0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e061      	b.n	8001912 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a32      	ldr	r2, [pc, #200]	@ (800191c <HAL_DMA_Init+0xe0>)
 8001854:	4694      	mov	ip, r2
 8001856:	4463      	add	r3, ip
 8001858:	2114      	movs	r1, #20
 800185a:	0018      	movs	r0, r3
 800185c:	f7fe fc5e 	bl	800011c <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	009a      	lsls	r2, r3, #2
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a2d      	ldr	r2, [pc, #180]	@ (8001920 <HAL_DMA_Init+0xe4>)
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2225      	movs	r2, #37	@ 0x25
 8001872:	2102      	movs	r1, #2
 8001874:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a28      	ldr	r2, [pc, #160]	@ (8001924 <HAL_DMA_Init+0xe8>)
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800188e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d018      	beq.n	80018fa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018c8:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_DMA_Init+0xec>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	211c      	movs	r1, #28
 80018d2:	400b      	ands	r3, r1
 80018d4:	210f      	movs	r1, #15
 80018d6:	4099      	lsls	r1, r3
 80018d8:	000b      	movs	r3, r1
 80018da:	43d9      	mvns	r1, r3
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_DMA_Init+0xec>)
 80018de:	400a      	ands	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_DMA_Init+0xec>)
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	201c      	movs	r0, #28
 80018f0:	4003      	ands	r3, r0
 80018f2:	409a      	lsls	r2, r3
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_DMA_Init+0xec>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2225      	movs	r2, #37	@ 0x25
 8001904:	2101      	movs	r1, #1
 8001906:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	@ 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	bffdfff8 	.word	0xbffdfff8
 8001920:	40020000 	.word	0x40020000
 8001924:	ffff800f 	.word	0xffff800f
 8001928:	400200a8 	.word	0x400200a8

0800192c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800193a:	2317      	movs	r3, #23
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2224      	movs	r2, #36	@ 0x24
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_DMA_Start_IT+0x24>
 800194c:	2302      	movs	r3, #2
 800194e:	e04f      	b.n	80019f0 <HAL_DMA_Start_IT+0xc4>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2224      	movs	r2, #36	@ 0x24
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2225      	movs	r2, #37	@ 0x25
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b01      	cmp	r3, #1
 8001962:	d13a      	bne.n	80019da <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2225      	movs	r2, #37	@ 0x25
 8001968:	2102      	movs	r1, #2
 800196a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	438a      	bics	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f8e3 	bl	8001b54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	210e      	movs	r1, #14
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00f      	b.n	80019c8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2104      	movs	r1, #4
 80019b4:	438a      	bics	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	210a      	movs	r1, #10
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e007      	b.n	80019ea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2224      	movs	r2, #36	@ 0x24
 80019de:	2100      	movs	r1, #0
 80019e0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019e2:	2317      	movs	r3, #23
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80019ea:	2317      	movs	r3, #23
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a14:	221c      	movs	r2, #28
 8001a16:	4013      	ands	r3, r2
 8001a18:	2204      	movs	r2, #4
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	d026      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x7a>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d022      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2220      	movs	r2, #32
 8001a34:	4013      	ands	r3, r2
 8001a36:	d107      	bne.n	8001a48 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	221c      	movs	r2, #28
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2104      	movs	r1, #4
 8001a56:	4091      	lsls	r1, r2
 8001a58:	000a      	movs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d100      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x6e>
 8001a64:	e071      	b.n	8001b4a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	0010      	movs	r0, r2
 8001a6e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001a70:	e06b      	b.n	8001b4a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	221c      	movs	r2, #28
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	d02d      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xea>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d029      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2220      	movs	r2, #32
 8001a96:	4013      	ands	r3, r2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	210a      	movs	r1, #10
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2225      	movs	r2, #37	@ 0x25
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	221c      	movs	r2, #28
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4091      	lsls	r1, r2
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2224      	movs	r2, #36	@ 0x24
 8001aca:	2100      	movs	r1, #0
 8001acc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d039      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	0010      	movs	r0, r2
 8001ade:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ae0:	e033      	b.n	8001b4a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	221c      	movs	r2, #28
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2208      	movs	r2, #8
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	d02a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x154>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2208      	movs	r2, #8
 8001afa:	4013      	ands	r3, r2
 8001afc:	d026      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	210e      	movs	r1, #14
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	221c      	movs	r2, #28
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2225      	movs	r2, #37	@ 0x25
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	@ 0x24
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	0010      	movs	r0, r2
 8001b48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	46c0      	nop			@ (mov r8, r8)
}
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	221c      	movs	r2, #28
 8001b68:	401a      	ands	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4091      	lsls	r1, r2
 8001b72:	000a      	movs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d108      	bne.n	8001b98 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b96:	e007      	b.n	8001ba8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b004      	add	sp, #16
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bc6:	e155      	b.n	8001e74 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4091      	lsls	r1, r2
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d100      	bne.n	8001be0 <HAL_GPIO_Init+0x30>
 8001bde:	e146      	b.n	8001e6e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d005      	beq.n	8001bf8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	409a      	lsls	r2, r3
 8001c06:	0013      	movs	r3, r2
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	0013      	movs	r3, r2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	43da      	mvns	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	2201      	movs	r2, #1
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d017      	beq.n	8001c96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	43da      	mvns	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	58d3      	ldr	r3, [r2, r3]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2107      	movs	r1, #7
 8001cce:	400b      	ands	r3, r1
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	0013      	movs	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	23c0      	movs	r3, #192	@ 0xc0
 8001d24:	029b      	lsls	r3, r3, #10
 8001d26:	4013      	ands	r3, r2
 8001d28:	d100      	bne.n	8001d2c <HAL_GPIO_Init+0x17c>
 8001d2a:	e0a0      	b.n	8001e6e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2c:	4b57      	ldr	r3, [pc, #348]	@ (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d30:	4b56      	ldr	r3, [pc, #344]	@ (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d38:	4a55      	ldr	r2, [pc, #340]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	589b      	ldr	r3, [r3, r2]
 8001d44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	409a      	lsls	r2, r3
 8001d52:	0013      	movs	r3, r2
 8001d54:	43da      	mvns	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	23a0      	movs	r3, #160	@ 0xa0
 8001d60:	05db      	lsls	r3, r3, #23
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d01f      	beq.n	8001da6 <HAL_GPIO_Init+0x1f6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4a      	ldr	r2, [pc, #296]	@ (8001e94 <HAL_GPIO_Init+0x2e4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d019      	beq.n	8001da2 <HAL_GPIO_Init+0x1f2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a49      	ldr	r2, [pc, #292]	@ (8001e98 <HAL_GPIO_Init+0x2e8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d013      	beq.n	8001d9e <HAL_GPIO_Init+0x1ee>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a48      	ldr	r2, [pc, #288]	@ (8001e9c <HAL_GPIO_Init+0x2ec>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00d      	beq.n	8001d9a <HAL_GPIO_Init+0x1ea>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a47      	ldr	r2, [pc, #284]	@ (8001ea0 <HAL_GPIO_Init+0x2f0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x1e6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a46      	ldr	r2, [pc, #280]	@ (8001ea4 <HAL_GPIO_Init+0x2f4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_GPIO_Init+0x1e2>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e00a      	b.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e008      	b.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x1f8>
 8001da6:	2300      	movs	r3, #0
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	2103      	movs	r1, #3
 8001dac:	400a      	ands	r2, r1
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4093      	lsls	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db8:	4935      	ldr	r1, [pc, #212]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	035b      	lsls	r3, r3, #13
 8001dde:	4013      	ands	r3, r2
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	039b      	lsls	r3, r3, #14
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43da      	mvns	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <HAL_GPIO_Init+0x2f8>)
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	40da      	lsrs	r2, r3
 8001e7c:	1e13      	subs	r3, r2, #0
 8001e7e:	d000      	beq.n	8001e82 <HAL_GPIO_Init+0x2d2>
 8001e80:	e6a2      	b.n	8001bc8 <HAL_GPIO_Init+0x18>
  }
}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	46c0      	nop			@ (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b006      	add	sp, #24
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010000 	.word	0x40010000
 8001e94:	50000400 	.word	0x50000400
 8001e98:	50000800 	.word	0x50000800
 8001e9c:	50000c00 	.word	0x50000c00
 8001ea0:	50001000 	.word	0x50001000
 8001ea4:	50001c00 	.word	0x50001c00
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	1dba      	adds	r2, r7, #6
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d008      	beq.n	8001ed6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f807 	bl	8001ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	0002      	movs	r2, r0
 8001eec:	1dbb      	adds	r3, r7, #6
 8001eee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ef0:	46c0      	nop			@ (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f000 fbbf 	bl	800268a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0c:	4bc9      	ldr	r3, [pc, #804]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	220c      	movs	r2, #12
 8001f12:	4013      	ands	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f16:	4bc7      	ldr	r3, [pc, #796]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x36>
 8001f2c:	e07e      	b.n	800202c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d112      	bne.n	8001f60 <HAL_RCC_OscConfig+0x68>
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	025b      	lsls	r3, r3, #9
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4bbb      	ldr	r3, [pc, #748]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5a>
 8001f50:	e06b      	b.n	800202a <HAL_RCC_OscConfig+0x132>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d167      	bne.n	800202a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f000 fb95 	bl	800268a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x84>
 8001f6c:	4bb1      	ldr	r3, [pc, #708]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4bb0      	ldr	r3, [pc, #704]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f72:	2180      	movs	r1, #128	@ 0x80
 8001f74:	0249      	lsls	r1, r1, #9
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e027      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	23a0      	movs	r3, #160	@ 0xa0
 8001f82:	02db      	lsls	r3, r3, #11
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10e      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xae>
 8001f88:	4baa      	ldr	r3, [pc, #680]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba9      	ldr	r3, [pc, #676]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f8e:	2180      	movs	r1, #128	@ 0x80
 8001f90:	02c9      	lsls	r1, r1, #11
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4ba7      	ldr	r3, [pc, #668]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	0249      	lsls	r1, r1, #9
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e012      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001fa6:	4ba3      	ldr	r3, [pc, #652]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4ba2      	ldr	r3, [pc, #648]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fac:	49a2      	ldr	r1, [pc, #648]	@ (8002238 <HAL_RCC_OscConfig+0x340>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4ba0      	ldr	r3, [pc, #640]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b9b      	ldr	r3, [pc, #620]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001fc6:	499d      	ldr	r1, [pc, #628]	@ (800223c <HAL_RCC_OscConfig+0x344>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fdec 	bl	8000bb0 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fde:	f7fe fde7 	bl	8000bb0 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b64      	cmp	r3, #100	@ 0x64
 8001fea:	d902      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	f000 fb4c 	bl	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ff2:	4b90      	ldr	r3, [pc, #576]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d0ef      	beq.n	8001fde <HAL_RCC_OscConfig+0xe6>
 8001ffe:	e015      	b.n	800202c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe fdd6 	bl	8000bb0 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200a:	f7fe fdd1 	bl	8000bb0 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	@ 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e336      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800201c:	4b85      	ldr	r3, [pc, #532]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x112>
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d100      	bne.n	8002038 <HAL_RCC_OscConfig+0x140>
 8002036:	e099      	b.n	800216c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	2220      	movs	r2, #32
 8002042:	4013      	ands	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002046:	4b7b      	ldr	r3, [pc, #492]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b7a      	ldr	r3, [pc, #488]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800204c:	2120      	movs	r1, #32
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	2220      	movs	r2, #32
 8002056:	4393      	bics	r3, r2
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d005      	beq.n	800206c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d13e      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1ec>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d13b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800206c:	4b71      	ldr	r3, [pc, #452]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2204      	movs	r2, #4
 8002072:	4013      	ands	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_RCC_OscConfig+0x188>
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e304      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b6c      	ldr	r3, [pc, #432]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x348>)
 8002086:	4013      	ands	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	021a      	lsls	r2, r3, #8
 8002090:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002096:	4b67      	ldr	r3, [pc, #412]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2209      	movs	r2, #9
 800209c:	4393      	bics	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80020a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a8:	f000 fc42 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80020ac:	0001      	movs	r1, r0
 80020ae:	4b61      	ldr	r3, [pc, #388]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	220f      	movs	r2, #15
 80020b6:	4013      	ands	r3, r2
 80020b8:	4a62      	ldr	r2, [pc, #392]	@ (8002244 <HAL_RCC_OscConfig+0x34c>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	000a      	movs	r2, r1
 80020be:	40da      	lsrs	r2, r3
 80020c0:	4b61      	ldr	r3, [pc, #388]	@ (8002248 <HAL_RCC_OscConfig+0x350>)
 80020c2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020c4:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_RCC_OscConfig+0x354>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2513      	movs	r5, #19
 80020ca:	197c      	adds	r4, r7, r5
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe fd29 	bl	8000b24 <HAL_InitTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80020d6:	197b      	adds	r3, r7, r5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d046      	beq.n	800216c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	e2d2      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d027      	beq.n	800213a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020ea:	4b52      	ldr	r3, [pc, #328]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2209      	movs	r2, #9
 80020f0:	4393      	bics	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fd58 	bl	8000bb0 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fd53 	bl	8000bb0 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e2b8      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002118:	4b46      	ldr	r3, [pc, #280]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	d0f1      	beq.n	8002106 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b44      	ldr	r3, [pc, #272]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a46      	ldr	r2, [pc, #280]	@ (8002240 <HAL_RCC_OscConfig+0x348>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	021a      	lsls	r2, r3, #8
 8002132:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002140:	2101      	movs	r1, #1
 8002142:	438a      	bics	r2, r1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7fe fd33 	bl	8000bb0 <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7fe fd2e 	bl	8000bb0 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e293      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002162:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2204      	movs	r2, #4
 8002168:	4013      	ands	r3, r2
 800216a:	d1f1      	bne.n	8002150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2210      	movs	r2, #16
 8002172:	4013      	ands	r3, r2
 8002174:	d100      	bne.n	8002178 <HAL_RCC_OscConfig+0x280>
 8002176:	e0a2      	b.n	80022be <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d140      	bne.n	8002200 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x29e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e279      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002196:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a2d      	ldr	r2, [pc, #180]	@ (8002250 <HAL_RCC_OscConfig+0x358>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a4:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	0a19      	lsrs	r1, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	061a      	lsls	r2, r3, #24
 80021b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	0b5b      	lsrs	r3, r3, #13
 80021c4:	3301      	adds	r3, #1
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	0212      	lsls	r2, r2, #8
 80021ca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	210f      	movs	r1, #15
 80021d4:	400b      	ands	r3, r1
 80021d6:	491b      	ldr	r1, [pc, #108]	@ (8002244 <HAL_RCC_OscConfig+0x34c>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_RCC_OscConfig+0x350>)
 80021de:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021e0:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <HAL_RCC_OscConfig+0x354>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2513      	movs	r5, #19
 80021e6:	197c      	adds	r4, r7, r5
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7fe fc9b 	bl	8000b24 <HAL_InitTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021f2:	197b      	adds	r3, r7, r5
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d061      	beq.n	80022be <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80021fa:	197b      	adds	r3, r7, r5
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	e244      	b.n	800268a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d040      	beq.n	800228a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_RCC_OscConfig+0x33c>)
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	0049      	lsls	r1, r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fccb 	bl	8000bb0 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800221e:	e019      	b.n	8002254 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002220:	f7fe fcc6 	bl	8000bb0 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d912      	bls.n	8002254 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e22b      	b.n	800268a <HAL_RCC_OscConfig+0x792>
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	40021000 	.word	0x40021000
 8002238:	fffeffff 	.word	0xfffeffff
 800223c:	fffbffff 	.word	0xfffbffff
 8002240:	ffffe0ff 	.word	0xffffe0ff
 8002244:	08004278 	.word	0x08004278
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004
 8002250:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002254:	4bca      	ldr	r3, [pc, #808]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d0df      	beq.n	8002220 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002260:	4bc7      	ldr	r3, [pc, #796]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4ac7      	ldr	r2, [pc, #796]	@ (8002584 <HAL_RCC_OscConfig+0x68c>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800226e:	4bc4      	ldr	r3, [pc, #784]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002270:	430a      	orrs	r2, r1
 8002272:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002274:	4bc2      	ldr	r3, [pc, #776]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	0a19      	lsrs	r1, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	061a      	lsls	r2, r3, #24
 8002282:	4bbf      	ldr	r3, [pc, #764]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	e019      	b.n	80022be <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228a:	4bbd      	ldr	r3, [pc, #756]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4bbc      	ldr	r3, [pc, #752]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002290:	49bd      	ldr	r1, [pc, #756]	@ (8002588 <HAL_RCC_OscConfig+0x690>)
 8002292:	400a      	ands	r2, r1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fc8b 	bl	8000bb0 <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a0:	f7fe fc86 	bl	8000bb0 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1eb      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022b2:	4bb3      	ldr	r3, [pc, #716]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2208      	movs	r2, #8
 80022c4:	4013      	ands	r3, r2
 80022c6:	d036      	beq.n	8002336 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d019      	beq.n	8002304 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d0:	4bab      	ldr	r3, [pc, #684]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80022d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022d4:	4baa      	ldr	r3, [pc, #680]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	430a      	orrs	r2, r1
 80022da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fc68 	bl	8000bb0 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe fc63 	bl	8000bb0 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1c8      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022f8:	4ba1      	ldr	r3, [pc, #644]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80022fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d0f1      	beq.n	80022e6 <HAL_RCC_OscConfig+0x3ee>
 8002302:	e018      	b.n	8002336 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b9e      	ldr	r3, [pc, #632]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002306:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002308:	4b9d      	ldr	r3, [pc, #628]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fc4e 	bl	8000bb0 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231a:	f7fe fc49 	bl	8000bb0 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1ae      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800232c:	4b94      	ldr	r3, [pc, #592]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800232e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d1f1      	bne.n	800231a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2204      	movs	r2, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d100      	bne.n	8002342 <HAL_RCC_OscConfig+0x44a>
 8002340:	e0ae      	b.n	80024a0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2023      	movs	r0, #35	@ 0x23
 8002344:	183b      	adds	r3, r7, r0
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b8d      	ldr	r3, [pc, #564]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800234c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	055b      	lsls	r3, r3, #21
 8002352:	4013      	ands	r3, r2
 8002354:	d109      	bne.n	800236a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b8a      	ldr	r3, [pc, #552]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800235a:	4b89      	ldr	r3, [pc, #548]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0549      	lsls	r1, r1, #21
 8002360:	430a      	orrs	r2, r1
 8002362:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002364:	183b      	adds	r3, r7, r0
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b88      	ldr	r3, [pc, #544]	@ (800258c <HAL_RCC_OscConfig+0x694>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d11a      	bne.n	80023ac <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002376:	4b85      	ldr	r3, [pc, #532]	@ (800258c <HAL_RCC_OscConfig+0x694>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b84      	ldr	r3, [pc, #528]	@ (800258c <HAL_RCC_OscConfig+0x694>)
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	0049      	lsls	r1, r1, #1
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7fe fc14 	bl	8000bb0 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe fc0f 	bl	8000bb0 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	@ 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e174      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b7a      	ldr	r3, [pc, #488]	@ (800258c <HAL_RCC_OscConfig+0x694>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4d0>
 80023b8:	4b71      	ldr	r3, [pc, #452]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023bc:	4b70      	ldr	r3, [pc, #448]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023be:	2180      	movs	r1, #128	@ 0x80
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80023c6:	e031      	b.n	800242c <HAL_RCC_OscConfig+0x534>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x4f2>
 80023d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023d6:	496c      	ldr	r1, [pc, #432]	@ (8002588 <HAL_RCC_OscConfig+0x690>)
 80023d8:	400a      	ands	r2, r1
 80023da:	651a      	str	r2, [r3, #80]	@ 0x50
 80023dc:	4b68      	ldr	r3, [pc, #416]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023e0:	4b67      	ldr	r3, [pc, #412]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023e2:	496b      	ldr	r1, [pc, #428]	@ (8002590 <HAL_RCC_OscConfig+0x698>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80023e8:	e020      	b.n	800242c <HAL_RCC_OscConfig+0x534>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	23a0      	movs	r3, #160	@ 0xa0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10e      	bne.n	8002414 <HAL_RCC_OscConfig+0x51c>
 80023f6:	4b62      	ldr	r3, [pc, #392]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023fa:	4b61      	ldr	r3, [pc, #388]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80023fc:	2180      	movs	r1, #128	@ 0x80
 80023fe:	00c9      	lsls	r1, r1, #3
 8002400:	430a      	orrs	r2, r1
 8002402:	651a      	str	r2, [r3, #80]	@ 0x50
 8002404:	4b5e      	ldr	r3, [pc, #376]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002406:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002408:	4b5d      	ldr	r3, [pc, #372]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	0049      	lsls	r1, r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	651a      	str	r2, [r3, #80]	@ 0x50
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x534>
 8002414:	4b5a      	ldr	r3, [pc, #360]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002418:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800241a:	495b      	ldr	r1, [pc, #364]	@ (8002588 <HAL_RCC_OscConfig+0x690>)
 800241c:	400a      	ands	r2, r1
 800241e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002420:	4b57      	ldr	r3, [pc, #348]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002424:	4b56      	ldr	r3, [pc, #344]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002426:	495a      	ldr	r1, [pc, #360]	@ (8002590 <HAL_RCC_OscConfig+0x698>)
 8002428:	400a      	ands	r2, r1
 800242a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe fbbc 	bl	8000bb0 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243c:	e009      	b.n	8002452 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fbb7 	bl	8000bb0 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <HAL_RCC_OscConfig+0x69c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e11b      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002452:	4b4b      	ldr	r3, [pc, #300]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d0ef      	beq.n	800243e <HAL_RCC_OscConfig+0x546>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe fba6 	bl	8000bb0 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002468:	e009      	b.n	800247e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fba1 	bl	8000bb0 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_RCC_OscConfig+0x69c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e105      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800247e:	4b40      	ldr	r3, [pc, #256]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248a:	2323      	movs	r3, #35	@ 0x23
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002498:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800249a:	493f      	ldr	r1, [pc, #252]	@ (8002598 <HAL_RCC_OscConfig+0x6a0>)
 800249c:	400a      	ands	r2, r1
 800249e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2220      	movs	r2, #32
 80024a6:	4013      	ands	r3, r2
 80024a8:	d049      	beq.n	800253e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d026      	beq.n	8002500 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80024c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	430a      	orrs	r2, r1
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ca:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCC_OscConfig+0x6a4>)
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x6a4>)
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0189      	lsls	r1, r1, #6
 80024d4:	430a      	orrs	r2, r1
 80024d6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fb6a 	bl	8000bb0 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e2:	f7fe fb65 	bl	8000bb0 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0ca      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024f4:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d0f1      	beq.n	80024e2 <HAL_RCC_OscConfig+0x5ea>
 80024fe:	e01e      	b.n	800253e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002500:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002506:	2101      	movs	r1, #1
 8002508:	438a      	bics	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_RCC_OscConfig+0x6a4>)
 800250e:	6a1a      	ldr	r2, [r3, #32]
 8002510:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_RCC_OscConfig+0x6a4>)
 8002512:	4923      	ldr	r1, [pc, #140]	@ (80025a0 <HAL_RCC_OscConfig+0x6a8>)
 8002514:	400a      	ands	r2, r1
 8002516:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fb4a 	bl	8000bb0 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002522:	f7fe fb45 	bl	8000bb0 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0aa      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2202      	movs	r2, #2
 800253a:	4013      	ands	r3, r2
 800253c:	d1f1      	bne.n	8002522 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d100      	bne.n	8002548 <HAL_RCC_OscConfig+0x650>
 8002546:	e09f      	b.n	8002688 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d100      	bne.n	8002550 <HAL_RCC_OscConfig+0x658>
 800254e:	e078      	b.n	8002642 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	2b02      	cmp	r3, #2
 8002556:	d159      	bne.n	800260c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_RCC_OscConfig+0x688>)
 800255e:	4911      	ldr	r1, [pc, #68]	@ (80025a4 <HAL_RCC_OscConfig+0x6ac>)
 8002560:	400a      	ands	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fb24 	bl	8000bb0 <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800256c:	e01c      	b.n	80025a8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fb1f 	bl	8000bb0 <HAL_GetTick>
 8002572:	0002      	movs	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d915      	bls.n	80025a8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e084      	b.n	800268a <HAL_RCC_OscConfig+0x792>
 8002580:	40021000 	.word	0x40021000
 8002584:	ffff1fff 	.word	0xffff1fff
 8002588:	fffffeff 	.word	0xfffffeff
 800258c:	40007000 	.word	0x40007000
 8002590:	fffffbff 	.word	0xfffffbff
 8002594:	00001388 	.word	0x00001388
 8002598:	efffffff 	.word	0xefffffff
 800259c:	40010000 	.word	0x40010000
 80025a0:	ffffdfff 	.word	0xffffdfff
 80025a4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	049b      	lsls	r3, r3, #18
 80025b0:	4013      	ands	r3, r2
 80025b2:	d1dc      	bne.n	800256e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b4:	4b37      	ldr	r3, [pc, #220]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a37      	ldr	r2, [pc, #220]	@ (8002698 <HAL_RCC_OscConfig+0x7a0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025cc:	431a      	orrs	r2, r3
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 80025da:	2180      	movs	r1, #128	@ 0x80
 80025dc:	0449      	lsls	r1, r1, #17
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fae5 	bl	8000bb0 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fae0 	bl	8000bb0 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e045      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4013      	ands	r3, r2
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x6f4>
 800260a:	e03d      	b.n	8002688 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 8002612:	4922      	ldr	r1, [pc, #136]	@ (800269c <HAL_RCC_OscConfig+0x7a4>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe faca 	bl	8000bb0 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fac5 	bl	8000bb0 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e02a      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	049b      	lsls	r3, r3, #18
 800263c:	4013      	ands	r3, r2
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x72a>
 8002640:	e022      	b.n	8002688 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01d      	b.n	800268a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_OscConfig+0x79c>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	025b      	lsls	r3, r3, #9
 800265a:	401a      	ands	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d10f      	bne.n	8002684 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	23f0      	movs	r3, #240	@ 0xf0
 8002668:	039b      	lsls	r3, r3, #14
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	23c0      	movs	r3, #192	@ 0xc0
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	401a      	ands	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b00a      	add	sp, #40	@ 0x28
 8002690:	bdb0      	pop	{r4, r5, r7, pc}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	ff02ffff 	.word	0xff02ffff
 800269c:	feffffff 	.word	0xfeffffff

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e128      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b96      	ldr	r3, [pc, #600]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d91e      	bls.n	8002700 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b93      	ldr	r3, [pc, #588]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4393      	bics	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	4b90      	ldr	r3, [pc, #576]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fa6c 	bl	8000bb0 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	e009      	b.n	80026f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fe fa67 	bl	8000bb0 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4a8a      	ldr	r2, [pc, #552]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e109      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b87      	ldr	r3, [pc, #540]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1ee      	bne.n	80026de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270a:	4b83      	ldr	r3, [pc, #524]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	22f0      	movs	r2, #240	@ 0xf0
 8002710:	4393      	bics	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b7f      	ldr	r3, [pc, #508]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 800271a:	430a      	orrs	r2, r1
 800271c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d100      	bne.n	800272a <HAL_RCC_ClockConfig+0x8a>
 8002728:	e089      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002732:	4b79      	ldr	r3, [pc, #484]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	029b      	lsls	r3, r3, #10
 800273a:	4013      	ands	r3, r2
 800273c:	d120      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0e1      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800274a:	4b73      	ldr	r3, [pc, #460]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	049b      	lsls	r3, r3, #18
 8002752:	4013      	ands	r3, r2
 8002754:	d114      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e0d5      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d106      	bne.n	8002770 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002762:	4b6d      	ldr	r3, [pc, #436]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	d109      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0ca      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002770:	4b69      	ldr	r3, [pc, #420]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	@ 0x80
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4013      	ands	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0c2      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002780:	4b65      	ldr	r3, [pc, #404]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2203      	movs	r2, #3
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4b62      	ldr	r3, [pc, #392]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fe fa0c 	bl	8000bb0 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	e009      	b.n	80027ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7fe fa03 	bl	8000bb0 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	4a58      	ldr	r2, [pc, #352]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0a5      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ba:	4b57      	ldr	r3, [pc, #348]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	220c      	movs	r2, #12
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d1ef      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x106>
 80027c6:	e03a      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d111      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7fe f9ed 	bl	8000bb0 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e08f      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	220c      	movs	r2, #12
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d1ef      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x132>
 80027f2:	e024      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d11b      	bne.n	8002834 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7fe f9d7 	bl	8000bb0 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a42      	ldr	r2, [pc, #264]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e079      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002812:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	220c      	movs	r2, #12
 8002818:	4013      	ands	r3, r2
 800281a:	2b04      	cmp	r3, #4
 800281c:	d1ef      	bne.n	80027fe <HAL_RCC_ClockConfig+0x15e>
 800281e:	e00e      	b.n	800283e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe f9c6 	bl	8000bb0 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a3a      	ldr	r2, [pc, #232]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e068      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002834:	4b38      	ldr	r3, [pc, #224]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	220c      	movs	r2, #12
 800283a:	4013      	ands	r3, r2
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283e:	4b34      	ldr	r3, [pc, #208]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d21e      	bcs.n	800288a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284c:	4b30      	ldr	r3, [pc, #192]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4393      	bics	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800285e:	f7fe f9a7 	bl	8000bb0 <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	e009      	b.n	800287c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe f9a2 	bl	8000bb0 <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	4a28      	ldr	r2, [pc, #160]	@ (8002914 <HAL_RCC_ClockConfig+0x274>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e044      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287c:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <HAL_RCC_ClockConfig+0x270>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a20      	ldr	r2, [pc, #128]	@ (800291c <HAL_RCC_ClockConfig+0x27c>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002920 <HAL_RCC_ClockConfig+0x280>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00da      	lsls	r2, r3, #3
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028c8:	f000 f832 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028cc:	0001      	movs	r1, r0
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_RCC_ClockConfig+0x278>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	220f      	movs	r2, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <HAL_RCC_ClockConfig+0x284>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	000a      	movs	r2, r1
 80028de:	40da      	lsrs	r2, r3
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_ClockConfig+0x288>)
 80028e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_RCC_ClockConfig+0x28c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	250b      	movs	r5, #11
 80028ea:	197c      	adds	r4, r7, r5
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fe f919 	bl	8000b24 <HAL_InitTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028f6:	197b      	adds	r3, r7, r5
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028fe:	197b      	adds	r3, r7, r5
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	e000      	b.n	8002906 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bdb0      	pop	{r4, r5, r7, pc}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	40022000 	.word	0x40022000
 8002914:	00001388 	.word	0x00001388
 8002918:	40021000 	.word	0x40021000
 800291c:	fffff8ff 	.word	0xfffff8ff
 8002920:	ffffc7ff 	.word	0xffffc7ff
 8002924:	08004278 	.word	0x08004278
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b08e      	sub	sp, #56	@ 0x38
 8002934:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002936:	4b4c      	ldr	r3, [pc, #304]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800293e:	230c      	movs	r3, #12
 8002940:	4013      	ands	r3, r2
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d014      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x40>
 8002946:	d900      	bls.n	800294a <HAL_RCC_GetSysClockFreq+0x1a>
 8002948:	e07b      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x112>
 800294a:	2b04      	cmp	r3, #4
 800294c:	d002      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x24>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d00b      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x3a>
 8002952:	e076      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002954:	4b44      	ldr	r3, [pc, #272]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002960:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002962:	e07c      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002964:	4b42      	ldr	r3, [pc, #264]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x140>)
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002968:	e079      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296a:	4b42      	ldr	r3, [pc, #264]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x144>)
 800296c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800296e:	e076      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	0c9a      	lsrs	r2, r3, #18
 8002974:	230f      	movs	r3, #15
 8002976:	401a      	ands	r2, r3
 8002978:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x148>)
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002980:	0d9a      	lsrs	r2, r3, #22
 8002982:	2303      	movs	r3, #3
 8002984:	4013      	ands	r3, r2
 8002986:	3301      	adds	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298a:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	2380      	movs	r3, #128	@ 0x80
 8002990:	025b      	lsls	r3, r3, #9
 8002992:	4013      	ands	r3, r2
 8002994:	d01a      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	4a35      	ldr	r2, [pc, #212]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x144>)
 80029a0:	2300      	movs	r3, #0
 80029a2:	69b8      	ldr	r0, [r7, #24]
 80029a4:	69f9      	ldr	r1, [r7, #28]
 80029a6:	f7fd fc65 	bl	8000274 <__aeabi_lmul>
 80029aa:	0002      	movs	r2, r0
 80029ac:	000b      	movs	r3, r1
 80029ae:	0010      	movs	r0, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f7fd fc39 	bl	8000234 <__aeabi_uldivmod>
 80029c2:	0002      	movs	r2, r0
 80029c4:	000b      	movs	r3, r1
 80029c6:	0013      	movs	r3, r2
 80029c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ca:	e037      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029cc:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2210      	movs	r2, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	d01a      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4a23      	ldr	r2, [pc, #140]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x13c>)
 80029e0:	2300      	movs	r3, #0
 80029e2:	68b8      	ldr	r0, [r7, #8]
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	f7fd fc45 	bl	8000274 <__aeabi_lmul>
 80029ea:	0002      	movs	r2, r0
 80029ec:	000b      	movs	r3, r1
 80029ee:	0010      	movs	r0, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f7fd fc19 	bl	8000234 <__aeabi_uldivmod>
 8002a02:	0002      	movs	r2, r0
 8002a04:	000b      	movs	r3, r1
 8002a06:	0013      	movs	r3, r2
 8002a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a0a:	e017      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	0018      	movs	r0, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	0019      	movs	r1, r3
 8002a14:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a16:	2300      	movs	r3, #0
 8002a18:	f7fd fc2c 	bl	8000274 <__aeabi_lmul>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	000b      	movs	r3, r1
 8002a20:	0010      	movs	r0, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	001c      	movs	r4, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	001d      	movs	r5, r3
 8002a2c:	0022      	movs	r2, r4
 8002a2e:	002b      	movs	r3, r5
 8002a30:	f7fd fc00 	bl	8000234 <__aeabi_uldivmod>
 8002a34:	0002      	movs	r2, r0
 8002a36:	000b      	movs	r3, r1
 8002a38:	0013      	movs	r3, r2
 8002a3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a40:	e00d      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0b5b      	lsrs	r3, r3, #13
 8002a48:	2207      	movs	r2, #7
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	3301      	adds	r3, #1
 8002a52:	2280      	movs	r2, #128	@ 0x80
 8002a54:	0212      	lsls	r2, r2, #8
 8002a56:	409a      	lsls	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a5c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b00e      	add	sp, #56	@ 0x38
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	003d0900 	.word	0x003d0900
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	08004290 	.word	0x08004290

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	@ (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	20000000 	.word	0x20000000

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	0001      	movs	r1, r0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	4a04      	ldr	r2, [pc, #16]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	40d9      	lsrs	r1, r3
 8002aaa:	000b      	movs	r3, r1
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08004288 	.word	0x08004288

08002abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac0:	f7ff ffdc 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac4:	0001      	movs	r1, r0
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	0adb      	lsrs	r3, r3, #11
 8002acc:	2207      	movs	r2, #7
 8002ace:	4013      	ands	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	40d9      	lsrs	r1, r3
 8002ad6:	000b      	movs	r3, r1
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08004288 	.word	0x08004288

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002af0:	2017      	movs	r0, #23
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002b02:	e0c7      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b9b      	ldr	r3, [pc, #620]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	055b      	lsls	r3, r3, #21
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b98      	ldr	r3, [pc, #608]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b14:	4b97      	ldr	r3, [pc, #604]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002b16:	2180      	movs	r1, #128	@ 0x80
 8002b18:	0549      	lsls	r1, r1, #21
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b94      	ldr	r3, [pc, #592]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d11a      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b30:	4b91      	ldr	r3, [pc, #580]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b90      	ldr	r3, [pc, #576]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	0049      	lsls	r1, r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe f837 	bl	8000bb0 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	e008      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe f832 	bl	8000bb0 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e107      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b87      	ldr	r3, [pc, #540]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b66:	4b83      	ldr	r3, [pc, #524]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	23c0      	movs	r3, #192	@ 0xc0
 8002b6c:	039b      	lsls	r3, r3, #14
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	039b      	lsls	r3, r3, #14
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d013      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	23c0      	movs	r3, #192	@ 0xc0
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	23c0      	movs	r3, #192	@ 0xc0
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10a      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b94:	4b77      	ldr	r3, [pc, #476]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e0df      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002baa:	4b72      	ldr	r3, [pc, #456]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bae:	23c0      	movs	r3, #192	@ 0xc0
 8002bb0:	029b      	lsls	r3, r3, #10
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d03b      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	23c0      	movs	r3, #192	@ 0xc0
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d033      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d02e      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bd6:	4b67      	ldr	r3, [pc, #412]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bda:	4a68      	ldr	r2, [pc, #416]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be0:	4b64      	ldr	r3, [pc, #400]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002be2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002be4:	4b63      	ldr	r3, [pc, #396]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002be6:	2180      	movs	r1, #128	@ 0x80
 8002be8:	0309      	lsls	r1, r1, #12
 8002bea:	430a      	orrs	r2, r1
 8002bec:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bee:	4b61      	ldr	r3, [pc, #388]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bf2:	4b60      	ldr	r3, [pc, #384]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002bf4:	4962      	ldr	r1, [pc, #392]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4013      	ands	r3, r2
 8002c08:	d014      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fd ffd1 	bl	8000bb0 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c12:	e009      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fd ffcc 	bl	8000bb0 <HAL_GetTick>
 8002c18:	0002      	movs	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4a59      	ldr	r2, [pc, #356]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0a0      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c28:	4b52      	ldr	r3, [pc, #328]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	23c0      	movs	r3, #192	@ 0xc0
 8002c44:	029b      	lsls	r3, r3, #10
 8002c46:	401a      	ands	r2, r3
 8002c48:	23c0      	movs	r3, #192	@ 0xc0
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002c50:	4b48      	ldr	r3, [pc, #288]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4c      	ldr	r2, [pc, #304]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	23c0      	movs	r3, #192	@ 0xc0
 8002c60:	039b      	lsls	r3, r3, #14
 8002c62:	401a      	ands	r2, r3
 8002c64:	4b43      	ldr	r3, [pc, #268]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	4b42      	ldr	r3, [pc, #264]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	23c0      	movs	r3, #192	@ 0xc0
 8002c74:	029b      	lsls	r3, r3, #10
 8002c76:	401a      	ands	r2, r3
 8002c78:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c7e:	2317      	movs	r3, #23
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b3a      	ldr	r3, [pc, #232]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c8c:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002c8e:	493f      	ldr	r1, [pc, #252]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c9e:	4b35      	ldr	r3, [pc, #212]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b31      	ldr	r3, [pc, #196]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc0:	220c      	movs	r2, #12
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cda:	4b26      	ldr	r3, [pc, #152]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	4a2c      	ldr	r2, [pc, #176]	@ (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	4b22      	ldr	r3, [pc, #136]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfc:	4a25      	ldr	r2, [pc, #148]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1c:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2240      	movs	r2, #64	@ 0x40
 8002d32:	4013      	ands	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d36:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	4013      	ands	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d54:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d58:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b006      	add	sp, #24
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	fffcffff 	.word	0xfffcffff
 8002d80:	fff7ffff 	.word	0xfff7ffff
 8002d84:	00001388 	.word	0x00001388
 8002d88:	ffcfffff 	.word	0xffcfffff
 8002d8c:	efffffff 	.word	0xefffffff
 8002d90:	fffff3ff 	.word	0xfffff3ff
 8002d94:	ffffcfff 	.word	0xffffcfff
 8002d98:	fbffffff 	.word	0xfbffffff
 8002d9c:	fff3ffff 	.word	0xfff3ffff

08002da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e044      	b.n	8002e3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2278      	movs	r2, #120	@ 0x78
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7fd fdb1 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	@ 0x24
 8002dce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	438a      	bics	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f8d0 	bl	8002f88 <UART_SetConfig>
 8002de8:	0003      	movs	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e024      	b.n	8002e3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 fb61 	bl	80034c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	490d      	ldr	r1, [pc, #52]	@ (8002e44 <HAL_UART_Init+0xa4>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	212a      	movs	r1, #42	@ 0x2a
 8002e1e:	438a      	bics	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fbf9 	bl	800362c <UART_CheckIdleState>
 8002e3a:	0003      	movs	r3, r0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	ffffb7ff 	.word	0xffffb7ff

08002e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	1dbb      	adds	r3, r7, #6
 8002e56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d000      	beq.n	8002e62 <HAL_UART_Transmit+0x1a>
 8002e60:	e08c      	b.n	8002f7c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_UART_Transmit+0x28>
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e084      	b.n	8002f7e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d109      	bne.n	8002e94 <HAL_UART_Transmit+0x4c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e074      	b.n	8002f7e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2284      	movs	r2, #132	@ 0x84
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2221      	movs	r2, #33	@ 0x21
 8002ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea2:	f7fd fe85 	bl	8000bb0 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1dba      	adds	r2, r7, #6
 8002eae:	2150      	movs	r1, #80	@ 0x50
 8002eb0:	8812      	ldrh	r2, [r2, #0]
 8002eb2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1dba      	adds	r2, r7, #6
 8002eb8:	2152      	movs	r1, #82	@ 0x52
 8002eba:	8812      	ldrh	r2, [r2, #0]
 8002ebc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	015b      	lsls	r3, r3, #5
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d108      	bne.n	8002edc <HAL_UART_Transmit+0x94>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e003      	b.n	8002ee4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee4:	e02f      	b.n	8002f46 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	0013      	movs	r3, r2
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	@ 0x80
 8002ef4:	f000 fc42 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e03b      	b.n	8002f7e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	001a      	movs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	05d2      	lsls	r2, r2, #23
 8002f18:	0dd2      	lsrs	r2, r2, #23
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	3302      	adds	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	e007      	b.n	8002f34 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2252      	movs	r2, #82	@ 0x52
 8002f38:	5a9b      	ldrh	r3, [r3, r2]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b299      	uxth	r1, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2252      	movs	r2, #82	@ 0x52
 8002f44:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2252      	movs	r2, #82	@ 0x52
 8002f4a:	5a9b      	ldrh	r3, [r3, r2]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1c9      	bne.n	8002ee6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	0013      	movs	r3, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2140      	movs	r1, #64	@ 0x40
 8002f60:	f000 fc0c 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e005      	b.n	8002f7e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b008      	add	sp, #32
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b08e      	sub	sp, #56	@ 0x38
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f90:	231a      	movs	r3, #26
 8002f92:	2218      	movs	r2, #24
 8002f94:	189b      	adds	r3, r3, r2
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4ac3      	ldr	r2, [pc, #780]	@ (80032c8 <UART_SetConfig+0x340>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4abe      	ldr	r2, [pc, #760]	@ (80032cc <UART_SetConfig+0x344>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4ab8      	ldr	r2, [pc, #736]	@ (80032d0 <UART_SetConfig+0x348>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4ab4      	ldr	r2, [pc, #720]	@ (80032d4 <UART_SetConfig+0x34c>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4ab0      	ldr	r2, [pc, #704]	@ (80032d8 <UART_SetConfig+0x350>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d131      	bne.n	8003080 <UART_SetConfig+0xf8>
 800301c:	4baf      	ldr	r3, [pc, #700]	@ (80032dc <UART_SetConfig+0x354>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	2203      	movs	r2, #3
 8003022:	4013      	ands	r3, r2
 8003024:	2b03      	cmp	r3, #3
 8003026:	d01d      	beq.n	8003064 <UART_SetConfig+0xdc>
 8003028:	d823      	bhi.n	8003072 <UART_SetConfig+0xea>
 800302a:	2b02      	cmp	r3, #2
 800302c:	d00c      	beq.n	8003048 <UART_SetConfig+0xc0>
 800302e:	d820      	bhi.n	8003072 <UART_SetConfig+0xea>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <UART_SetConfig+0xb2>
 8003034:	2b01      	cmp	r3, #1
 8003036:	d00e      	beq.n	8003056 <UART_SetConfig+0xce>
 8003038:	e01b      	b.n	8003072 <UART_SetConfig+0xea>
 800303a:	231b      	movs	r3, #27
 800303c:	2218      	movs	r2, #24
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e0b4      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003048:	231b      	movs	r3, #27
 800304a:	2218      	movs	r2, #24
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	2202      	movs	r2, #2
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e0ad      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003056:	231b      	movs	r3, #27
 8003058:	2218      	movs	r2, #24
 800305a:	189b      	adds	r3, r3, r2
 800305c:	19db      	adds	r3, r3, r7
 800305e:	2204      	movs	r2, #4
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e0a6      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003064:	231b      	movs	r3, #27
 8003066:	2218      	movs	r2, #24
 8003068:	189b      	adds	r3, r3, r2
 800306a:	19db      	adds	r3, r3, r7
 800306c:	2208      	movs	r2, #8
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e09f      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003072:	231b      	movs	r3, #27
 8003074:	2218      	movs	r2, #24
 8003076:	189b      	adds	r3, r3, r2
 8003078:	19db      	adds	r3, r3, r7
 800307a:	2210      	movs	r2, #16
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e098      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a96      	ldr	r2, [pc, #600]	@ (80032e0 <UART_SetConfig+0x358>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d131      	bne.n	80030ee <UART_SetConfig+0x166>
 800308a:	4b94      	ldr	r3, [pc, #592]	@ (80032dc <UART_SetConfig+0x354>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	220c      	movs	r2, #12
 8003090:	4013      	ands	r3, r2
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d01d      	beq.n	80030d2 <UART_SetConfig+0x14a>
 8003096:	d823      	bhi.n	80030e0 <UART_SetConfig+0x158>
 8003098:	2b08      	cmp	r3, #8
 800309a:	d00c      	beq.n	80030b6 <UART_SetConfig+0x12e>
 800309c:	d820      	bhi.n	80030e0 <UART_SetConfig+0x158>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <UART_SetConfig+0x120>
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d00e      	beq.n	80030c4 <UART_SetConfig+0x13c>
 80030a6:	e01b      	b.n	80030e0 <UART_SetConfig+0x158>
 80030a8:	231b      	movs	r3, #27
 80030aa:	2218      	movs	r2, #24
 80030ac:	189b      	adds	r3, r3, r2
 80030ae:	19db      	adds	r3, r3, r7
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e07d      	b.n	80031b2 <UART_SetConfig+0x22a>
 80030b6:	231b      	movs	r3, #27
 80030b8:	2218      	movs	r2, #24
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	19db      	adds	r3, r3, r7
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e076      	b.n	80031b2 <UART_SetConfig+0x22a>
 80030c4:	231b      	movs	r3, #27
 80030c6:	2218      	movs	r2, #24
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	19db      	adds	r3, r3, r7
 80030cc:	2204      	movs	r2, #4
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e06f      	b.n	80031b2 <UART_SetConfig+0x22a>
 80030d2:	231b      	movs	r3, #27
 80030d4:	2218      	movs	r2, #24
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	2208      	movs	r2, #8
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e068      	b.n	80031b2 <UART_SetConfig+0x22a>
 80030e0:	231b      	movs	r3, #27
 80030e2:	2218      	movs	r2, #24
 80030e4:	189b      	adds	r3, r3, r2
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	2210      	movs	r2, #16
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e061      	b.n	80031b2 <UART_SetConfig+0x22a>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7c      	ldr	r2, [pc, #496]	@ (80032e4 <UART_SetConfig+0x35c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d106      	bne.n	8003106 <UART_SetConfig+0x17e>
 80030f8:	231b      	movs	r3, #27
 80030fa:	2218      	movs	r2, #24
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	19db      	adds	r3, r3, r7
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e055      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a77      	ldr	r2, [pc, #476]	@ (80032e8 <UART_SetConfig+0x360>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d106      	bne.n	800311e <UART_SetConfig+0x196>
 8003110:	231b      	movs	r3, #27
 8003112:	2218      	movs	r2, #24
 8003114:	189b      	adds	r3, r3, r2
 8003116:	19db      	adds	r3, r3, r7
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e049      	b.n	80031b2 <UART_SetConfig+0x22a>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6b      	ldr	r2, [pc, #428]	@ (80032d0 <UART_SetConfig+0x348>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d13e      	bne.n	80031a6 <UART_SetConfig+0x21e>
 8003128:	4b6c      	ldr	r3, [pc, #432]	@ (80032dc <UART_SetConfig+0x354>)
 800312a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800312c:	23c0      	movs	r3, #192	@ 0xc0
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	22c0      	movs	r2, #192	@ 0xc0
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	4293      	cmp	r3, r2
 8003138:	d027      	beq.n	800318a <UART_SetConfig+0x202>
 800313a:	22c0      	movs	r2, #192	@ 0xc0
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	4293      	cmp	r3, r2
 8003140:	d82a      	bhi.n	8003198 <UART_SetConfig+0x210>
 8003142:	2280      	movs	r2, #128	@ 0x80
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	4293      	cmp	r3, r2
 8003148:	d011      	beq.n	800316e <UART_SetConfig+0x1e6>
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	4293      	cmp	r3, r2
 8003150:	d822      	bhi.n	8003198 <UART_SetConfig+0x210>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <UART_SetConfig+0x1d8>
 8003156:	2280      	movs	r2, #128	@ 0x80
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	4293      	cmp	r3, r2
 800315c:	d00e      	beq.n	800317c <UART_SetConfig+0x1f4>
 800315e:	e01b      	b.n	8003198 <UART_SetConfig+0x210>
 8003160:	231b      	movs	r3, #27
 8003162:	2218      	movs	r2, #24
 8003164:	189b      	adds	r3, r3, r2
 8003166:	19db      	adds	r3, r3, r7
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e021      	b.n	80031b2 <UART_SetConfig+0x22a>
 800316e:	231b      	movs	r3, #27
 8003170:	2218      	movs	r2, #24
 8003172:	189b      	adds	r3, r3, r2
 8003174:	19db      	adds	r3, r3, r7
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e01a      	b.n	80031b2 <UART_SetConfig+0x22a>
 800317c:	231b      	movs	r3, #27
 800317e:	2218      	movs	r2, #24
 8003180:	189b      	adds	r3, r3, r2
 8003182:	19db      	adds	r3, r3, r7
 8003184:	2204      	movs	r2, #4
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e013      	b.n	80031b2 <UART_SetConfig+0x22a>
 800318a:	231b      	movs	r3, #27
 800318c:	2218      	movs	r2, #24
 800318e:	189b      	adds	r3, r3, r2
 8003190:	19db      	adds	r3, r3, r7
 8003192:	2208      	movs	r2, #8
 8003194:	701a      	strb	r2, [r3, #0]
 8003196:	e00c      	b.n	80031b2 <UART_SetConfig+0x22a>
 8003198:	231b      	movs	r3, #27
 800319a:	2218      	movs	r2, #24
 800319c:	189b      	adds	r3, r3, r2
 800319e:	19db      	adds	r3, r3, r7
 80031a0:	2210      	movs	r2, #16
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e005      	b.n	80031b2 <UART_SetConfig+0x22a>
 80031a6:	231b      	movs	r3, #27
 80031a8:	2218      	movs	r2, #24
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	19db      	adds	r3, r3, r7
 80031ae:	2210      	movs	r2, #16
 80031b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a46      	ldr	r2, [pc, #280]	@ (80032d0 <UART_SetConfig+0x348>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d000      	beq.n	80031be <UART_SetConfig+0x236>
 80031bc:	e09a      	b.n	80032f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031be:	231b      	movs	r3, #27
 80031c0:	2218      	movs	r2, #24
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d01d      	beq.n	8003208 <UART_SetConfig+0x280>
 80031cc:	dc20      	bgt.n	8003210 <UART_SetConfig+0x288>
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d015      	beq.n	80031fe <UART_SetConfig+0x276>
 80031d2:	dc1d      	bgt.n	8003210 <UART_SetConfig+0x288>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <UART_SetConfig+0x256>
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d005      	beq.n	80031e8 <UART_SetConfig+0x260>
 80031dc:	e018      	b.n	8003210 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031de:	f7ff fc57 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80031e2:	0003      	movs	r3, r0
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031e6:	e01c      	b.n	8003222 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e8:	4b3c      	ldr	r3, [pc, #240]	@ (80032dc <UART_SetConfig+0x354>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2210      	movs	r2, #16
 80031ee:	4013      	ands	r3, r2
 80031f0:	d002      	beq.n	80031f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <UART_SetConfig+0x364>)
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031f6:	e014      	b.n	8003222 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80031f8:	4b3d      	ldr	r3, [pc, #244]	@ (80032f0 <UART_SetConfig+0x368>)
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031fc:	e011      	b.n	8003222 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fe:	f7ff fb97 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8003202:	0003      	movs	r3, r0
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003206:	e00c      	b.n	8003222 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800320e:	e008      	b.n	8003222 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003214:	231a      	movs	r3, #26
 8003216:	2218      	movs	r2, #24
 8003218:	189b      	adds	r3, r3, r2
 800321a:	19db      	adds	r3, r3, r7
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
        break;
 8003220:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d100      	bne.n	800322a <UART_SetConfig+0x2a2>
 8003228:	e133      	b.n	8003492 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	0013      	movs	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	189b      	adds	r3, r3, r2
 8003234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d305      	bcc.n	8003246 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003242:	429a      	cmp	r2, r3
 8003244:	d906      	bls.n	8003254 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003246:	231a      	movs	r3, #26
 8003248:	2218      	movs	r2, #24
 800324a:	189b      	adds	r3, r3, r2
 800324c:	19db      	adds	r3, r3, r7
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e11e      	b.n	8003492 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	6939      	ldr	r1, [r7, #16]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	000b      	movs	r3, r1
 8003262:	0e1b      	lsrs	r3, r3, #24
 8003264:	0010      	movs	r0, r2
 8003266:	0205      	lsls	r5, r0, #8
 8003268:	431d      	orrs	r5, r3
 800326a:	000b      	movs	r3, r1
 800326c:	021c      	lsls	r4, r3, #8
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68b8      	ldr	r0, [r7, #8]
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	1900      	adds	r0, r0, r4
 8003280:	4169      	adcs	r1, r5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	2300      	movs	r3, #0
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f7fc ffd0 	bl	8000234 <__aeabi_uldivmod>
 8003294:	0002      	movs	r2, r0
 8003296:	000b      	movs	r3, r1
 8003298:	0013      	movs	r3, r2
 800329a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800329c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800329e:	23c0      	movs	r3, #192	@ 0xc0
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d309      	bcc.n	80032ba <UART_SetConfig+0x332>
 80032a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	035b      	lsls	r3, r3, #13
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d204      	bcs.n	80032ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e0eb      	b.n	8003492 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80032ba:	231a      	movs	r3, #26
 80032bc:	2218      	movs	r2, #24
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e0e4      	b.n	8003492 <UART_SetConfig+0x50a>
 80032c8:	efff69f3 	.word	0xefff69f3
 80032cc:	ffffcfff 	.word	0xffffcfff
 80032d0:	40004800 	.word	0x40004800
 80032d4:	fffff4ff 	.word	0xfffff4ff
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	40005000 	.word	0x40005000
 80032ec:	003d0900 	.word	0x003d0900
 80032f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d000      	beq.n	8003302 <UART_SetConfig+0x37a>
 8003300:	e070      	b.n	80033e4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003302:	231b      	movs	r3, #27
 8003304:	2218      	movs	r2, #24
 8003306:	189b      	adds	r3, r3, r2
 8003308:	19db      	adds	r3, r3, r7
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d822      	bhi.n	8003356 <UART_SetConfig+0x3ce>
 8003310:	009a      	lsls	r2, r3, #2
 8003312:	4b67      	ldr	r3, [pc, #412]	@ (80034b0 <UART_SetConfig+0x528>)
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800331a:	f7ff fbb9 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 800331e:	0003      	movs	r3, r0
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003322:	e021      	b.n	8003368 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7ff fbca 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 8003328:	0003      	movs	r3, r0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800332c:	e01c      	b.n	8003368 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800332e:	4b61      	ldr	r3, [pc, #388]	@ (80034b4 <UART_SetConfig+0x52c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2210      	movs	r2, #16
 8003334:	4013      	ands	r3, r2
 8003336:	d002      	beq.n	800333e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003338:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <UART_SetConfig+0x530>)
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800333c:	e014      	b.n	8003368 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800333e:	4b5f      	ldr	r3, [pc, #380]	@ (80034bc <UART_SetConfig+0x534>)
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003342:	e011      	b.n	8003368 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003344:	f7ff faf4 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8003348:	0003      	movs	r3, r0
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800334c:	e00c      	b.n	8003368 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003354:	e008      	b.n	8003368 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800335a:	231a      	movs	r3, #26
 800335c:	2218      	movs	r2, #24
 800335e:	189b      	adds	r3, r3, r2
 8003360:	19db      	adds	r3, r3, r7
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
        break;
 8003366:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d100      	bne.n	8003370 <UART_SetConfig+0x3e8>
 800336e:	e090      	b.n	8003492 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	005a      	lsls	r2, r3, #1
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	18d2      	adds	r2, r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0019      	movs	r1, r3
 8003382:	0010      	movs	r0, r2
 8003384:	f7fc feca 	bl	800011c <__udivsi3>
 8003388:	0003      	movs	r3, r0
 800338a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	2b0f      	cmp	r3, #15
 8003390:	d921      	bls.n	80033d6 <UART_SetConfig+0x44e>
 8003392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	025b      	lsls	r3, r3, #9
 8003398:	429a      	cmp	r2, r3
 800339a:	d21c      	bcs.n	80033d6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	b29a      	uxth	r2, r3
 80033a0:	200e      	movs	r0, #14
 80033a2:	2418      	movs	r4, #24
 80033a4:	1903      	adds	r3, r0, r4
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	210f      	movs	r1, #15
 80033aa:	438a      	bics	r2, r1
 80033ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2207      	movs	r2, #7
 80033b6:	4013      	ands	r3, r2
 80033b8:	b299      	uxth	r1, r3
 80033ba:	1903      	adds	r3, r0, r4
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	1902      	adds	r2, r0, r4
 80033c0:	19d2      	adds	r2, r2, r7
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	1902      	adds	r2, r0, r4
 80033ce:	19d2      	adds	r2, r2, r7
 80033d0:	8812      	ldrh	r2, [r2, #0]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	e05d      	b.n	8003492 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80033d6:	231a      	movs	r3, #26
 80033d8:	2218      	movs	r2, #24
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	19db      	adds	r3, r3, r7
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e056      	b.n	8003492 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033e4:	231b      	movs	r3, #27
 80033e6:	2218      	movs	r2, #24
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	19db      	adds	r3, r3, r7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d822      	bhi.n	8003438 <UART_SetConfig+0x4b0>
 80033f2:	009a      	lsls	r2, r3, #2
 80033f4:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <UART_SetConfig+0x538>)
 80033f6:	18d3      	adds	r3, r2, r3
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033fc:	f7ff fb48 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8003400:	0003      	movs	r3, r0
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003404:	e021      	b.n	800344a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003406:	f7ff fb59 	bl	8002abc <HAL_RCC_GetPCLK2Freq>
 800340a:	0003      	movs	r3, r0
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800340e:	e01c      	b.n	800344a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003410:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <UART_SetConfig+0x52c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2210      	movs	r2, #16
 8003416:	4013      	ands	r3, r2
 8003418:	d002      	beq.n	8003420 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800341a:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <UART_SetConfig+0x530>)
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800341e:	e014      	b.n	800344a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003420:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <UART_SetConfig+0x534>)
 8003422:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003424:	e011      	b.n	800344a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003426:	f7ff fa83 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800342a:	0003      	movs	r3, r0
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800342e:	e00c      	b.n	800344a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003436:	e008      	b.n	800344a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800343c:	231a      	movs	r3, #26
 800343e:	2218      	movs	r2, #24
 8003440:	189b      	adds	r3, r3, r2
 8003442:	19db      	adds	r3, r3, r7
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
        break;
 8003448:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	085a      	lsrs	r2, r3, #1
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	18d2      	adds	r2, r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0019      	movs	r1, r3
 8003460:	0010      	movs	r0, r2
 8003462:	f7fc fe5b 	bl	800011c <__udivsi3>
 8003466:	0003      	movs	r3, r0
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	2b0f      	cmp	r3, #15
 800346e:	d90a      	bls.n	8003486 <UART_SetConfig+0x4fe>
 8003470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003472:	2380      	movs	r3, #128	@ 0x80
 8003474:	025b      	lsls	r3, r3, #9
 8003476:	429a      	cmp	r2, r3
 8003478:	d205      	bcs.n	8003486 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	b29a      	uxth	r2, r3
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e005      	b.n	8003492 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	231a      	movs	r3, #26
 8003488:	2218      	movs	r2, #24
 800348a:	189b      	adds	r3, r3, r2
 800348c:	19db      	adds	r3, r3, r7
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2200      	movs	r2, #0
 8003496:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2200      	movs	r2, #0
 800349c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800349e:	231a      	movs	r3, #26
 80034a0:	2218      	movs	r2, #24
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	19db      	adds	r3, r3, r7
 80034a6:	781b      	ldrb	r3, [r3, #0]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b00e      	add	sp, #56	@ 0x38
 80034ae:	bdb0      	pop	{r4, r5, r7, pc}
 80034b0:	0800429c 	.word	0x0800429c
 80034b4:	40021000 	.word	0x40021000
 80034b8:	003d0900 	.word	0x003d0900
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	080042c0 	.word	0x080042c0

080034c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	d00b      	beq.n	80034ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003608 <UART_AdvFeatureConfig+0x144>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2202      	movs	r2, #2
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00b      	beq.n	8003510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a43      	ldr	r2, [pc, #268]	@ (800360c <UART_AdvFeatureConfig+0x148>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	2204      	movs	r2, #4
 8003516:	4013      	ands	r3, r2
 8003518:	d00b      	beq.n	8003532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a3b      	ldr	r2, [pc, #236]	@ (8003610 <UART_AdvFeatureConfig+0x14c>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	2208      	movs	r2, #8
 8003538:	4013      	ands	r3, r2
 800353a:	d00b      	beq.n	8003554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a34      	ldr	r2, [pc, #208]	@ (8003614 <UART_AdvFeatureConfig+0x150>)
 8003544:	4013      	ands	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	2210      	movs	r2, #16
 800355a:	4013      	ands	r3, r2
 800355c:	d00b      	beq.n	8003576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a2c      	ldr	r2, [pc, #176]	@ (8003618 <UART_AdvFeatureConfig+0x154>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	2220      	movs	r2, #32
 800357c:	4013      	ands	r3, r2
 800357e:	d00b      	beq.n	8003598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4a25      	ldr	r2, [pc, #148]	@ (800361c <UART_AdvFeatureConfig+0x158>)
 8003588:	4013      	ands	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	2240      	movs	r2, #64	@ 0x40
 800359e:	4013      	ands	r3, r2
 80035a0:	d01d      	beq.n	80035de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <UART_AdvFeatureConfig+0x15c>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	035b      	lsls	r3, r3, #13
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d10b      	bne.n	80035de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a15      	ldr	r2, [pc, #84]	@ (8003624 <UART_AdvFeatureConfig+0x160>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00b      	beq.n	8003600 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003628 <UART_AdvFeatureConfig+0x164>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}
 8003608:	fffdffff 	.word	0xfffdffff
 800360c:	fffeffff 	.word	0xfffeffff
 8003610:	fffbffff 	.word	0xfffbffff
 8003614:	ffff7fff 	.word	0xffff7fff
 8003618:	ffffefff 	.word	0xffffefff
 800361c:	ffffdfff 	.word	0xffffdfff
 8003620:	ffefffff 	.word	0xffefffff
 8003624:	ff9fffff 	.word	0xff9fffff
 8003628:	fff7ffff 	.word	0xfff7ffff

0800362c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b092      	sub	sp, #72	@ 0x48
 8003630:	af02      	add	r7, sp, #8
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2284      	movs	r2, #132	@ 0x84
 8003638:	2100      	movs	r1, #0
 800363a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800363c:	f7fd fab8 	bl	8000bb0 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2208      	movs	r2, #8
 800364c:	4013      	ands	r3, r2
 800364e:	2b08      	cmp	r3, #8
 8003650:	d12c      	bne.n	80036ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003654:	2280      	movs	r2, #128	@ 0x80
 8003656:	0391      	lsls	r1, r2, #14
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <UART_CheckIdleState+0x148>)
 800365c:	9200      	str	r2, [sp, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	f000 f88c 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d021      	beq.n	80036ac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003668:	f3ef 8310 	mrs	r3, PRIMASK
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003672:	2301      	movs	r3, #1
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	f383 8810 	msr	PRIMASK, r3
}
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2180      	movs	r1, #128	@ 0x80
 800368a:	438a      	bics	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003694:	f383 8810 	msr	PRIMASK, r3
}
 8003698:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2278      	movs	r2, #120	@ 0x78
 80036a4:	2100      	movs	r1, #0
 80036a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e05f      	b.n	800376c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2204      	movs	r2, #4
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d146      	bne.n	8003748 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	03d1      	lsls	r1, r2, #15
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <UART_CheckIdleState+0x148>)
 80036c4:	9200      	str	r2, [sp, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f000 f858 	bl	800377c <UART_WaitOnFlagUntilTimeout>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d03b      	beq.n	8003748 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d0:	f3ef 8310 	mrs	r3, PRIMASK
 80036d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036da:	2301      	movs	r3, #1
 80036dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4921      	ldr	r1, [pc, #132]	@ (8003778 <UART_CheckIdleState+0x14c>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003702:	f3ef 8310 	mrs	r3, PRIMASK
 8003706:	61bb      	str	r3, [r7, #24]
  return(result);
 8003708:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
 800370c:	2301      	movs	r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f383 8810 	msr	PRIMASK, r3
}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	438a      	bics	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	2120      	movs	r1, #32
 800373a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2278      	movs	r2, #120	@ 0x78
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e011      	b.n	800376c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2280      	movs	r2, #128	@ 0x80
 8003752:	2120      	movs	r1, #32
 8003754:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2278      	movs	r2, #120	@ 0x78
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b010      	add	sp, #64	@ 0x40
 8003772:	bd80      	pop	{r7, pc}
 8003774:	01ffffff 	.word	0x01ffffff
 8003778:	fffffedf 	.word	0xfffffedf

0800377c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378c:	e04b      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3301      	adds	r3, #1
 8003792:	d048      	beq.n	8003826 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003794:	f7fd fa0c 	bl	8000bb0 <HAL_GetTick>
 8003798:	0002      	movs	r2, r0
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04b      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2204      	movs	r2, #4
 80037b6:	4013      	ands	r3, r2
 80037b8:	d035      	beq.n	8003826 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2208      	movs	r2, #8
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d111      	bne.n	80037ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 f83c 	bl	8003850 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2284      	movs	r2, #132	@ 0x84
 80037dc:	2108      	movs	r1, #8
 80037de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2278      	movs	r2, #120	@ 0x78
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e02c      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	2380      	movs	r3, #128	@ 0x80
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	401a      	ands	r2, r3
 80037f8:	2380      	movs	r3, #128	@ 0x80
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d112      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2280      	movs	r2, #128	@ 0x80
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f81f 	bl	8003850 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2284      	movs	r2, #132	@ 0x84
 8003816:	2120      	movs	r1, #32
 8003818:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2278      	movs	r2, #120	@ 0x78
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e00f      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	425a      	negs	r2, r3
 8003836:	4153      	adcs	r3, r2
 8003838:	b2db      	uxtb	r3, r3
 800383a:	001a      	movs	r2, r3
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d0a4      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	@ 0x38
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003858:	f3ef 8310 	mrs	r3, PRIMASK
 800385c:	617b      	str	r3, [r7, #20]
  return(result);
 800385e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4926      	ldr	r1, [pc, #152]	@ (8003914 <UART_EndRxTransfer+0xc4>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388a:	f3ef 8310 	mrs	r3, PRIMASK
 800388e:	623b      	str	r3, [r7, #32]
  return(result);
 8003890:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
 8003894:	2301      	movs	r3, #1
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2101      	movs	r1, #1
 80038ac:	438a      	bics	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d118      	bne.n	80038f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c4:	f3ef 8310 	mrs	r3, PRIMASK
 80038c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ce:	2301      	movs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2110      	movs	r1, #16
 80038e6:	438a      	bics	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2280      	movs	r2, #128	@ 0x80
 80038fa:	2120      	movs	r1, #32
 80038fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b00e      	add	sp, #56	@ 0x38
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	fffffedf 	.word	0xfffffedf

08003918 <siprintf>:
 8003918:	b40e      	push	{r1, r2, r3}
 800391a:	b500      	push	{lr}
 800391c:	490b      	ldr	r1, [pc, #44]	@ (800394c <siprintf+0x34>)
 800391e:	b09c      	sub	sp, #112	@ 0x70
 8003920:	ab1d      	add	r3, sp, #116	@ 0x74
 8003922:	9002      	str	r0, [sp, #8]
 8003924:	9006      	str	r0, [sp, #24]
 8003926:	9107      	str	r1, [sp, #28]
 8003928:	9104      	str	r1, [sp, #16]
 800392a:	4809      	ldr	r0, [pc, #36]	@ (8003950 <siprintf+0x38>)
 800392c:	4909      	ldr	r1, [pc, #36]	@ (8003954 <siprintf+0x3c>)
 800392e:	cb04      	ldmia	r3!, {r2}
 8003930:	9105      	str	r1, [sp, #20]
 8003932:	6800      	ldr	r0, [r0, #0]
 8003934:	a902      	add	r1, sp, #8
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	f000 f99e 	bl	8003c78 <_svfiprintf_r>
 800393c:	2200      	movs	r2, #0
 800393e:	9b02      	ldr	r3, [sp, #8]
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	b01c      	add	sp, #112	@ 0x70
 8003944:	bc08      	pop	{r3}
 8003946:	b003      	add	sp, #12
 8003948:	4718      	bx	r3
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	7fffffff 	.word	0x7fffffff
 8003950:	2000000c 	.word	0x2000000c
 8003954:	ffff0208 	.word	0xffff0208

08003958 <memset>:
 8003958:	0003      	movs	r3, r0
 800395a:	1882      	adds	r2, r0, r2
 800395c:	4293      	cmp	r3, r2
 800395e:	d100      	bne.n	8003962 <memset+0xa>
 8003960:	4770      	bx	lr
 8003962:	7019      	strb	r1, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	e7f9      	b.n	800395c <memset+0x4>

08003968 <__errno>:
 8003968:	4b01      	ldr	r3, [pc, #4]	@ (8003970 <__errno+0x8>)
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	4770      	bx	lr
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	2000000c 	.word	0x2000000c

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	2600      	movs	r6, #0
 8003978:	4c0c      	ldr	r4, [pc, #48]	@ (80039ac <__libc_init_array+0x38>)
 800397a:	4d0d      	ldr	r5, [pc, #52]	@ (80039b0 <__libc_init_array+0x3c>)
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	2600      	movs	r6, #0
 8003986:	f000 fc65 	bl	8004254 <_init>
 800398a:	4c0a      	ldr	r4, [pc, #40]	@ (80039b4 <__libc_init_array+0x40>)
 800398c:	4d0a      	ldr	r5, [pc, #40]	@ (80039b8 <__libc_init_array+0x44>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	00b3      	lsls	r3, r6, #2
 800399a:	58eb      	ldr	r3, [r5, r3]
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	00b3      	lsls	r3, r6, #2
 80039a4:	58eb      	ldr	r3, [r5, r3]
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08004320 	.word	0x08004320
 80039b0:	08004320 	.word	0x08004320
 80039b4:	08004324 	.word	0x08004324
 80039b8:	08004320 	.word	0x08004320

080039bc <__retarget_lock_acquire_recursive>:
 80039bc:	4770      	bx	lr

080039be <__retarget_lock_release_recursive>:
 80039be:	4770      	bx	lr

080039c0 <_free_r>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	0005      	movs	r5, r0
 80039c4:	1e0c      	subs	r4, r1, #0
 80039c6:	d010      	beq.n	80039ea <_free_r+0x2a>
 80039c8:	3c04      	subs	r4, #4
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da00      	bge.n	80039d2 <_free_r+0x12>
 80039d0:	18e4      	adds	r4, r4, r3
 80039d2:	0028      	movs	r0, r5
 80039d4:	f000 f8e0 	bl	8003b98 <__malloc_lock>
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <_free_r+0x90>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <_free_r+0x2c>
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	6014      	str	r4, [r2, #0]
 80039e4:	0028      	movs	r0, r5
 80039e6:	f000 f8df 	bl	8003ba8 <__malloc_unlock>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d908      	bls.n	8003a02 <_free_r+0x42>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d1f3      	bne.n	80039e0 <_free_r+0x20>
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	1809      	adds	r1, r1, r0
 80039fe:	6021      	str	r1, [r4, #0]
 8003a00:	e7ee      	b.n	80039e0 <_free_r+0x20>
 8003a02:	001a      	movs	r2, r3
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <_free_r+0x4e>
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	d9f9      	bls.n	8003a02 <_free_r+0x42>
 8003a0e:	6811      	ldr	r1, [r2, #0]
 8003a10:	1850      	adds	r0, r2, r1
 8003a12:	42a0      	cmp	r0, r4
 8003a14:	d10b      	bne.n	8003a2e <_free_r+0x6e>
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	1809      	adds	r1, r1, r0
 8003a1a:	1850      	adds	r0, r2, r1
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	4283      	cmp	r3, r0
 8003a20:	d1e0      	bne.n	80039e4 <_free_r+0x24>
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	1841      	adds	r1, r0, r1
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	6053      	str	r3, [r2, #4]
 8003a2c:	e7da      	b.n	80039e4 <_free_r+0x24>
 8003a2e:	42a0      	cmp	r0, r4
 8003a30:	d902      	bls.n	8003a38 <_free_r+0x78>
 8003a32:	230c      	movs	r3, #12
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	e7d5      	b.n	80039e4 <_free_r+0x24>
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	1821      	adds	r1, r4, r0
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	d103      	bne.n	8003a48 <_free_r+0x88>
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	1809      	adds	r1, r1, r0
 8003a46:	6021      	str	r1, [r4, #0]
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	6054      	str	r4, [r2, #4]
 8003a4c:	e7ca      	b.n	80039e4 <_free_r+0x24>
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	2000038c 	.word	0x2000038c

08003a54 <sbrk_aligned>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e0f      	ldr	r6, [pc, #60]	@ (8003a94 <sbrk_aligned+0x40>)
 8003a58:	000d      	movs	r5, r1
 8003a5a:	6831      	ldr	r1, [r6, #0]
 8003a5c:	0004      	movs	r4, r0
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d102      	bne.n	8003a68 <sbrk_aligned+0x14>
 8003a62:	f000 fb99 	bl	8004198 <_sbrk_r>
 8003a66:	6030      	str	r0, [r6, #0]
 8003a68:	0029      	movs	r1, r5
 8003a6a:	0020      	movs	r0, r4
 8003a6c:	f000 fb94 	bl	8004198 <_sbrk_r>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d103      	bne.n	8003a7c <sbrk_aligned+0x28>
 8003a74:	2501      	movs	r5, #1
 8003a76:	426d      	negs	r5, r5
 8003a78:	0028      	movs	r0, r5
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	1cc5      	adds	r5, r0, #3
 8003a80:	439d      	bics	r5, r3
 8003a82:	42a8      	cmp	r0, r5
 8003a84:	d0f8      	beq.n	8003a78 <sbrk_aligned+0x24>
 8003a86:	1a29      	subs	r1, r5, r0
 8003a88:	0020      	movs	r0, r4
 8003a8a:	f000 fb85 	bl	8004198 <_sbrk_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d1f2      	bne.n	8003a78 <sbrk_aligned+0x24>
 8003a92:	e7ef      	b.n	8003a74 <sbrk_aligned+0x20>
 8003a94:	20000388 	.word	0x20000388

08003a98 <_malloc_r>:
 8003a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	1ccb      	adds	r3, r1, #3
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	0005      	movs	r5, r0
 8003aa4:	001f      	movs	r7, r3
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d234      	bcs.n	8003b14 <_malloc_r+0x7c>
 8003aaa:	270c      	movs	r7, #12
 8003aac:	42b9      	cmp	r1, r7
 8003aae:	d833      	bhi.n	8003b18 <_malloc_r+0x80>
 8003ab0:	0028      	movs	r0, r5
 8003ab2:	f000 f871 	bl	8003b98 <__malloc_lock>
 8003ab6:	4e37      	ldr	r6, [pc, #220]	@ (8003b94 <_malloc_r+0xfc>)
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	001c      	movs	r4, r3
 8003abc:	2c00      	cmp	r4, #0
 8003abe:	d12f      	bne.n	8003b20 <_malloc_r+0x88>
 8003ac0:	0039      	movs	r1, r7
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	f7ff ffc6 	bl	8003a54 <sbrk_aligned>
 8003ac8:	0004      	movs	r4, r0
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d15f      	bne.n	8003b8e <_malloc_r+0xf6>
 8003ace:	6834      	ldr	r4, [r6, #0]
 8003ad0:	9400      	str	r4, [sp, #0]
 8003ad2:	9b00      	ldr	r3, [sp, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d14a      	bne.n	8003b6e <_malloc_r+0xd6>
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	d052      	beq.n	8003b82 <_malloc_r+0xea>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	0028      	movs	r0, r5
 8003ae0:	18e3      	adds	r3, r4, r3
 8003ae2:	9900      	ldr	r1, [sp, #0]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	f000 fb57 	bl	8004198 <_sbrk_r>
 8003aea:	9b01      	ldr	r3, [sp, #4]
 8003aec:	4283      	cmp	r3, r0
 8003aee:	d148      	bne.n	8003b82 <_malloc_r+0xea>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	0028      	movs	r0, r5
 8003af4:	1aff      	subs	r7, r7, r3
 8003af6:	0039      	movs	r1, r7
 8003af8:	f7ff ffac 	bl	8003a54 <sbrk_aligned>
 8003afc:	3001      	adds	r0, #1
 8003afe:	d040      	beq.n	8003b82 <_malloc_r+0xea>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	6833      	ldr	r3, [r6, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	2a00      	cmp	r2, #0
 8003b0c:	d133      	bne.n	8003b76 <_malloc_r+0xde>
 8003b0e:	9b00      	ldr	r3, [sp, #0]
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	e019      	b.n	8003b48 <_malloc_r+0xb0>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	dac9      	bge.n	8003aac <_malloc_r+0x14>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b20:	6821      	ldr	r1, [r4, #0]
 8003b22:	1bc9      	subs	r1, r1, r7
 8003b24:	d420      	bmi.n	8003b68 <_malloc_r+0xd0>
 8003b26:	290b      	cmp	r1, #11
 8003b28:	d90a      	bls.n	8003b40 <_malloc_r+0xa8>
 8003b2a:	19e2      	adds	r2, r4, r7
 8003b2c:	6027      	str	r7, [r4, #0]
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	d104      	bne.n	8003b3c <_malloc_r+0xa4>
 8003b32:	6032      	str	r2, [r6, #0]
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	6011      	str	r1, [r2, #0]
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	e005      	b.n	8003b48 <_malloc_r+0xb0>
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e7f9      	b.n	8003b34 <_malloc_r+0x9c>
 8003b40:	6862      	ldr	r2, [r4, #4]
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	d10e      	bne.n	8003b64 <_malloc_r+0xcc>
 8003b46:	6032      	str	r2, [r6, #0]
 8003b48:	0028      	movs	r0, r5
 8003b4a:	f000 f82d 	bl	8003ba8 <__malloc_unlock>
 8003b4e:	0020      	movs	r0, r4
 8003b50:	2207      	movs	r2, #7
 8003b52:	300b      	adds	r0, #11
 8003b54:	1d23      	adds	r3, r4, #4
 8003b56:	4390      	bics	r0, r2
 8003b58:	1ac2      	subs	r2, r0, r3
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	d0df      	beq.n	8003b1e <_malloc_r+0x86>
 8003b5e:	1a1b      	subs	r3, r3, r0
 8003b60:	50a3      	str	r3, [r4, r2]
 8003b62:	e7dc      	b.n	8003b1e <_malloc_r+0x86>
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	e7ef      	b.n	8003b48 <_malloc_r+0xb0>
 8003b68:	0023      	movs	r3, r4
 8003b6a:	6864      	ldr	r4, [r4, #4]
 8003b6c:	e7a6      	b.n	8003abc <_malloc_r+0x24>
 8003b6e:	9c00      	ldr	r4, [sp, #0]
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	e7ad      	b.n	8003ad2 <_malloc_r+0x3a>
 8003b76:	001a      	movs	r2, r3
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	d1fb      	bne.n	8003b76 <_malloc_r+0xde>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e7da      	b.n	8003b38 <_malloc_r+0xa0>
 8003b82:	230c      	movs	r3, #12
 8003b84:	0028      	movs	r0, r5
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	f000 f80e 	bl	8003ba8 <__malloc_unlock>
 8003b8c:	e7c6      	b.n	8003b1c <_malloc_r+0x84>
 8003b8e:	6007      	str	r7, [r0, #0]
 8003b90:	e7da      	b.n	8003b48 <_malloc_r+0xb0>
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	2000038c 	.word	0x2000038c

08003b98 <__malloc_lock>:
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	4802      	ldr	r0, [pc, #8]	@ (8003ba4 <__malloc_lock+0xc>)
 8003b9c:	f7ff ff0e 	bl	80039bc <__retarget_lock_acquire_recursive>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	20000384 	.word	0x20000384

08003ba8 <__malloc_unlock>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4802      	ldr	r0, [pc, #8]	@ (8003bb4 <__malloc_unlock+0xc>)
 8003bac:	f7ff ff07 	bl	80039be <__retarget_lock_release_recursive>
 8003bb0:	bd10      	pop	{r4, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	20000384 	.word	0x20000384

08003bb8 <__ssputs_r>:
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	688e      	ldr	r6, [r1, #8]
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	001f      	movs	r7, r3
 8003bc0:	000c      	movs	r4, r1
 8003bc2:	680b      	ldr	r3, [r1, #0]
 8003bc4:	9002      	str	r0, [sp, #8]
 8003bc6:	9203      	str	r2, [sp, #12]
 8003bc8:	42be      	cmp	r6, r7
 8003bca:	d830      	bhi.n	8003c2e <__ssputs_r+0x76>
 8003bcc:	210c      	movs	r1, #12
 8003bce:	5e62      	ldrsh	r2, [r4, r1]
 8003bd0:	2190      	movs	r1, #144	@ 0x90
 8003bd2:	00c9      	lsls	r1, r1, #3
 8003bd4:	420a      	tst	r2, r1
 8003bd6:	d028      	beq.n	8003c2a <__ssputs_r+0x72>
 8003bd8:	2003      	movs	r0, #3
 8003bda:	6921      	ldr	r1, [r4, #16]
 8003bdc:	1a5b      	subs	r3, r3, r1
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	6963      	ldr	r3, [r4, #20]
 8003be2:	4343      	muls	r3, r0
 8003be4:	9801      	ldr	r0, [sp, #4]
 8003be6:	0fdd      	lsrs	r5, r3, #31
 8003be8:	18ed      	adds	r5, r5, r3
 8003bea:	1c7b      	adds	r3, r7, #1
 8003bec:	181b      	adds	r3, r3, r0
 8003bee:	106d      	asrs	r5, r5, #1
 8003bf0:	42ab      	cmp	r3, r5
 8003bf2:	d900      	bls.n	8003bf6 <__ssputs_r+0x3e>
 8003bf4:	001d      	movs	r5, r3
 8003bf6:	0552      	lsls	r2, r2, #21
 8003bf8:	d528      	bpl.n	8003c4c <__ssputs_r+0x94>
 8003bfa:	0029      	movs	r1, r5
 8003bfc:	9802      	ldr	r0, [sp, #8]
 8003bfe:	f7ff ff4b 	bl	8003a98 <_malloc_r>
 8003c02:	1e06      	subs	r6, r0, #0
 8003c04:	d02c      	beq.n	8003c60 <__ssputs_r+0xa8>
 8003c06:	9a01      	ldr	r2, [sp, #4]
 8003c08:	6921      	ldr	r1, [r4, #16]
 8003c0a:	f000 fae2 	bl	80041d2 <memcpy>
 8003c0e:	89a2      	ldrh	r2, [r4, #12]
 8003c10:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <__ssputs_r+0xbc>)
 8003c12:	401a      	ands	r2, r3
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	4313      	orrs	r3, r2
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	6126      	str	r6, [r4, #16]
 8003c1e:	18f6      	adds	r6, r6, r3
 8003c20:	6026      	str	r6, [r4, #0]
 8003c22:	003e      	movs	r6, r7
 8003c24:	6165      	str	r5, [r4, #20]
 8003c26:	1aed      	subs	r5, r5, r3
 8003c28:	60a5      	str	r5, [r4, #8]
 8003c2a:	42be      	cmp	r6, r7
 8003c2c:	d900      	bls.n	8003c30 <__ssputs_r+0x78>
 8003c2e:	003e      	movs	r6, r7
 8003c30:	0032      	movs	r2, r6
 8003c32:	9903      	ldr	r1, [sp, #12]
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	f000 fa9b 	bl	8004170 <memmove>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	68a3      	ldr	r3, [r4, #8]
 8003c3e:	1b9b      	subs	r3, r3, r6
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	199b      	adds	r3, r3, r6
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	b005      	add	sp, #20
 8003c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4c:	002a      	movs	r2, r5
 8003c4e:	9802      	ldr	r0, [sp, #8]
 8003c50:	f000 fac8 	bl	80041e4 <_realloc_r>
 8003c54:	1e06      	subs	r6, r0, #0
 8003c56:	d1e0      	bne.n	8003c1a <__ssputs_r+0x62>
 8003c58:	6921      	ldr	r1, [r4, #16]
 8003c5a:	9802      	ldr	r0, [sp, #8]
 8003c5c:	f7ff feb0 	bl	80039c0 <_free_r>
 8003c60:	230c      	movs	r3, #12
 8003c62:	2001      	movs	r0, #1
 8003c64:	9a02      	ldr	r2, [sp, #8]
 8003c66:	4240      	negs	r0, r0
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	89a2      	ldrh	r2, [r4, #12]
 8003c6c:	3334      	adds	r3, #52	@ 0x34
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	e7e9      	b.n	8003c48 <__ssputs_r+0x90>
 8003c74:	fffffb7f 	.word	0xfffffb7f

08003c78 <_svfiprintf_r>:
 8003c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c7a:	b0a1      	sub	sp, #132	@ 0x84
 8003c7c:	9003      	str	r0, [sp, #12]
 8003c7e:	001d      	movs	r5, r3
 8003c80:	898b      	ldrh	r3, [r1, #12]
 8003c82:	000f      	movs	r7, r1
 8003c84:	0016      	movs	r6, r2
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	d511      	bpl.n	8003cae <_svfiprintf_r+0x36>
 8003c8a:	690b      	ldr	r3, [r1, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10e      	bne.n	8003cae <_svfiprintf_r+0x36>
 8003c90:	2140      	movs	r1, #64	@ 0x40
 8003c92:	f7ff ff01 	bl	8003a98 <_malloc_r>
 8003c96:	6038      	str	r0, [r7, #0]
 8003c98:	6138      	str	r0, [r7, #16]
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d105      	bne.n	8003caa <_svfiprintf_r+0x32>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	9a03      	ldr	r2, [sp, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	4240      	negs	r0, r0
 8003ca8:	e0cf      	b.n	8003e4a <_svfiprintf_r+0x1d2>
 8003caa:	2340      	movs	r3, #64	@ 0x40
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	ac08      	add	r4, sp, #32
 8003cb2:	6163      	str	r3, [r4, #20]
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	7663      	strb	r3, [r4, #25]
 8003cb8:	3310      	adds	r3, #16
 8003cba:	76a3      	strb	r3, [r4, #26]
 8003cbc:	9507      	str	r5, [sp, #28]
 8003cbe:	0035      	movs	r5, r6
 8003cc0:	782b      	ldrb	r3, [r5, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <_svfiprintf_r+0x52>
 8003cc6:	2b25      	cmp	r3, #37	@ 0x25
 8003cc8:	d148      	bne.n	8003d5c <_svfiprintf_r+0xe4>
 8003cca:	1bab      	subs	r3, r5, r6
 8003ccc:	9305      	str	r3, [sp, #20]
 8003cce:	42b5      	cmp	r5, r6
 8003cd0:	d00b      	beq.n	8003cea <_svfiprintf_r+0x72>
 8003cd2:	0032      	movs	r2, r6
 8003cd4:	0039      	movs	r1, r7
 8003cd6:	9803      	ldr	r0, [sp, #12]
 8003cd8:	f7ff ff6e 	bl	8003bb8 <__ssputs_r>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d100      	bne.n	8003ce2 <_svfiprintf_r+0x6a>
 8003ce0:	e0ae      	b.n	8003e40 <_svfiprintf_r+0x1c8>
 8003ce2:	6963      	ldr	r3, [r4, #20]
 8003ce4:	9a05      	ldr	r2, [sp, #20]
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	6163      	str	r3, [r4, #20]
 8003cea:	782b      	ldrb	r3, [r5, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d100      	bne.n	8003cf2 <_svfiprintf_r+0x7a>
 8003cf0:	e0a6      	b.n	8003e40 <_svfiprintf_r+0x1c8>
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	4252      	negs	r2, r2
 8003cf8:	6062      	str	r2, [r4, #4]
 8003cfa:	a904      	add	r1, sp, #16
 8003cfc:	3254      	adds	r2, #84	@ 0x54
 8003cfe:	1852      	adds	r2, r2, r1
 8003d00:	1c6e      	adds	r6, r5, #1
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	60e3      	str	r3, [r4, #12]
 8003d06:	60a3      	str	r3, [r4, #8]
 8003d08:	7013      	strb	r3, [r2, #0]
 8003d0a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003d0c:	4b54      	ldr	r3, [pc, #336]	@ (8003e60 <_svfiprintf_r+0x1e8>)
 8003d0e:	2205      	movs	r2, #5
 8003d10:	0018      	movs	r0, r3
 8003d12:	7831      	ldrb	r1, [r6, #0]
 8003d14:	9305      	str	r3, [sp, #20]
 8003d16:	f000 fa51 	bl	80041bc <memchr>
 8003d1a:	1c75      	adds	r5, r6, #1
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d11f      	bne.n	8003d60 <_svfiprintf_r+0xe8>
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	06d3      	lsls	r3, r2, #27
 8003d24:	d504      	bpl.n	8003d30 <_svfiprintf_r+0xb8>
 8003d26:	2353      	movs	r3, #83	@ 0x53
 8003d28:	a904      	add	r1, sp, #16
 8003d2a:	185b      	adds	r3, r3, r1
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	7019      	strb	r1, [r3, #0]
 8003d30:	0713      	lsls	r3, r2, #28
 8003d32:	d504      	bpl.n	8003d3e <_svfiprintf_r+0xc6>
 8003d34:	2353      	movs	r3, #83	@ 0x53
 8003d36:	a904      	add	r1, sp, #16
 8003d38:	185b      	adds	r3, r3, r1
 8003d3a:	212b      	movs	r1, #43	@ 0x2b
 8003d3c:	7019      	strb	r1, [r3, #0]
 8003d3e:	7833      	ldrb	r3, [r6, #0]
 8003d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d42:	d016      	beq.n	8003d72 <_svfiprintf_r+0xfa>
 8003d44:	0035      	movs	r5, r6
 8003d46:	2100      	movs	r1, #0
 8003d48:	200a      	movs	r0, #10
 8003d4a:	68e3      	ldr	r3, [r4, #12]
 8003d4c:	782a      	ldrb	r2, [r5, #0]
 8003d4e:	1c6e      	adds	r6, r5, #1
 8003d50:	3a30      	subs	r2, #48	@ 0x30
 8003d52:	2a09      	cmp	r2, #9
 8003d54:	d950      	bls.n	8003df8 <_svfiprintf_r+0x180>
 8003d56:	2900      	cmp	r1, #0
 8003d58:	d111      	bne.n	8003d7e <_svfiprintf_r+0x106>
 8003d5a:	e017      	b.n	8003d8c <_svfiprintf_r+0x114>
 8003d5c:	3501      	adds	r5, #1
 8003d5e:	e7af      	b.n	8003cc0 <_svfiprintf_r+0x48>
 8003d60:	9b05      	ldr	r3, [sp, #20]
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	1ac0      	subs	r0, r0, r3
 8003d66:	2301      	movs	r3, #1
 8003d68:	4083      	lsls	r3, r0
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	002e      	movs	r6, r5
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	e7cc      	b.n	8003d0c <_svfiprintf_r+0x94>
 8003d72:	9b07      	ldr	r3, [sp, #28]
 8003d74:	1d19      	adds	r1, r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	9107      	str	r1, [sp, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db01      	blt.n	8003d82 <_svfiprintf_r+0x10a>
 8003d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d80:	e004      	b.n	8003d8c <_svfiprintf_r+0x114>
 8003d82:	425b      	negs	r3, r3
 8003d84:	60e3      	str	r3, [r4, #12]
 8003d86:	2302      	movs	r3, #2
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	782b      	ldrb	r3, [r5, #0]
 8003d8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d90:	d10c      	bne.n	8003dac <_svfiprintf_r+0x134>
 8003d92:	786b      	ldrb	r3, [r5, #1]
 8003d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d96:	d134      	bne.n	8003e02 <_svfiprintf_r+0x18a>
 8003d98:	9b07      	ldr	r3, [sp, #28]
 8003d9a:	3502      	adds	r5, #2
 8003d9c:	1d1a      	adds	r2, r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	9207      	str	r2, [sp, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da01      	bge.n	8003daa <_svfiprintf_r+0x132>
 8003da6:	2301      	movs	r3, #1
 8003da8:	425b      	negs	r3, r3
 8003daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dac:	4e2d      	ldr	r6, [pc, #180]	@ (8003e64 <_svfiprintf_r+0x1ec>)
 8003dae:	2203      	movs	r2, #3
 8003db0:	0030      	movs	r0, r6
 8003db2:	7829      	ldrb	r1, [r5, #0]
 8003db4:	f000 fa02 	bl	80041bc <memchr>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d006      	beq.n	8003dca <_svfiprintf_r+0x152>
 8003dbc:	2340      	movs	r3, #64	@ 0x40
 8003dbe:	1b80      	subs	r0, r0, r6
 8003dc0:	4083      	lsls	r3, r0
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	7829      	ldrb	r1, [r5, #0]
 8003dcc:	2206      	movs	r2, #6
 8003dce:	4826      	ldr	r0, [pc, #152]	@ (8003e68 <_svfiprintf_r+0x1f0>)
 8003dd0:	1c6e      	adds	r6, r5, #1
 8003dd2:	7621      	strb	r1, [r4, #24]
 8003dd4:	f000 f9f2 	bl	80041bc <memchr>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d038      	beq.n	8003e4e <_svfiprintf_r+0x1d6>
 8003ddc:	4b23      	ldr	r3, [pc, #140]	@ (8003e6c <_svfiprintf_r+0x1f4>)
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d122      	bne.n	8003e28 <_svfiprintf_r+0x1b0>
 8003de2:	2207      	movs	r2, #7
 8003de4:	9b07      	ldr	r3, [sp, #28]
 8003de6:	3307      	adds	r3, #7
 8003de8:	4393      	bics	r3, r2
 8003dea:	3308      	adds	r3, #8
 8003dec:	9307      	str	r3, [sp, #28]
 8003dee:	6963      	ldr	r3, [r4, #20]
 8003df0:	9a04      	ldr	r2, [sp, #16]
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	6163      	str	r3, [r4, #20]
 8003df6:	e762      	b.n	8003cbe <_svfiprintf_r+0x46>
 8003df8:	4343      	muls	r3, r0
 8003dfa:	0035      	movs	r5, r6
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	e7a4      	b.n	8003d4c <_svfiprintf_r+0xd4>
 8003e02:	2300      	movs	r3, #0
 8003e04:	200a      	movs	r0, #10
 8003e06:	0019      	movs	r1, r3
 8003e08:	3501      	adds	r5, #1
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	782a      	ldrb	r2, [r5, #0]
 8003e0e:	1c6e      	adds	r6, r5, #1
 8003e10:	3a30      	subs	r2, #48	@ 0x30
 8003e12:	2a09      	cmp	r2, #9
 8003e14:	d903      	bls.n	8003e1e <_svfiprintf_r+0x1a6>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0c8      	beq.n	8003dac <_svfiprintf_r+0x134>
 8003e1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e1c:	e7c6      	b.n	8003dac <_svfiprintf_r+0x134>
 8003e1e:	4341      	muls	r1, r0
 8003e20:	0035      	movs	r5, r6
 8003e22:	2301      	movs	r3, #1
 8003e24:	1889      	adds	r1, r1, r2
 8003e26:	e7f1      	b.n	8003e0c <_svfiprintf_r+0x194>
 8003e28:	aa07      	add	r2, sp, #28
 8003e2a:	9200      	str	r2, [sp, #0]
 8003e2c:	0021      	movs	r1, r4
 8003e2e:	003a      	movs	r2, r7
 8003e30:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <_svfiprintf_r+0x1f8>)
 8003e32:	9803      	ldr	r0, [sp, #12]
 8003e34:	e000      	b.n	8003e38 <_svfiprintf_r+0x1c0>
 8003e36:	bf00      	nop
 8003e38:	9004      	str	r0, [sp, #16]
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	d1d6      	bne.n	8003dee <_svfiprintf_r+0x176>
 8003e40:	89bb      	ldrh	r3, [r7, #12]
 8003e42:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003e44:	065b      	lsls	r3, r3, #25
 8003e46:	d500      	bpl.n	8003e4a <_svfiprintf_r+0x1d2>
 8003e48:	e72c      	b.n	8003ca4 <_svfiprintf_r+0x2c>
 8003e4a:	b021      	add	sp, #132	@ 0x84
 8003e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4e:	aa07      	add	r2, sp, #28
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	0021      	movs	r1, r4
 8003e54:	003a      	movs	r2, r7
 8003e56:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <_svfiprintf_r+0x1f8>)
 8003e58:	9803      	ldr	r0, [sp, #12]
 8003e5a:	f000 f87b 	bl	8003f54 <_printf_i>
 8003e5e:	e7eb      	b.n	8003e38 <_svfiprintf_r+0x1c0>
 8003e60:	080042e4 	.word	0x080042e4
 8003e64:	080042ea 	.word	0x080042ea
 8003e68:	080042ee 	.word	0x080042ee
 8003e6c:	00000000 	.word	0x00000000
 8003e70:	08003bb9 	.word	0x08003bb9

08003e74 <_printf_common>:
 8003e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e76:	0016      	movs	r6, r2
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	688a      	ldr	r2, [r1, #8]
 8003e7c:	690b      	ldr	r3, [r1, #16]
 8003e7e:	000c      	movs	r4, r1
 8003e80:	9000      	str	r0, [sp, #0]
 8003e82:	4293      	cmp	r3, r2
 8003e84:	da00      	bge.n	8003e88 <_printf_common+0x14>
 8003e86:	0013      	movs	r3, r2
 8003e88:	0022      	movs	r2, r4
 8003e8a:	6033      	str	r3, [r6, #0]
 8003e8c:	3243      	adds	r2, #67	@ 0x43
 8003e8e:	7812      	ldrb	r2, [r2, #0]
 8003e90:	2a00      	cmp	r2, #0
 8003e92:	d001      	beq.n	8003e98 <_printf_common+0x24>
 8003e94:	3301      	adds	r3, #1
 8003e96:	6033      	str	r3, [r6, #0]
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	069b      	lsls	r3, r3, #26
 8003e9c:	d502      	bpl.n	8003ea4 <_printf_common+0x30>
 8003e9e:	6833      	ldr	r3, [r6, #0]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	6033      	str	r3, [r6, #0]
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	0015      	movs	r5, r2
 8003eaa:	401d      	ands	r5, r3
 8003eac:	421a      	tst	r2, r3
 8003eae:	d027      	beq.n	8003f00 <_printf_common+0x8c>
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	3343      	adds	r3, #67	@ 0x43
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	4193      	sbcs	r3, r2
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	0692      	lsls	r2, r2, #26
 8003ebe:	d430      	bmi.n	8003f22 <_printf_common+0xae>
 8003ec0:	0022      	movs	r2, r4
 8003ec2:	9901      	ldr	r1, [sp, #4]
 8003ec4:	9800      	ldr	r0, [sp, #0]
 8003ec6:	9d08      	ldr	r5, [sp, #32]
 8003ec8:	3243      	adds	r2, #67	@ 0x43
 8003eca:	47a8      	blx	r5
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d025      	beq.n	8003f1c <_printf_common+0xa8>
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d105      	bne.n	8003ee8 <_printf_common+0x74>
 8003edc:	6833      	ldr	r3, [r6, #0]
 8003ede:	68e5      	ldr	r5, [r4, #12]
 8003ee0:	1aed      	subs	r5, r5, r3
 8003ee2:	43eb      	mvns	r3, r5
 8003ee4:	17db      	asrs	r3, r3, #31
 8003ee6:	401d      	ands	r5, r3
 8003ee8:	68a3      	ldr	r3, [r4, #8]
 8003eea:	6922      	ldr	r2, [r4, #16]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	dd01      	ble.n	8003ef4 <_printf_common+0x80>
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	18ed      	adds	r5, r5, r3
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	42b5      	cmp	r5, r6
 8003ef8:	d120      	bne.n	8003f3c <_printf_common+0xc8>
 8003efa:	2000      	movs	r0, #0
 8003efc:	e010      	b.n	8003f20 <_printf_common+0xac>
 8003efe:	3501      	adds	r5, #1
 8003f00:	68e3      	ldr	r3, [r4, #12]
 8003f02:	6832      	ldr	r2, [r6, #0]
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	42ab      	cmp	r3, r5
 8003f08:	ddd2      	ble.n	8003eb0 <_printf_common+0x3c>
 8003f0a:	0022      	movs	r2, r4
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	9901      	ldr	r1, [sp, #4]
 8003f10:	9800      	ldr	r0, [sp, #0]
 8003f12:	9f08      	ldr	r7, [sp, #32]
 8003f14:	3219      	adds	r2, #25
 8003f16:	47b8      	blx	r7
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d1f0      	bne.n	8003efe <_printf_common+0x8a>
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	4240      	negs	r0, r0
 8003f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f22:	2030      	movs	r0, #48	@ 0x30
 8003f24:	18e1      	adds	r1, r4, r3
 8003f26:	3143      	adds	r1, #67	@ 0x43
 8003f28:	7008      	strb	r0, [r1, #0]
 8003f2a:	0021      	movs	r1, r4
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	3145      	adds	r1, #69	@ 0x45
 8003f30:	7809      	ldrb	r1, [r1, #0]
 8003f32:	18a2      	adds	r2, r4, r2
 8003f34:	3243      	adds	r2, #67	@ 0x43
 8003f36:	3302      	adds	r3, #2
 8003f38:	7011      	strb	r1, [r2, #0]
 8003f3a:	e7c1      	b.n	8003ec0 <_printf_common+0x4c>
 8003f3c:	0022      	movs	r2, r4
 8003f3e:	2301      	movs	r3, #1
 8003f40:	9901      	ldr	r1, [sp, #4]
 8003f42:	9800      	ldr	r0, [sp, #0]
 8003f44:	9f08      	ldr	r7, [sp, #32]
 8003f46:	321a      	adds	r2, #26
 8003f48:	47b8      	blx	r7
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d0e6      	beq.n	8003f1c <_printf_common+0xa8>
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7d1      	b.n	8003ef6 <_printf_common+0x82>
	...

08003f54 <_printf_i>:
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b08b      	sub	sp, #44	@ 0x2c
 8003f58:	9206      	str	r2, [sp, #24]
 8003f5a:	000a      	movs	r2, r1
 8003f5c:	3243      	adds	r2, #67	@ 0x43
 8003f5e:	9307      	str	r3, [sp, #28]
 8003f60:	9005      	str	r0, [sp, #20]
 8003f62:	9203      	str	r2, [sp, #12]
 8003f64:	7e0a      	ldrb	r2, [r1, #24]
 8003f66:	000c      	movs	r4, r1
 8003f68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003f6a:	2a78      	cmp	r2, #120	@ 0x78
 8003f6c:	d809      	bhi.n	8003f82 <_printf_i+0x2e>
 8003f6e:	2a62      	cmp	r2, #98	@ 0x62
 8003f70:	d80b      	bhi.n	8003f8a <_printf_i+0x36>
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d100      	bne.n	8003f78 <_printf_i+0x24>
 8003f76:	e0bc      	b.n	80040f2 <_printf_i+0x19e>
 8003f78:	497b      	ldr	r1, [pc, #492]	@ (8004168 <_printf_i+0x214>)
 8003f7a:	9104      	str	r1, [sp, #16]
 8003f7c:	2a58      	cmp	r2, #88	@ 0x58
 8003f7e:	d100      	bne.n	8003f82 <_printf_i+0x2e>
 8003f80:	e090      	b.n	80040a4 <_printf_i+0x150>
 8003f82:	0025      	movs	r5, r4
 8003f84:	3542      	adds	r5, #66	@ 0x42
 8003f86:	702a      	strb	r2, [r5, #0]
 8003f88:	e022      	b.n	8003fd0 <_printf_i+0x7c>
 8003f8a:	0010      	movs	r0, r2
 8003f8c:	3863      	subs	r0, #99	@ 0x63
 8003f8e:	2815      	cmp	r0, #21
 8003f90:	d8f7      	bhi.n	8003f82 <_printf_i+0x2e>
 8003f92:	f7fc f8b9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003f96:	0016      	.short	0x0016
 8003f98:	fff6001f 	.word	0xfff6001f
 8003f9c:	fff6fff6 	.word	0xfff6fff6
 8003fa0:	001ffff6 	.word	0x001ffff6
 8003fa4:	fff6fff6 	.word	0xfff6fff6
 8003fa8:	fff6fff6 	.word	0xfff6fff6
 8003fac:	003600a1 	.word	0x003600a1
 8003fb0:	fff60080 	.word	0xfff60080
 8003fb4:	00b2fff6 	.word	0x00b2fff6
 8003fb8:	0036fff6 	.word	0x0036fff6
 8003fbc:	fff6fff6 	.word	0xfff6fff6
 8003fc0:	0084      	.short	0x0084
 8003fc2:	0025      	movs	r5, r4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	3542      	adds	r5, #66	@ 0x42
 8003fc8:	1d11      	adds	r1, r2, #4
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	702b      	strb	r3, [r5, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0a0      	b.n	8004116 <_printf_i+0x1c2>
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	6809      	ldr	r1, [r1, #0]
 8003fd8:	1d02      	adds	r2, r0, #4
 8003fda:	060d      	lsls	r5, r1, #24
 8003fdc:	d50b      	bpl.n	8003ff6 <_printf_i+0xa2>
 8003fde:	6806      	ldr	r6, [r0, #0]
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	da03      	bge.n	8003fee <_printf_i+0x9a>
 8003fe6:	232d      	movs	r3, #45	@ 0x2d
 8003fe8:	9a03      	ldr	r2, [sp, #12]
 8003fea:	4276      	negs	r6, r6
 8003fec:	7013      	strb	r3, [r2, #0]
 8003fee:	4b5e      	ldr	r3, [pc, #376]	@ (8004168 <_printf_i+0x214>)
 8003ff0:	270a      	movs	r7, #10
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	e018      	b.n	8004028 <_printf_i+0xd4>
 8003ff6:	6806      	ldr	r6, [r0, #0]
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	0649      	lsls	r1, r1, #25
 8003ffc:	d5f1      	bpl.n	8003fe2 <_printf_i+0x8e>
 8003ffe:	b236      	sxth	r6, r6
 8004000:	e7ef      	b.n	8003fe2 <_printf_i+0x8e>
 8004002:	6808      	ldr	r0, [r1, #0]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	c940      	ldmia	r1!, {r6}
 8004008:	0605      	lsls	r5, r0, #24
 800400a:	d402      	bmi.n	8004012 <_printf_i+0xbe>
 800400c:	0640      	lsls	r0, r0, #25
 800400e:	d500      	bpl.n	8004012 <_printf_i+0xbe>
 8004010:	b2b6      	uxth	r6, r6
 8004012:	6019      	str	r1, [r3, #0]
 8004014:	4b54      	ldr	r3, [pc, #336]	@ (8004168 <_printf_i+0x214>)
 8004016:	270a      	movs	r7, #10
 8004018:	9304      	str	r3, [sp, #16]
 800401a:	2a6f      	cmp	r2, #111	@ 0x6f
 800401c:	d100      	bne.n	8004020 <_printf_i+0xcc>
 800401e:	3f02      	subs	r7, #2
 8004020:	0023      	movs	r3, r4
 8004022:	2200      	movs	r2, #0
 8004024:	3343      	adds	r3, #67	@ 0x43
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	60a3      	str	r3, [r4, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db03      	blt.n	8004038 <_printf_i+0xe4>
 8004030:	2104      	movs	r1, #4
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	438a      	bics	r2, r1
 8004036:	6022      	str	r2, [r4, #0]
 8004038:	2e00      	cmp	r6, #0
 800403a:	d102      	bne.n	8004042 <_printf_i+0xee>
 800403c:	9d03      	ldr	r5, [sp, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <_printf_i+0x108>
 8004042:	9d03      	ldr	r5, [sp, #12]
 8004044:	0030      	movs	r0, r6
 8004046:	0039      	movs	r1, r7
 8004048:	f7fc f8ee 	bl	8000228 <__aeabi_uidivmod>
 800404c:	9b04      	ldr	r3, [sp, #16]
 800404e:	3d01      	subs	r5, #1
 8004050:	5c5b      	ldrb	r3, [r3, r1]
 8004052:	702b      	strb	r3, [r5, #0]
 8004054:	0033      	movs	r3, r6
 8004056:	0006      	movs	r6, r0
 8004058:	429f      	cmp	r7, r3
 800405a:	d9f3      	bls.n	8004044 <_printf_i+0xf0>
 800405c:	2f08      	cmp	r7, #8
 800405e:	d109      	bne.n	8004074 <_printf_i+0x120>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	07db      	lsls	r3, r3, #31
 8004064:	d506      	bpl.n	8004074 <_printf_i+0x120>
 8004066:	6862      	ldr	r2, [r4, #4]
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	dc02      	bgt.n	8004074 <_printf_i+0x120>
 800406e:	2330      	movs	r3, #48	@ 0x30
 8004070:	3d01      	subs	r5, #1
 8004072:	702b      	strb	r3, [r5, #0]
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	1b5b      	subs	r3, r3, r5
 8004078:	6123      	str	r3, [r4, #16]
 800407a:	9b07      	ldr	r3, [sp, #28]
 800407c:	0021      	movs	r1, r4
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	9805      	ldr	r0, [sp, #20]
 8004082:	9b06      	ldr	r3, [sp, #24]
 8004084:	aa09      	add	r2, sp, #36	@ 0x24
 8004086:	f7ff fef5 	bl	8003e74 <_printf_common>
 800408a:	3001      	adds	r0, #1
 800408c:	d148      	bne.n	8004120 <_printf_i+0x1cc>
 800408e:	2001      	movs	r0, #1
 8004090:	4240      	negs	r0, r0
 8004092:	b00b      	add	sp, #44	@ 0x2c
 8004094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004096:	2220      	movs	r2, #32
 8004098:	6809      	ldr	r1, [r1, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	6022      	str	r2, [r4, #0]
 800409e:	2278      	movs	r2, #120	@ 0x78
 80040a0:	4932      	ldr	r1, [pc, #200]	@ (800416c <_printf_i+0x218>)
 80040a2:	9104      	str	r1, [sp, #16]
 80040a4:	0021      	movs	r1, r4
 80040a6:	3145      	adds	r1, #69	@ 0x45
 80040a8:	700a      	strb	r2, [r1, #0]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	6822      	ldr	r2, [r4, #0]
 80040ae:	c940      	ldmia	r1!, {r6}
 80040b0:	0610      	lsls	r0, r2, #24
 80040b2:	d402      	bmi.n	80040ba <_printf_i+0x166>
 80040b4:	0650      	lsls	r0, r2, #25
 80040b6:	d500      	bpl.n	80040ba <_printf_i+0x166>
 80040b8:	b2b6      	uxth	r6, r6
 80040ba:	6019      	str	r1, [r3, #0]
 80040bc:	07d3      	lsls	r3, r2, #31
 80040be:	d502      	bpl.n	80040c6 <_printf_i+0x172>
 80040c0:	2320      	movs	r3, #32
 80040c2:	4313      	orrs	r3, r2
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	d001      	beq.n	80040ce <_printf_i+0x17a>
 80040ca:	2710      	movs	r7, #16
 80040cc:	e7a8      	b.n	8004020 <_printf_i+0xcc>
 80040ce:	2220      	movs	r2, #32
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	4393      	bics	r3, r2
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	e7f8      	b.n	80040ca <_printf_i+0x176>
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	680d      	ldr	r5, [r1, #0]
 80040dc:	1d10      	adds	r0, r2, #4
 80040de:	6949      	ldr	r1, [r1, #20]
 80040e0:	6018      	str	r0, [r3, #0]
 80040e2:	6813      	ldr	r3, [r2, #0]
 80040e4:	062e      	lsls	r6, r5, #24
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0x198>
 80040e8:	6019      	str	r1, [r3, #0]
 80040ea:	e002      	b.n	80040f2 <_printf_i+0x19e>
 80040ec:	066d      	lsls	r5, r5, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0x194>
 80040f0:	8019      	strh	r1, [r3, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9d03      	ldr	r5, [sp, #12]
 80040f6:	6123      	str	r3, [r4, #16]
 80040f8:	e7bf      	b.n	800407a <_printf_i+0x126>
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	1d11      	adds	r1, r2, #4
 80040fe:	6019      	str	r1, [r3, #0]
 8004100:	6815      	ldr	r5, [r2, #0]
 8004102:	2100      	movs	r1, #0
 8004104:	0028      	movs	r0, r5
 8004106:	6862      	ldr	r2, [r4, #4]
 8004108:	f000 f858 	bl	80041bc <memchr>
 800410c:	2800      	cmp	r0, #0
 800410e:	d001      	beq.n	8004114 <_printf_i+0x1c0>
 8004110:	1b40      	subs	r0, r0, r5
 8004112:	6060      	str	r0, [r4, #4]
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	2300      	movs	r3, #0
 800411a:	9a03      	ldr	r2, [sp, #12]
 800411c:	7013      	strb	r3, [r2, #0]
 800411e:	e7ac      	b.n	800407a <_printf_i+0x126>
 8004120:	002a      	movs	r2, r5
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	9906      	ldr	r1, [sp, #24]
 8004126:	9805      	ldr	r0, [sp, #20]
 8004128:	9d07      	ldr	r5, [sp, #28]
 800412a:	47a8      	blx	r5
 800412c:	3001      	adds	r0, #1
 800412e:	d0ae      	beq.n	800408e <_printf_i+0x13a>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d415      	bmi.n	8004162 <_printf_i+0x20e>
 8004136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004138:	68e0      	ldr	r0, [r4, #12]
 800413a:	4298      	cmp	r0, r3
 800413c:	daa9      	bge.n	8004092 <_printf_i+0x13e>
 800413e:	0018      	movs	r0, r3
 8004140:	e7a7      	b.n	8004092 <_printf_i+0x13e>
 8004142:	0022      	movs	r2, r4
 8004144:	2301      	movs	r3, #1
 8004146:	9906      	ldr	r1, [sp, #24]
 8004148:	9805      	ldr	r0, [sp, #20]
 800414a:	9e07      	ldr	r6, [sp, #28]
 800414c:	3219      	adds	r2, #25
 800414e:	47b0      	blx	r6
 8004150:	3001      	adds	r0, #1
 8004152:	d09c      	beq.n	800408e <_printf_i+0x13a>
 8004154:	3501      	adds	r5, #1
 8004156:	68e3      	ldr	r3, [r4, #12]
 8004158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	42ab      	cmp	r3, r5
 800415e:	dcf0      	bgt.n	8004142 <_printf_i+0x1ee>
 8004160:	e7e9      	b.n	8004136 <_printf_i+0x1e2>
 8004162:	2500      	movs	r5, #0
 8004164:	e7f7      	b.n	8004156 <_printf_i+0x202>
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	080042f5 	.word	0x080042f5
 800416c:	08004306 	.word	0x08004306

08004170 <memmove>:
 8004170:	b510      	push	{r4, lr}
 8004172:	4288      	cmp	r0, r1
 8004174:	d806      	bhi.n	8004184 <memmove+0x14>
 8004176:	2300      	movs	r3, #0
 8004178:	429a      	cmp	r2, r3
 800417a:	d008      	beq.n	800418e <memmove+0x1e>
 800417c:	5ccc      	ldrb	r4, [r1, r3]
 800417e:	54c4      	strb	r4, [r0, r3]
 8004180:	3301      	adds	r3, #1
 8004182:	e7f9      	b.n	8004178 <memmove+0x8>
 8004184:	188b      	adds	r3, r1, r2
 8004186:	4298      	cmp	r0, r3
 8004188:	d2f5      	bcs.n	8004176 <memmove+0x6>
 800418a:	3a01      	subs	r2, #1
 800418c:	d200      	bcs.n	8004190 <memmove+0x20>
 800418e:	bd10      	pop	{r4, pc}
 8004190:	5c8b      	ldrb	r3, [r1, r2]
 8004192:	5483      	strb	r3, [r0, r2]
 8004194:	e7f9      	b.n	800418a <memmove+0x1a>
	...

08004198 <_sbrk_r>:
 8004198:	2300      	movs	r3, #0
 800419a:	b570      	push	{r4, r5, r6, lr}
 800419c:	4d06      	ldr	r5, [pc, #24]	@ (80041b8 <_sbrk_r+0x20>)
 800419e:	0004      	movs	r4, r0
 80041a0:	0008      	movs	r0, r1
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	f7fc fc38 	bl	8000a18 <_sbrk>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d103      	bne.n	80041b4 <_sbrk_r+0x1c>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <_sbrk_r+0x1c>
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	20000380 	.word	0x20000380

080041bc <memchr>:
 80041bc:	b2c9      	uxtb	r1, r1
 80041be:	1882      	adds	r2, r0, r2
 80041c0:	4290      	cmp	r0, r2
 80041c2:	d101      	bne.n	80041c8 <memchr+0xc>
 80041c4:	2000      	movs	r0, #0
 80041c6:	4770      	bx	lr
 80041c8:	7803      	ldrb	r3, [r0, #0]
 80041ca:	428b      	cmp	r3, r1
 80041cc:	d0fb      	beq.n	80041c6 <memchr+0xa>
 80041ce:	3001      	adds	r0, #1
 80041d0:	e7f6      	b.n	80041c0 <memchr+0x4>

080041d2 <memcpy>:
 80041d2:	2300      	movs	r3, #0
 80041d4:	b510      	push	{r4, lr}
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d100      	bne.n	80041dc <memcpy+0xa>
 80041da:	bd10      	pop	{r4, pc}
 80041dc:	5ccc      	ldrb	r4, [r1, r3]
 80041de:	54c4      	strb	r4, [r0, r3]
 80041e0:	3301      	adds	r3, #1
 80041e2:	e7f8      	b.n	80041d6 <memcpy+0x4>

080041e4 <_realloc_r>:
 80041e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041e6:	0006      	movs	r6, r0
 80041e8:	000c      	movs	r4, r1
 80041ea:	0015      	movs	r5, r2
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d105      	bne.n	80041fc <_realloc_r+0x18>
 80041f0:	0011      	movs	r1, r2
 80041f2:	f7ff fc51 	bl	8003a98 <_malloc_r>
 80041f6:	0004      	movs	r4, r0
 80041f8:	0020      	movs	r0, r4
 80041fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	d103      	bne.n	8004208 <_realloc_r+0x24>
 8004200:	f7ff fbde 	bl	80039c0 <_free_r>
 8004204:	2400      	movs	r4, #0
 8004206:	e7f7      	b.n	80041f8 <_realloc_r+0x14>
 8004208:	f000 f81b 	bl	8004242 <_malloc_usable_size_r>
 800420c:	0007      	movs	r7, r0
 800420e:	4285      	cmp	r5, r0
 8004210:	d802      	bhi.n	8004218 <_realloc_r+0x34>
 8004212:	0843      	lsrs	r3, r0, #1
 8004214:	42ab      	cmp	r3, r5
 8004216:	d3ef      	bcc.n	80041f8 <_realloc_r+0x14>
 8004218:	0029      	movs	r1, r5
 800421a:	0030      	movs	r0, r6
 800421c:	f7ff fc3c 	bl	8003a98 <_malloc_r>
 8004220:	9001      	str	r0, [sp, #4]
 8004222:	2800      	cmp	r0, #0
 8004224:	d0ee      	beq.n	8004204 <_realloc_r+0x20>
 8004226:	002a      	movs	r2, r5
 8004228:	42bd      	cmp	r5, r7
 800422a:	d900      	bls.n	800422e <_realloc_r+0x4a>
 800422c:	003a      	movs	r2, r7
 800422e:	0021      	movs	r1, r4
 8004230:	9801      	ldr	r0, [sp, #4]
 8004232:	f7ff ffce 	bl	80041d2 <memcpy>
 8004236:	0021      	movs	r1, r4
 8004238:	0030      	movs	r0, r6
 800423a:	f7ff fbc1 	bl	80039c0 <_free_r>
 800423e:	9c01      	ldr	r4, [sp, #4]
 8004240:	e7da      	b.n	80041f8 <_realloc_r+0x14>

08004242 <_malloc_usable_size_r>:
 8004242:	1f0b      	subs	r3, r1, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1f18      	subs	r0, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	da01      	bge.n	8004250 <_malloc_usable_size_r+0xe>
 800424c:	580b      	ldr	r3, [r1, r0]
 800424e:	18c0      	adds	r0, r0, r3
 8004250:	4770      	bx	lr
	...

08004254 <_init>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr

08004260 <_fini>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr
